[
  "\t",
  "\t\t\t",
  "\t\t\n\t",
  "\t\t ",
  "\t\n",
  "\t\n\t",
  "\n",
  "\n\t",
  "\n\t\t",
  "\n\t\t\t",
  "\n\t\t\t\t",
  "\n\t\t\t\t\t",
  "\n\t\t\t\t\t\t",
  "\n\t\t\t\t\t\t\t",
  "\n\t\t\t\t\t\t\t\t",
  "\n\t\t\t\t\t\t\t\t\t",
  "\n\t\t\t ",
  "\n\n",
  "\n\n\t",
  "\n\n\t\t",
  "\n\n\t\t\t",
  "\n\n\n",
  "\n\n  ",
  "\n\n   ",
  "\n\n    ",
  "\n\n      ",
  "\n\n        ",
  "\n\n         ",
  "\n\n          ",
  "\n\n            ",
  "\n\n                ",
  "\n\n                    ",
  "\n\n                            ",
  "\n ",
  "\n  ",
  "\n  \n",
  "\n  \n  ",
  "\n   ",
  "\n    ",
  "\n    \n",
  "\n    \n    ",
  "\n     ",
  "\n      ",
  "\n      \n    ",
  "\n       ",
  "\n        ",
  "\n        \n    ",
  "\n         ",
  "\n          ",
  "\n           ",
  "\n            ",
  "\n             ",
  "\n              ",
  "\n               ",
  "\n                ",
  "\n                 ",
  "\n                  ",
  "\n                   ",
  "\n                    ",
  "\n                     ",
  "\n                       ",
  "\n                        ",
  "\n                         ",
  "\n                           ",
  "\n                            ",
  "\n                              ",
  "\n                                ",
  "\n                                   ",
  "\n                                    ",
  "\n                                     ",
  "\n                                          ",
  "\n                                                   ",
  " ",
  " \n",
  " \n  ",
  "  ",
  "  \n",
  "   ",
  "    ",
  "     ",
  "      ",
  "       ",
  "        ",
  "         ",
  "          ",
  "           ",
  "            ",
  "             ",
  "              ",
  "               ",
  "                ",
  "                 ",
  "                  ",
  "                   ",
  "                    ",
  "                     ",
  "                      ",
  "                       ",
  "                        ",
  "                         ",
  "                          ",
  "                           ",
  "                            ",
  "                             ",
  "                               ",
  "                                    ",
  "                                     ",
  "                                        ",
  "                                         ",
  "!",
  "!='",
  "!=j",
  "!=y",
  "!\\n",
  "!ok",
  "\"",
  "\"%c",
  "\"%d",
  "\"%s",
  "\",T",
  "\",a",
  "\",c",
  "\",h",
  "\",t",
  "\",x",
  "\"NO",
  "\"To",
  "\"[e",
  "\"[i",
  "\"[j",
  "\"[u",
  "\"\\n",
  "\"im",
  "\"no",
  "\"to",
  "#",
  "#\\n",
  "$",
  "%",
  "%10",
  "%36",
  "%3d",
  "%60",
  "%cy",
  "%lf",
  "&",
  "&&b",
  "&&j",
  "&&u",
  "&&v",
  "&&x",
  "&&y",
  "&(T",
  "&(t",
  "&-i",
  "&-k",
  "'",
  "''",
  "')break",
  "')o",
  "')xxxx",
  "'+1",
  "',v",
  "',x",
  "'-(",
  "'-)",
  "';i++",
  "';x",
  "';x++",
  "'Cause",
  "'Cos",
  "'Coz",
  "'Cuz",
  "'S",
  "'X",
  "'Xxx",
  "'Xxxxx",
  "'am",
  "'bout",
  "'cause",
  "'cos",
  "'coz",
  "'cuz",
  "'d",
  "'em",
  "'ll",
  "'m",
  "'nuff",
  "'re",
  "'s",
  "'th",
  "'ve",
  "'x",
  "'xx",
  "'xxx",
  "'xxxx",
  "'y",
  "(",
  "(!n",
  "(!x",
  "(\"%",
  "('+",
  "('-",
  "('/",
  "('0",
  "('1",
  "('A",
  "('C",
  "('D",
  "('G",
  "('L",
  "('R",
  "('T",
  "('U",
  "('a",
  "('c",
  "('d",
  "('g",
  "('l",
  "('r",
  "('t",
  "('u",
  "(((",
  "((D",
  "((a",
  "((d",
  "((k",
  "((m",
  "((n",
  "((u",
  "((x",
  "(*>",
  "(*K",
  "(*_*)",
  "(*a",
  "(*b",
  "(*k",
  "(*x",
  "(-1",
  "(-8",
  "(-:",
  "(-;",
  "(-_-)",
  "(-b",
  "(-d",
  "(._.)",
  "(10",
  "(13",
  "(20",
  "(26",
  "(27",
  "(81",
  "(90",
  "(:",
  "(;",
  "(;i",
  "(=",
  "(>_<)",
  "(PI",
  "(VI",
  "(^_^)",
  "(_n",
  "(a1",
  "(a2",
  "(ai",
  "(ay",
  "(b1",
  "(b2",
  "(c1",
  "(ch",
  "(ci",
  "(d1",
  "(da",
  "(dp",
  "(dy",
  "(ha",
  "(id",
  "(ii",
  "(it",
  "(jk",
  "(k1",
  "(k2",
  "(l1",
  "(l2",
  "(ll",
  "(ly",
  "(m1",
  "(m2",
  "(mg",
  "(mh",
  "(mm",
  "(mn",
  "(mw",
  "(mx",
  "(n1",
  "(n2",
  "(n3",
  "(nc",
  "(ny",
  "(o:",
  "(p1",
  "(p2",
  "(pa",
  "(pi",
  "(pq",
  "(pt",
  "(py",
  "(r1",
  "(rp",
  "(rr",
  "(s1",
  "(s2",
  "(si",
  "(sj",
  "(sq",
  "(sx",
  "(sy",
  "(tf",
  "(tn",
  "(to",
  "(tp",
  "(vi",
  "(vn",
  "(x0",
  "(x1",
  "(x2",
  "(x3",
  "(x:",
  "(x_x)",
  "(xs",
  "(y1",
  "(y2",
  "(ya",
  "(yb",
  "(ys",
  "(yy",
  "({0",
  "({1",
  "({a",
  "({b",
  "({c",
  "({d",
  "({g",
  "({i",
  "({j",
  "({k",
  "({l",
  "({n",
  "({r",
  "({s",
  "({t",
  "({u",
  "({v",
  "({w",
  "({x",
  "({z",
  "(\u00ac_\u00ac)",
  "(\u0ca0_\u0ca0)",
  "(\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35\u253b\u2501\u253b",
  ")",
  ")%8",
  ")%B",
  ")%M",
  ")%b",
  ")%m",
  ")%x",
  ")%y",
  ")(i",
  ")))",
  "))c",
  ")*a",
  ")*b",
  ")*i",
  ")+1",
  ")+t",
  "),b",
  "),c",
  "),e",
  "),f",
  "),i",
  "),p",
  "),u",
  "),v",
  "),w",
  "),x",
  ")-1",
  ")-:",
  ")/2",
  ")/3",
  ")/k",
  ")/m",
  ")/\u00af",
  "):",
  ");b",
  ")=a",
  ")=b",
  ")=p",
  ")=x",
  ")=z",
  ")>1",
  ")>M",
  ")>m",
  ")[0",
  ")[i",
  ")[z",
  ")\\n",
  ")o=",
  ")ok",
  "*",
  "*(d",
  "*(l",
  "*(n",
  "*(y",
  "*32",
  "*60",
  "*it",
  "*nn",
  "*t2",
  "+",
  "+)M",
  "+)c",
  "+)m",
  "++j",
  "++k",
  "++n",
  "+.h",
  "+10",
  "+11",
  "+2k",
  "+<2",
  "+=8",
  "+=B",
  "+=M",
  "+=a",
  "+=b",
  "+=c",
  "+=i",
  "+=j",
  "+=k",
  "+=m",
  "+=x",
  "+\\n",
  "+pb",
  ",",
  ",&b",
  ",&c",
  ",-1",
  ",-2",
  ",47",
  ",d2",
  ",k2",
  ",pb",
  ",s2",
  ",y2",
  "-",
  "-%d",
  "-'0",
  "-'1",
  "-'A",
  "-'E",
  "-'P",
  "-'R",
  "-'a",
  "-'e",
  "-'p",
  "-'r",
  "-((",
  "-(M",
  "-(P",
  "-(i",
  "-(m",
  "-(n",
  "-(n-1)*maxCost",
  "-(n-1)*maxcost",
  "-(n-1)C",
  "-(n-1)c",
  "-(p",
  "-(x",
  "-(x-d)*xxxXxxx",
  "-(x-d)*xxxx",
  "-(x-d)X",
  "-(x-d)x",
  "-))",
  "-+\"[u",
  "-+\"[x",
  "---",
  "--a",
  "--b",
  "--childNode",
  "--childnode",
  "--col",
  "--connected_edges",
  "--countStableStacks",
  "--count[x[--r",
  "--count[x[l++",
  "--counts[identifiers[input",
  "--countstablestacks",
  "--digits[i",
  "--digits[j",
  "--i",
  "--in_degree[v",
  "--it",
  "--j",
  "--k",
  "--l",
  "--leftBound",
  "--leftbound",
  "--level",
  "--n",
  "--newX",
  "--newY",
  "--newx",
  "--newy",
  "--operation",
  "--parentNode",
  "--parentnode",
  "--queryIndex",
  "--queryindex",
  "--r",
  "--remainingInvalidBallots",
  "--remaininginvalidballots",
  "--result",
  "--row",
  "--rowEnd",
  "--rowend",
  "--source",
  "--t[mi[u",
  "--target",
  "--u",
  "--v",
  "--x",
  "--x[xx[x",
  "--xx",
  "--xx_xxxx[x",
  "--xxx",
  "--xxxX",
  "--xxxXxx",
  "--xxxx",
  "--xxxxXxxx",
  "--xxxxXxxxx",
  "--xxxxXxxxxXxxxx",
  "--xxxx[x",
  "--xxxx[x[--x",
  "--xxxx[x[x++",
  "--xxxx[xxxx[xxxx",
  "--xxxx_xxxx",
  "--y",
  "-/",
  "-0",
  "-1",
  "-1.0",
  "-10",
  "-10000000",
  "-10001",
  "-1118",
  "-1680",
  "-1\\n",
  "-2",
  "-2000000000",
  "-2018",
  "-2e18",
  "-3",
  "-4",
  "-8",
  "-=",
  "-=k",
  "->d",
  "->i",
  "->l",
  "->r",
  "->x",
  "->y",
  "-D",
  "-INF",
  "-O",
  "-P",
  "-X",
  "-XXX",
  "-\\n\"[i",
  "-\\x\"[x",
  "-_-",
  "-__-",
  "-c",
  "-c<<\"\\n",
  "-colors.back",
  "-cost",
  "-d",
  "-d.d",
  "-d[n",
  "-d\\x",
  "-dd",
  "-dddd",
  "-distances[nodesCount",
  "-distances[nodescount",
  "-dual[s",
  "-duals[source",
  "-dxdd",
  "-error",
  "-group[i",
  "-group[node",
  "-i",
  "-inf",
  "-it",
  "-k",
  "-l",
  "-m",
  "-n",
  "-num_components--",
  "-numeric_limits",
  "-o",
  "-or",
  "-p",
  "-result.first",
  "-size",
  "-type",
  "-u",
  "-u<<endl",
  "-v",
  "-vertex",
  "-w",
  "-weight",
  "-x",
  "-x.xxxx",
  "-x1",
  "-x<<\"\\x",
  "-x<<xxxx",
  "-x[x",
  "-xx",
  "-xxx",
  "-xxx_xxxx--",
  "-xxxx",
  "-xxxx.xxxx",
  "-xxxx[x",
  "-xxxx[xxxx",
  "-xxxx[xxxxXxxxx",
  "-xxxx_xxxx",
  "-y",
  "-z.first",
  "-|",
  ".",
  "...",
  ".81",
  ".C.",
  ".D.",
  ".E.",
  ".G.",
  ".H.",
  ".J.",
  ".M.",
  ".Y.",
  ".\\n",
  ".\\x",
  "._.",
  ".e.",
  ".fi",
  ".g.",
  ".m.",
  ".ok",
  ".push_back(i",
  ".s.",
  ".t0",
  ".to",
  ".xxxx_xxxx(x",
  ".z0",
  ".z1",
  "/",
  "/%d",
  "/(T",
  "/(t",
  "//",
  "//https://cses.fi",
  "//xxxx://xxxx.xx",
  "/3",
  "/60",
  "/=",
  "/=2",
  "/=i",
  "/=k",
  "/=m",
  "/A1",
  "/A2",
  "/B5",
  "/C1",
  "/C2",
  "/D1",
  "/D2",
  "/F1",
  "/a1",
  "/a2",
  "/b5",
  "/c1",
  "/c2",
  "/cd",
  "/d",
  "/d1",
  "/d2",
  "/f1",
  "/or",
  "0",
  "0']++",
  "0+c",
  "0,0",
  "0,0,0",
  "0,1",
  "0,1},{1,2},{3,4},{4,5},{6,7},{7,8},{0,3},{1,4},{2,5},{3,6},{4,7},{5,8",
  "0,2",
  "0,i",
  "0,j",
  "0,k",
  "0,l",
  "0,u",
  "0,v",
  "0,x",
  "0.0",
  "0.00001",
  "0.001",
  "0.5",
  "0.o",
  "000",
  "001",
  "002",
  "003",
  "005",
  "007",
  "009",
  "00L",
  "00l",
  "01",
  "01\"[s[n",
  "010",
  "011",
  "013",
  "016",
  "017",
  "018",
  "019",
  "02/",
  "021",
  "023",
  "024",
  "027",
  "029",
  "03/",
  "031",
  "033",
  "037",
  "039",
  "041",
  "043",
  "047",
  "048",
  "049",
  "051",
  "053",
  "057",
  "059",
  "061",
  "063",
  "064",
  "067",
  "069",
  "071",
  "073",
  "075",
  "077",
  "079",
  "081",
  "083",
  "087",
  "089",
  "09/",
  "091",
  "093",
  "096",
  "097",
  "099",
  "0;T",
  "0;i",
  "0;j",
  "0;k",
  "0;t",
  "0LL",
  "0[i",
  "0\\n",
  "0_0",
  "0_o",
  "0ll",
  "0th",
  "0xf",
  "1",
  "1(0",
  "1(a",
  "1(g",
  "1(i",
  "1(j",
  "1(k",
  "1(n",
  "1(u",
  "1(v",
  "1)%M",
  "1)%m",
  "1)*(y",
  "1)*i",
  "1),p",
  "1)/",
  "1)/m",
  "1):s.substr(k",
  "1)C",
  "1)N",
  "1)[0",
  "1)][i",
  "1)][j",
  "1)c",
  "1)n",
  "1)o",
  "1++",
  "1,0",
  "1,1",
  "1,M",
  "1,a",
  "1,b",
  "1,j",
  "1,k",
  "1,m",
  "1,t",
  "1,v",
  "1,x",
  "1.0",
  "1.00001",
  "1.x",
  "1.y",
  "10",
  "100",
  "100.0",
  "1000",
  "10000",
  "100000",
  "1000000",
  "10000000",
  "1000000000",
  "100000000000",
  "1000000000000000000LL",
  "1000000000000000000ll",
  "100000000000000000LL",
  "100000000000000000ll",
  "100000000000000LL",
  "100000000000000ll",
  "1000000000L",
  "1000000000LL",
  "1000000000l",
  "1000000000ll",
  "1000000001",
  "1000000007",
  "1000000LL",
  "1000000ll",
  "1000001",
  "100001",
  "100005",
  "10001",
  "10007",
  "10009",
  "1001",
  "1002",
  "10037",
  "10039",
  "10061",
  "10067",
  "10069",
  "10079",
  "1009",
  "10091",
  "10093",
  "10099",
  "101",
  "10103",
  "10111",
  "1013",
  "10133",
  "10139",
  "10141",
  "10151",
  "10159",
  "10163",
  "10169",
  "10177",
  "10181",
  "1019",
  "10193",
  "102",
  "1021",
  "10211",
  "10223",
  "1024",
  "10243",
  "10247",
  "10253",
  "10259",
  "10267",
  "10271",
  "10273",
  "10289",
  "103",
  "10301",
  "10303",
  "1031",
  "10313",
  "10321",
  "1033",
  "10331",
  "10333",
  "10337",
  "10343",
  "10357",
  "10369",
  "10377",
  "1039",
  "10391",
  "10399",
  "104",
  "10427",
  "10429",
  "10433",
  "10453",
  "10457",
  "10459",
  "10463",
  "10477",
  "10487",
  "1049",
  "10499",
  "105",
  "10501",
  "1051",
  "10513",
  "10529",
  "10531",
  "10559",
  "10567",
  "10589",
  "10597",
  "106",
  "10601",
  "10607",
  "1061",
  "10613",
  "10627",
  "1063",
  "10631",
  "10639",
  "10651",
  "10657",
  "10663",
  "10667",
  "10687",
  "1069",
  "10691",
  "107",
  "10709",
  "10711",
  "10723",
  "10729",
  "10733",
  "10739",
  "1075",
  "10753",
  "10771",
  "10781",
  "10789",
  "10799",
  "108",
  "1081",
  "10831",
  "10837",
  "10847",
  "10853",
  "10859",
  "10861",
  "10867",
  "1087",
  "10883",
  "10889",
  "10891",
  "109",
  "10903",
  "10909",
  "1091",
  "1093",
  "10937",
  "10939",
  "10949",
  "10957",
  "1097",
  "10973",
  "10979",
  "10987",
  "10993",
  "10a.m",
  "10a.m.",
  "10p.m",
  "10p.m.",
  "11",
  "11/",
  "110",
  "11003",
  "11027",
  "1103",
  "11047",
  "11057",
  "11059",
  "11069",
  "11071",
  "11083",
  "11087",
  "1109",
  "11093",
  "111",
  "11113",
  "11117",
  "11119",
  "11131",
  "11149",
  "11159",
  "11161",
  "1117",
  "11171",
  "11173",
  "11177",
  "1118",
  "11197",
  "112",
  "11213",
  "1123",
  "11239",
  "11243",
  "11251",
  "11257",
  "11261",
  "11273",
  "11279",
  "11286",
  "11287",
  "1129",
  "11299",
  "113",
  "11311",
  "11317",
  "11321",
  "11329",
  "11351",
  "11353",
  "11369",
  "11383",
  "1139",
  "11393",
  "11399",
  "114",
  "11411",
  "11423",
  "11437",
  "11443",
  "11447",
  "11467",
  "11471",
  "11483",
  "11489",
  "11491",
  "11497",
  "115",
  "11503",
  "1151",
  "11519",
  "11527",
  "1153",
  "11549",
  "11551",
  "11579",
  "11587",
  "11593",
  "11597",
  "116",
  "11617",
  "11621",
  "1163",
  "11633",
  "11657",
  "11677",
  "11681",
  "11689",
  "11699",
  "117",
  "11701",
  "1171",
  "11717",
  "11719",
  "11731",
  "11743",
  "11777",
  "11779",
  "11783",
  "11789",
  "118",
  "11801",
  "11807",
  "1181",
  "11813",
  "11821",
  "11827",
  "11831",
  "11833",
  "11839",
  "11863",
  "11867",
  "1187",
  "11887",
  "11897",
  "119",
  "11903",
  "11909",
  "1191",
  "11923",
  "11927",
  "1193",
  "11933",
  "11939",
  "11941",
  "11953",
  "11959",
  "11969",
  "11971",
  "11981",
  "11987",
  "11;;p++",
  "11a.m",
  "11a.m.",
  "11p.m",
  "11p.m.",
  "12",
  "12.0",
  "12/",
  "120",
  "12007",
  "1201",
  "12011",
  "12037",
  "12041",
  "12043",
  "12049",
  "12071",
  "12073",
  "12097",
  "121",
  "12101",
  "12107",
  "12109",
  "12113",
  "12119",
  "1213",
  "12143",
  "12149",
  "12157",
  "12161",
  "12163",
  "1217",
  "12197",
  "12203",
  "12211",
  "12227",
  "1223",
  "12239",
  "12241",
  "12251",
  "12253",
  "12263",
  "12269",
  "12277",
  "12281",
  "12289",
  "1229",
  "123",
  "12301",
  "1231",
  "12323",
  "12329",
  "12343",
  "12347",
  "1237",
  "12373",
  "12377",
  "12379",
  "12391",
  "12401",
  "12409",
  "12413",
  "12421",
  "12433",
  "12437",
  "12451",
  "12457",
  "12473",
  "12479",
  "12487",
  "1249",
  "12491",
  "12497",
  "125",
  "12503",
  "12511",
  "12517",
  "12527",
  "12539",
  "12541",
  "12547",
  "12553",
  "12569",
  "12577",
  "12583",
  "12589",
  "1259",
  "12601",
  "12611",
  "12613",
  "12619",
  "12637",
  "12641",
  "12647",
  "12653",
  "12659",
  "12671",
  "12689",
  "12697",
  "127",
  "12703",
  "12713",
  "12721",
  "12739",
  "12743",
  "12757",
  "12763",
  "1277",
  "12781",
  "1279",
  "12791",
  "12799",
  "128",
  "12809",
  "12821",
  "12823",
  "12829",
  "1283",
  "12841",
  "12853",
  "12889",
  "1289",
  "12893",
  "12899",
  "129",
  "12907",
  "1291",
  "12911",
  "12917",
  "12919",
  "12923",
  "12941",
  "12953",
  "12959",
  "12967",
  "1297",
  "12973",
  "12979",
  "12983",
  "12a.m",
  "12a.m.",
  "12p.m",
  "12p.m.",
  "13",
  "13/",
  "130",
  "13001",
  "13003",
  "13007",
  "13009",
  "1301",
  "1303",
  "13033",
  "13037",
  "13043",
  "13049",
  "13063",
  "1307",
  "13093",
  "13099",
  "131",
  "13103",
  "13109",
  "13121",
  "13127",
  "13147",
  "13151",
  "13159",
  "13163",
  "13171",
  "13177",
  "13183",
  "13187",
  "1319",
  "132",
  "1321",
  "13217",
  "13219",
  "13229",
  "13241",
  "13249",
  "13259",
  "13267",
  "1327",
  "13291",
  "13297",
  "133",
  "13309",
  "13313",
  "13327",
  "13331",
  "13337",
  "13339",
  "13367",
  "13381",
  "13397",
  "13399",
  "134",
  "13411",
  "13417",
  "13421",
  "13441",
  "13451",
  "13457",
  "13463",
  "13469",
  "13477",
  "13487",
  "13499",
  "135",
  "13513",
  "13523",
  "13537",
  "13553",
  "13567",
  "13577",
  "13591",
  "13597",
  "136",
  "1361",
  "13613",
  "13619",
  "13627",
  "13633",
  "13649",
  "13669",
  "1367",
  "13679",
  "13681",
  "13687",
  "13691",
  "13693",
  "13697",
  "137",
  "13709",
  "13711",
  "13721",
  "13723",
  "13729",
  "1373",
  "13751",
  "13757",
  "13759",
  "13763",
  "13781",
  "13789",
  "13799",
  "138",
  "13807",
  "1381",
  "13829",
  "13831",
  "13841",
  "13859",
  "13873",
  "13877",
  "13879",
  "13883",
  "139",
  "13901",
  "13903",
  "13907",
  "13913",
  "13921",
  "13931",
  "13933",
  "13963",
  "13967",
  "1399",
  "13997",
  "13999",
  "13th",
  "14",
  "140",
  "14009",
  "14011",
  "14029",
  "14033",
  "14051",
  "14057",
  "14071",
  "14081",
  "14083",
  "14087",
  "1409",
  "141",
  "14107",
  "14143",
  "14149",
  "14153",
  "14159",
  "14173",
  "14177",
  "14197",
  "14207",
  "14221",
  "1423",
  "14243",
  "14249",
  "14251",
  "1427",
  "14281",
  "1429",
  "14293",
  "143",
  "14303",
  "14321",
  "14323",
  "14327",
  "1433",
  "14341",
  "14347",
  "14369",
  "14387",
  "14389",
  "1439",
  "144",
  "14401",
  "14407",
  "14411",
  "14419",
  "14423",
  "14431",
  "14437",
  "14447",
  "14449",
  "14461",
  "1447",
  "14479",
  "14489",
  "145",
  "14503",
  "1451",
  "14519",
  "1453",
  "14533",
  "14537",
  "14543",
  "14549",
  "14551",
  "14557",
  "14561",
  "14563",
  "1459",
  "14591",
  "14593",
  "14621",
  "14627",
  "14629",
  "14633",
  "14639",
  "14653",
  "14657",
  "14669",
  "14683",
  "14699",
  "147",
  "1471",
  "14713",
  "14717",
  "14723",
  "14731",
  "14737",
  "14741",
  "14747",
  "14753",
  "14759",
  "14767",
  "14771",
  "14779",
  "14783",
  "14797",
  "1481",
  "14813",
  "14821",
  "14827",
  "1483",
  "14831",
  "14843",
  "14851",
  "14867",
  "14869",
  "1487",
  "14879",
  "14887",
  "1489",
  "14891",
  "14897",
  "149",
  "14923",
  "14929",
  "1493",
  "14939",
  "14947",
  "14951",
  "14957",
  "14969",
  "14983",
  "1499",
  "15",
  "15013",
  "15017",
  "15031",
  "15053",
  "15061",
  "15073",
  "15077",
  "15083",
  "15091",
  "151",
  "15101",
  "15107",
  "1511",
  "15121",
  "15131",
  "15137",
  "15139",
  "15149",
  "15161",
  "15173",
  "15187",
  "15193",
  "15199",
  "15217",
  "15227",
  "1523",
  "15233",
  "15241",
  "15259",
  "15263",
  "15269",
  "15271",
  "15277",
  "15287",
  "15289",
  "15299",
  "153",
  "15307",
  "1531",
  "15313",
  "15319",
  "15329",
  "15331",
  "15349",
  "15359",
  "15361",
  "15373",
  "15377",
  "15383",
  "15391",
  "15401",
  "15413",
  "15427",
  "1543",
  "15439",
  "15443",
  "15451",
  "15461",
  "15467",
  "15473",
  "1549",
  "15493",
  "15497",
  "15511",
  "15527",
  "1553",
  "15541",
  "15551",
  "15559",
  "15569",
  "15581",
  "15583",
  "1559",
  "156",
  "15601",
  "15607",
  "15619",
  "15629",
  "15641",
  "15643",
  "15647",
  "15649",
  "15661",
  "15667",
  "1567",
  "15671",
  "15679",
  "15683",
  "157",
  "1571",
  "15727",
  "15731",
  "15733",
  "15737",
  "15739",
  "15749",
  "15761",
  "15767",
  "15773",
  "15787",
  "1579",
  "15791",
  "15797",
  "15803",
  "15809",
  "15817",
  "15823",
  "1583",
  "15859",
  "15877",
  "15881",
  "15887",
  "15889",
  "159",
  "15901",
  "15907",
  "15913",
  "15919",
  "15923",
  "15937",
  "15959",
  "1597",
  "15971",
  "15973",
  "15991",
  "16",
  "160",
  "16001",
  "16007",
  "1601",
  "16033",
  "16057",
  "16061",
  "16063",
  "16067",
  "16069",
  "1607",
  "16073",
  "16087",
  "1609",
  "16091",
  "16097",
  "161",
  "16103",
  "16111",
  "16127",
  "1613",
  "16139",
  "16141",
  "16183",
  "16187",
  "16189",
  "1619",
  "16193",
  "162",
  "1621",
  "16217",
  "16223",
  "16229",
  "16231",
  "16249",
  "16253",
  "16267",
  "1627",
  "16273",
  "163",
  "16301",
  "16319",
  "16333",
  "16339",
  "16349",
  "163577857",
  "16361",
  "16363",
  "16369",
  "1637",
  "16381",
  "164",
  "16411",
  "16417",
  "16421",
  "16427",
  "16433",
  "16447",
  "16451",
  "16453",
  "16477",
  "16481",
  "16487",
  "16493",
  "165",
  "16519",
  "16529",
  "16547",
  "16553",
  "16561",
  "16567",
  "1657",
  "16573",
  "16603",
  "16607",
  "16619",
  "1663",
  "16631",
  "16633",
  "16649",
  "16651",
  "16657",
  "16661",
  "1667",
  "16673",
  "1669",
  "16691",
  "16693",
  "16699",
  "167",
  "16703",
  "16729",
  "16741",
  "16747",
  "16759",
  "16763",
  "16787",
  "168",
  "1680",
  "1681",
  "16811",
  "16823",
  "16829",
  "16831",
  "16843",
  "16871",
  "16879",
  "1688",
  "16883",
  "16889",
  "169",
  "16901",
  "16903",
  "16921",
  "16927",
  "1693",
  "16931",
  "16937",
  "16943",
  "16963",
  "1697",
  "16979",
  "16981",
  "16987",
  "1699",
  "16993",
  "17",
  "17/",
  "17011",
  "17021",
  "17027",
  "17029",
  "17033",
  "17041",
  "17047",
  "17053",
  "17077",
  "1709",
  "17093",
  "17099",
  "171",
  "17107",
  "17117",
  "17123",
  "17137",
  "17159",
  "17167",
  "17183",
  "17189",
  "17191",
  "17203",
  "17207",
  "17209",
  "1721",
  "1723",
  "17231",
  "17239",
  "17257",
  "17291",
  "17293",
  "17299",
  "173",
  "17317",
  "17321",
  "17327",
  "1733",
  "17333",
  "17341",
  "17351",
  "17359",
  "17377",
  "17383",
  "17387",
  "17389",
  "17393",
  "174",
  "17401",
  "1741",
  "17417",
  "17419",
  "17431",
  "17443",
  "17449",
  "17467",
  "1747",
  "17471",
  "17477",
  "17483",
  "17489",
  "17491",
  "17497",
  "17509",
  "17519",
  "1753",
  "17539",
  "17551",
  "17569",
  "17573",
  "17579",
  "17581",
  "1759",
  "17597",
  "17599",
  "176",
  "17609",
  "17623",
  "17627",
  "17657",
  "17659",
  "17669",
  "17681",
  "17683",
  "177",
  "17707",
  "17713",
  "17729",
  "17737",
  "17747",
  "17749",
  "17761",
  "1777",
  "17783",
  "17789",
  "17791",
  "17807",
  "17827",
  "1783",
  "17837",
  "17839",
  "17851",
  "17863",
  "1787",
  "17881",
  "1789",
  "17891",
  "179",
  "17903",
  "17909",
  "17911",
  "17921",
  "17923",
  "17929",
  "17939",
  "17957",
  "17959",
  "17971",
  "17977",
  "17981",
  "17987",
  "17989",
  "18",
  "180",
  "180.0",
  "1801",
  "18013",
  "18041",
  "18043",
  "18047",
  "18049",
  "18059",
  "18061",
  "18077",
  "18089",
  "18097",
  "181",
  "1811",
  "18119",
  "18121",
  "18127",
  "18131",
  "18133",
  "18143",
  "18149",
  "18169",
  "18181",
  "18191",
  "18199",
  "182",
  "18211",
  "18217",
  "18223",
  "18229",
  "1823",
  "18233",
  "18251",
  "18253",
  "18257",
  "18269",
  "18287",
  "18289",
  "183",
  "18301",
  "18307",
  "1831",
  "18311",
  "18313",
  "18329",
  "18341",
  "18353",
  "18367",
  "18371",
  "18379",
  "18397",
  "18401",
  "18413",
  "18427",
  "18433",
  "18439",
  "18443",
  "18451",
  "18457",
  "18461",
  "1847",
  "18481",
  "18493",
  "185",
  "18503",
  "18517",
  "18521",
  "18523",
  "18539",
  "18541",
  "18553",
  "18583",
  "18587",
  "18593",
  "1861",
  "18617",
  "18637",
  "18661",
  "1867",
  "18671",
  "18679",
  "18691",
  "187",
  "18701",
  "1871",
  "18713",
  "18719",
  "1873",
  "18731",
  "18743",
  "18749",
  "18757",
  "1877",
  "18773",
  "18787",
  "1879",
  "18793",
  "18797",
  "18803",
  "18839",
  "18859",
  "18869",
  "1889",
  "18899",
  "189",
  "18911",
  "18913",
  "18917",
  "18919",
  "18947",
  "18959",
  "18973",
  "18979",
  "19",
  "19/",
  "19001",
  "19009",
  "1901",
  "19013",
  "19031",
  "19037",
  "19051",
  "19069",
  "1907",
  "19073",
  "19079",
  "19081",
  "19087",
  "191",
  "19121",
  "1913",
  "19139",
  "19141",
  "19157",
  "19163",
  "19181",
  "19183",
  "192",
  "19207",
  "19211",
  "19213",
  "19219",
  "19231",
  "19237",
  "19249",
  "19259",
  "19267",
  "19273",
  "19289",
  "193",
  "19301",
  "19309",
  "1931",
  "19319",
  "1933",
  "19333",
  "19373",
  "19379",
  "19381",
  "19387",
  "19391",
  "19403",
  "19417",
  "19421",
  "19423",
  "19427",
  "19429",
  "19433",
  "19441",
  "19447",
  "19457",
  "19463",
  "19469",
  "19471",
  "19477",
  "19483",
  "19489",
  "1949",
  "195",
  "19501",
  "19507",
  "1951",
  "19531",
  "19541",
  "19543",
  "19553",
  "19559",
  "19571",
  "19577",
  "19583",
  "19597",
  "19603",
  "19609",
  "19661",
  "19681",
  "19687",
  "19697",
  "19699",
  "197",
  "19709",
  "19717",
  "19727",
  "1973",
  "19739",
  "19751",
  "19753",
  "19759",
  "19763",
  "19777",
  "1979",
  "19793",
  "19801",
  "19813",
  "19819",
  "19841",
  "19843",
  "19853",
  "19861",
  "19867",
  "1987",
  "19889",
  "19891",
  "199",
  "1991",
  "19913",
  "19919",
  "19927",
  "1993",
  "19937",
  "19949",
  "19961",
  "19963",
  "1997",
  "19973",
  "19979",
  "1998",
  "1999",
  "19991",
  "19993",
  "19997",
  "1;;T++",
  "1;;t++",
  "1;i",
  "1;j",
  "1<<\"\\n",
  "1L",
  "1LL",
  "1[0",
  "1[i",
  "1[j",
  "1[u",
  "1[z",
  "1\\n",
  "1]++",
  "1].begin",
  "1].data",
  "1].erase(dp[i",
  "1].first",
  "1].flip",
  "1].insert(*it",
  "1].insert(0",
  "1].insert(u",
  "1].insert(v",
  "1].push_back(u",
  "1].push_back(v",
  "1].push_back({graphMap[variable1",
  "1].push_back({graphMap[variable2",
  "1].push_back({graphmap[variable1",
  "1].push_back({graphmap[variable2",
  "1].push_back({i",
  "1].push_back({v",
  "1].real",
  "1].second",
  "1].size",
  "1].start",
  "1].sum",
  "1][(i",
  "1][0",
  "1][1",
  "1][2",
  "1][3",
  "1][4",
  "1][5",
  "1][6",
  "1][MAX_COINS",
  "1][N",
  "1][a[i",
  "1][ancestors[j",
  "1][b",
  "1][col].flip",
  "1][countNodes",
  "1][countnodes",
  "1][currentIndex][0",
  "1][currentIndex][1",
  "1][currentindex][0",
  "1][currentindex][1",
  "1][endX",
  "1][endx",
  "1][i",
  "1][j",
  "1][j].insert(new_value",
  "1][j].insert(x",
  "1][j][0",
  "1][j][1",
  "1][j][2",
  "1][k",
  "1][l",
  "1][max_coins",
  "1][n",
  "1][r",
  "1][startX",
  "1][startx",
  "1][tree[level",
  "1][u",
  "1][v",
  "1][x",
  "1][z",
  "1]].push_back(i",
  "1]][j",
  "1a.m",
  "1a.m.",
  "1e-9",
  "1e18",
  "1e4",
  "1e5",
  "1e6",
  "1e7",
  "1e9",
  "1l",
  "1ll",
  "1p.m",
  "1p.m.",
  "1st",
  "1th",
  "2",
  "2%M",
  "2%m",
  "2(0",
  "2(a",
  "2(d",
  "2(g",
  "2(i",
  "2(j",
  "2(k",
  "2(m",
  "2(n",
  "2(s",
  "2(u",
  "2(v",
  "2(x",
  "2(z",
  "2))/2",
  "2*N",
  "2*hmin+hmax)/3",
  "2*i",
  "2*j",
  "2*k",
  "2*k+1",
  "2*m",
  "2*n",
  "2*nn",
  "2++",
  "2+n%3<<\"\\n",
  "2,2",
  "2,3,5,7,11,13,17,19,23,29,31,37,41,43,47",
  "2.0",
  "2.x",
  "2.y",
  "20",
  "20/",
  "200",
  "2000",
  "20000",
  "200000",
  "200100",
  "20011",
  "20021",
  "20023",
  "20029",
  "2003",
  "20047",
  "20051",
  "20063",
  "20071",
  "20089",
  "201",
  "2010",
  "20101",
  "20107",
  "2011",
  "20113",
  "20117",
  "20123",
  "20129",
  "2013",
  "20143",
  "20147",
  "20149",
  "2016",
  "20161",
  "2017",
  "20173",
  "20177",
  "2018",
  "20183",
  "202",
  "20201",
  "20219",
  "20231",
  "20233",
  "20249",
  "20261",
  "20269",
  "2027",
  "20287",
  "2029",
  "20297",
  "203",
  "20323",
  "20327",
  "20333",
  "20341",
  "20347",
  "20353",
  "20357",
  "20359",
  "20369",
  "20389",
  "2039",
  "20393",
  "20399",
  "20407",
  "20411",
  "20431",
  "20441",
  "20443",
  "20477",
  "20479",
  "20483",
  "205",
  "20507",
  "20509",
  "20521",
  "2053",
  "20533",
  "20543",
  "20549",
  "20551",
  "20563",
  "20593",
  "20599",
  "206",
  "20611",
  "20627",
  "2063",
  "20639",
  "20641",
  "20663",
  "20681",
  "2069",
  "20693",
  "207",
  "20707",
  "20717",
  "20719",
  "20731",
  "20743",
  "20747",
  "20749",
  "20753",
  "20759",
  "20771",
  "20773",
  "20789",
  "208",
  "20807",
  "20809",
  "2081",
  "2083",
  "20849",
  "20857",
  "2087",
  "20873",
  "20879",
  "20887",
  "2089",
  "20897",
  "20899",
  "209",
  "20903",
  "20921",
  "20929",
  "20939",
  "20947",
  "20959",
  "20963",
  "20981",
  "20983",
  "2099",
  "21",
  "21/",
  "210000000",
  "210000000.0",
  "21001",
  "21011",
  "21013",
  "21017",
  "21019",
  "21023",
  "21031",
  "21059",
  "21061",
  "21067",
  "21089",
  "211",
  "21101",
  "21107",
  "2111",
  "21121",
  "2113",
  "21139",
  "21143",
  "21149",
  "21157",
  "21163",
  "21169",
  "21179",
  "21187",
  "21191",
  "21193",
  "21211",
  "21221",
  "21227",
  "21247",
  "21269",
  "21277",
  "21283",
  "2129",
  "213",
  "2131",
  "21313",
  "21317",
  "21319",
  "21323",
  "21341",
  "21347",
  "2137",
  "21377",
  "21379",
  "21383",
  "21391",
  "21397",
  "21401",
  "21407",
  "2141",
  "21419",
  "2143",
  "21433",
  "21467",
  "2147483648LL",
  "2147483648ll",
  "21481",
  "21487",
  "21491",
  "21493",
  "21499",
  "21503",
  "21517",
  "21521",
  "21523",
  "21529",
  "2153",
  "21557",
  "21559",
  "21563",
  "21569",
  "21577",
  "21587",
  "21589",
  "21599",
  "216",
  "21601",
  "2161",
  "21611",
  "21613",
  "21617",
  "2162",
  "21647",
  "21649",
  "21661",
  "21673",
  "21683",
  "217",
  "21701",
  "21713",
  "21727",
  "21737",
  "21739",
  "21751",
  "21757",
  "21767",
  "21773",
  "21787",
  "2179",
  "21799",
  "21803",
  "21817",
  "21821",
  "21839",
  "21841",
  "21851",
  "21859",
  "21863",
  "21871",
  "21881",
  "21893",
  "219",
  "21911",
  "21929",
  "21937",
  "21943",
  "21961",
  "21977",
  "21991",
  "21997",
  "22",
  "22/",
  "220",
  "22003",
  "22013",
  "22027",
  "2203",
  "22031",
  "22037",
  "22039",
  "22051",
  "22063",
  "22067",
  "2207",
  "22073",
  "22079",
  "22091",
  "22093",
  "221",
  "22109",
  "22111",
  "22123",
  "22129",
  "2213",
  "22133",
  "22147",
  "22153",
  "22157",
  "22159",
  "22171",
  "22189",
  "22193",
  "2221",
  "22229",
  "22247",
  "22259",
  "22271",
  "22273",
  "22277",
  "22279",
  "22283",
  "22291",
  "223",
  "22303",
  "22307",
  "22343",
  "22349",
  "22367",
  "22369",
  "2237",
  "22381",
  "2239",
  "22391",
  "22397",
  "22409",
  "2243",
  "22433",
  "22441",
  "22447",
  "22453",
  "22469",
  "22481",
  "22483",
  "22501",
  "2251",
  "22511",
  "22531",
  "22541",
  "22543",
  "22549",
  "22567",
  "22571",
  "22573",
  "22613",
  "22619",
  "22621",
  "22637",
  "22639",
  "22643",
  "22651",
  "22669",
  "2267",
  "22679",
  "2269",
  "22691",
  "22697",
  "22699",
  "227",
  "22709",
  "22717",
  "22721",
  "22727",
  "2273",
  "22739",
  "22741",
  "22751",
  "22769",
  "22777",
  "22783",
  "22787",
  "22807",
  "2281",
  "22811",
  "22817",
  "22853",
  "22859",
  "22861",
  "2287",
  "22871",
  "22877",
  "229",
  "22901",
  "22907",
  "22921",
  "2293",
  "22937",
  "22943",
  "22961",
  "22963",
  "2297",
  "22973",
  "22993",
  "23",
  "23/",
  "23003",
  "23011",
  "23017",
  "23021",
  "23027",
  "23029",
  "23039",
  "23041",
  "23053",
  "23057",
  "23059",
  "23063",
  "23071",
  "23081",
  "23087",
  "2309",
  "23099",
  "231",
  "2311",
  "23117",
  "23131",
  "23143",
  "23159",
  "23167",
  "23173",
  "23189",
  "23197",
  "23201",
  "23203",
  "23209",
  "23227",
  "23251",
  "23269",
  "23279",
  "23291",
  "23293",
  "23297",
  "233",
  "23311",
  "23321",
  "23327",
  "2333",
  "23333",
  "23339",
  "23357",
  "23369",
  "23371",
  "2339",
  "23399",
  "2341",
  "23417",
  "23431",
  "23447",
  "23456789TJQKA",
  "23456789tjqka",
  "23459",
  "2347",
  "23473",
  "23497",
  "23509",
  "2351",
  "23531",
  "23537",
  "23539",
  "23549",
  "23557",
  "23561",
  "23563",
  "23567",
  "2357",
  "23581",
  "23593",
  "23599",
  "23603",
  "23609",
  "23623",
  "23627",
  "23629",
  "23633",
  "23663",
  "23669",
  "23671",
  "23677",
  "23687",
  "23689",
  "237",
  "2371",
  "23719",
  "23741",
  "23743",
  "23747",
  "23753",
  "23761",
  "23767",
  "2377",
  "23773",
  "23789",
  "23801",
  "2381",
  "23813",
  "23819",
  "23827",
  "2383",
  "23831",
  "23833",
  "23857",
  "23869",
  "23873",
  "23879",
  "23887",
  "2389",
  "23893",
  "23899",
  "239",
  "23909",
  "23911",
  "23917",
  "23929",
  "2393",
  "23957",
  "23971",
  "23977",
  "23981",
  "2399",
  "23993",
  "24",
  "24/",
  "240",
  "24001",
  "24007",
  "24019",
  "24023",
  "24029",
  "24043",
  "24049",
  "24061",
  "24071",
  "24077",
  "24083",
  "24091",
  "24097",
  "241",
  "24103",
  "24107",
  "24109",
  "2411",
  "24113",
  "24121",
  "24133",
  "24137",
  "24151",
  "24169",
  "2417",
  "24179",
  "24181",
  "24197",
  "24203",
  "24223",
  "24229",
  "2423",
  "24239",
  "24247",
  "24251",
  "24281",
  "243",
  "24317",
  "24329",
  "24337",
  "24359",
  "2437",
  "24371",
  "24373",
  "24379",
  "24391",
  "24407",
  "2441",
  "24413",
  "24419",
  "24421",
  "24439",
  "24443",
  "24469",
  "2447",
  "24473",
  "24481",
  "24499",
  "24509",
  "24517",
  "24527",
  "24533",
  "24547",
  "24551",
  "24571",
  "2459",
  "24593",
  "24611",
  "24623",
  "24631",
  "24659",
  "2467",
  "24671",
  "24677",
  "24683",
  "24691",
  "24697",
  "247",
  "24709",
  "2473",
  "24733",
  "24749",
  "24763",
  "24767",
  "2477",
  "24781",
  "24793",
  "24799",
  "24809",
  "24821",
  "24841",
  "24847",
  "24851",
  "24859",
  "24877",
  "24889",
  "249",
  "24907",
  "24917",
  "24919",
  "24923",
  "24943",
  "24953",
  "24967",
  "24971",
  "24977",
  "24979",
  "24989",
  "25",
  "2500",
  "250000",
  "25013",
  "2503",
  "25031",
  "25033",
  "25037",
  "25057",
  "25073",
  "25087",
  "25097",
  "251",
  "25111",
  "25117",
  "25121",
  "25127",
  "25147",
  "25153",
  "25163",
  "25169",
  "25171",
  "25183",
  "25189",
  "252",
  "2521",
  "25219",
  "25229",
  "25237",
  "25243",
  "25247",
  "25253",
  "25261",
  "253",
  "25301",
  "25303",
  "25307",
  "25309",
  "2531",
  "25321",
  "25339",
  "25343",
  "25349",
  "25357",
  "25367",
  "25373",
  "2539",
  "25391",
  "25409",
  "25411",
  "25423",
  "2543",
  "25439",
  "25447",
  "25453",
  "25457",
  "25463",
  "25469",
  "25471",
  "2549",
  "255",
  "2551",
  "25523",
  "25537",
  "25541",
  "25561",
  "2557",
  "25577",
  "25579",
  "25583",
  "25589",
  "256",
  "25601",
  "25603",
  "25609",
  "25621",
  "25633",
  "25639",
  "25643",
  "25657",
  "25667",
  "25673",
  "25679",
  "25693",
  "257",
  "25703",
  "25717",
  "25733",
  "25741",
  "25747",
  "25759",
  "25763",
  "25771",
  "2579",
  "25793",
  "25799",
  "25801",
  "25819",
  "25841",
  "25847",
  "25849",
  "25867",
  "25873",
  "25889",
  "259",
  "25903",
  "2591",
  "25913",
  "25919",
  "2593",
  "25931",
  "25933",
  "25939",
  "25943",
  "25951",
  "25969",
  "25981",
  "25997",
  "25999",
  "26",
  "260",
  "26003",
  "26017",
  "26021",
  "26029",
  "26041",
  "26053",
  "26083",
  "2609",
  "26099",
  "261",
  "26107",
  "26111",
  "26113",
  "26119",
  "26141",
  "26153",
  "26161",
  "2617",
  "26171",
  "26177",
  "26183",
  "26189",
  "26203",
  "26209",
  "2621",
  "26227",
  "26237",
  "26249",
  "26251",
  "26261",
  "26263",
  "26267",
  "26293",
  "26297",
  "263",
  "26309",
  "26317",
  "26321",
  "2633",
  "26339",
  "26347",
  "26357",
  "26371",
  "26387",
  "26393",
  "26399",
  "264",
  "26407",
  "26417",
  "26423",
  "26431",
  "26437",
  "26449",
  "26459",
  "2647",
  "26479",
  "26489",
  "26497",
  "265",
  "26501",
  "26513",
  "26539",
  "26557",
  "26561",
  "2657",
  "26573",
  "2659",
  "26591",
  "26597",
  "26627",
  "2663",
  "26633",
  "26641",
  "26647",
  "26669",
  "26681",
  "26683",
  "26687",
  "26693",
  "26699",
  "267",
  "26701",
  "2671",
  "26711",
  "26713",
  "26717",
  "26723",
  "26729",
  "26731",
  "26737",
  "26759",
  "2677",
  "26777",
  "26783",
  "26801",
  "26813",
  "26821",
  "2683",
  "26833",
  "26839",
  "26849",
  "26861",
  "26863",
  "2687",
  "26879",
  "26881",
  "2689",
  "26891",
  "26893",
  "269",
  "26903",
  "26921",
  "26927",
  "2693",
  "26947",
  "26951",
  "26953",
  "26959",
  "26981",
  "26987",
  "2699",
  "26993",
  "27",
  "27011",
  "27017",
  "27031",
  "27043",
  "27059",
  "27061",
  "27067",
  "2707",
  "27073",
  "27077",
  "27091",
  "271",
  "27103",
  "27107",
  "27109",
  "2711",
  "27127",
  "2713",
  "27143",
  "27179",
  "2719",
  "27191",
  "27197",
  "27211",
  "27239",
  "27241",
  "27253",
  "27259",
  "27271",
  "27277",
  "27281",
  "27283",
  "2729",
  "27299",
  "273",
  "2731",
  "27329",
  "27337",
  "27361",
  "27367",
  "27397",
  "27407",
  "27409",
  "2741",
  "27427",
  "27431",
  "27437",
  "27449",
  "27457",
  "27479",
  "27481",
  "27487",
  "2749",
  "275",
  "27509",
  "27527",
  "27529",
  "2753",
  "27539",
  "27541",
  "27551",
  "27581",
  "27583",
  "27611",
  "27617",
  "27631",
  "27647",
  "27653",
  "2767",
  "27673",
  "27689",
  "27691",
  "27697",
  "277",
  "27701",
  "27733",
  "27737",
  "27739",
  "27743",
  "27749",
  "27751",
  "27763",
  "27767",
  "2777",
  "27773",
  "27779",
  "27791",
  "27793",
  "27799",
  "27803",
  "27809",
  "27817",
  "27823",
  "27827",
  "27847",
  "27851",
  "27883",
  "2789",
  "27893",
  "279",
  "27901",
  "2791",
  "27917",
  "27919",
  "27941",
  "27943",
  "27947",
  "27953",
  "27961",
  "27967",
  "2797",
  "27983",
  "27997",
  "28",
  "28001",
  "2801",
  "28019",
  "28027",
  "2803",
  "28031",
  "28051",
  "28057",
  "28069",
  "28081",
  "28087",
  "28097",
  "28099",
  "281",
  "28109",
  "28111",
  "28123",
  "28151",
  "28163",
  "28181",
  "28183",
  "2819",
  "28201",
  "28211",
  "28219",
  "28229",
  "28277",
  "28279",
  "28283",
  "28289",
  "28297",
  "283",
  "28307",
  "28309",
  "28319",
  "2833",
  "28349",
  "28351",
  "2837",
  "28387",
  "28393",
  "28403",
  "28409",
  "28411",
  "28429",
  "2843",
  "28433",
  "28439",
  "28447",
  "28463",
  "28477",
  "28493",
  "28499",
  "285",
  "2851",
  "28513",
  "28517",
  "28537",
  "28541",
  "28547",
  "28549",
  "28559",
  "2857",
  "28571",
  "28573",
  "28579",
  "28591",
  "28597",
  "286",
  "28603",
  "28607",
  "2861",
  "28619",
  "28621",
  "28627",
  "28631",
  "28643",
  "28649",
  "28657",
  "28661",
  "28663",
  "28669",
  "28687",
  "28697",
  "287",
  "28703",
  "28711",
  "28723",
  "28729",
  "28751",
  "28753",
  "28759",
  "28771",
  "28789",
  "2879",
  "28793",
  "28807",
  "28813",
  "28817",
  "28837",
  "28843",
  "28859",
  "28867",
  "2887",
  "28871",
  "28879",
  "289",
  "28901",
  "28909",
  "28921",
  "28927",
  "28933",
  "28949",
  "28961",
  "2897",
  "28979",
  "29",
  "29/",
  "29009",
  "29017",
  "29021",
  "29023",
  "29027",
  "2903",
  "29033",
  "29059",
  "29063",
  "29077",
  "2909",
  "291",
  "29101",
  "29123",
  "29129",
  "29131",
  "29137",
  "29147",
  "29153",
  "29167",
  "2917",
  "29173",
  "29179",
  "29191",
  "29201",
  "29207",
  "29209",
  "29221",
  "29231",
  "29243",
  "29251",
  "29269",
  "2927",
  "29287",
  "29297",
  "293",
  "29303",
  "29311",
  "29327",
  "29333",
  "29339",
  "29347",
  "29363",
  "29383",
  "29387",
  "29389",
  "2939",
  "29399",
  "29401",
  "29411",
  "29423",
  "29429",
  "29437",
  "29443",
  "29453",
  "29473",
  "29483",
  "29501",
  "29527",
  "2953",
  "29531",
  "29537",
  "29567",
  "29569",
  "2957",
  "29573",
  "29581",
  "29587",
  "29599",
  "29611",
  "29629",
  "2963",
  "29633",
  "29641",
  "29663",
  "29669",
  "29671",
  "29683",
  "2969",
  "297",
  "2971",
  "29717",
  "29723",
  "29741",
  "29753",
  "29759",
  "29761",
  "29789",
  "29803",
  "29819",
  "29833",
  "29837",
  "29851",
  "29863",
  "29867",
  "29873",
  "29879",
  "29881",
  "299",
  "29917",
  "29921",
  "29927",
  "29947",
  "29959",
  "29983",
  "29989",
  "2999",
  "2;i",
  "2D",
  "2[0",
  "2[1",
  "2[i",
  "2[j",
  "2[n",
  "2[u",
  "2[z",
  "2\\n",
  "2\\n1",
  "2].size",
  "2][0",
  "2][1",
  "2][idx",
  "2^(number",
  "2^p",
  "2a.m",
  "2a.m.",
  "2d",
  "2d+1",
  "2e4",
  "2e5",
  "2e6",
  "2e9",
  "2nd",
  "2p.m",
  "2p.m.",
  "3",
  "3(0",
  "3(a",
  "3(g",
  "3(i",
  "3(j",
  "3(k",
  "3(v",
  "3*f/4",
  "3++",
  "3+j",
  "3,2",
  "3,k",
  "3.0",
  "3.6",
  "3.x",
  "3.y",
  "30",
  "30.0",
  "300",
  "3000",
  "3001",
  "30011",
  "30013",
  "30029",
  "30047",
  "30059",
  "30071",
  "30089",
  "30091",
  "30097",
  "300LL",
  "300ll",
  "301",
  "30103",
  "30109",
  "3011",
  "30113",
  "30119",
  "30133",
  "30137",
  "30139",
  "30161",
  "30169",
  "30181",
  "30187",
  "3019",
  "30197",
  "30203",
  "30211",
  "30223",
  "3023",
  "30241",
  "30253",
  "30259",
  "30269",
  "30271",
  "30293",
  "303",
  "30307",
  "30313",
  "30319",
  "30323",
  "30341",
  "30347",
  "30367",
  "3037",
  "30389",
  "30391",
  "30403",
  "3041",
  "30427",
  "30431",
  "30449",
  "30467",
  "30469",
  "3049",
  "30491",
  "30493",
  "30497",
  "30509",
  "30517",
  "30529",
  "30539",
  "30553",
  "30557",
  "30559",
  "30577",
  "30593",
  "3061",
  "30631",
  "30637",
  "30643",
  "30649",
  "30661",
  "3067",
  "30671",
  "30677",
  "30689",
  "30697",
  "307",
  "30703",
  "30707",
  "30713",
  "30727",
  "30757",
  "30763",
  "30773",
  "30781",
  "3079",
  "30803",
  "30809",
  "30817",
  "30829",
  "3083",
  "30839",
  "30841",
  "30851",
  "30853",
  "30859",
  "30869",
  "30871",
  "30881",
  "3089",
  "30893",
  "309",
  "30911",
  "30931",
  "30937",
  "30941",
  "30949",
  "30971",
  "30977",
  "30983",
  "31",
  "31/",
  "31013",
  "31019",
  "31033",
  "31039",
  "31051",
  "31063",
  "31069",
  "31079",
  "31081",
  "3109",
  "31091",
  "311",
  "31121",
  "31123",
  "31139",
  "31147",
  "31151",
  "31153",
  "31159",
  "31177",
  "31181",
  "31183",
  "31189",
  "3119",
  "31193",
  "3121",
  "31219",
  "31223",
  "31231",
  "31237",
  "31247",
  "31249",
  "31253",
  "31259",
  "31267",
  "31271",
  "31277",
  "313",
  "31307",
  "31319",
  "31321",
  "31327",
  "31333",
  "31337",
  "31357",
  "3137",
  "31379",
  "31387",
  "31391",
  "31393",
  "31397",
  "31469",
  "31477",
  "31481",
  "31489",
  "31511",
  "31513",
  "31517",
  "31531",
  "31541",
  "31543",
  "31547",
  "31567",
  "31573",
  "31583",
  "31601",
  "31607",
  "31623",
  "31627",
  "3163",
  "31643",
  "31649",
  "31657",
  "31663",
  "31667",
  "3167",
  "31687",
  "3169",
  "31699",
  "317",
  "31721",
  "31723",
  "31727",
  "31729",
  "31741",
  "31751",
  "31769",
  "31771",
  "31793",
  "31799",
  "3181",
  "31817",
  "31847",
  "31849",
  "31859",
  "3187",
  "31873",
  "31883",
  "31891",
  "319",
  "31907",
  "3191",
  "31957",
  "31963",
  "31973",
  "31981",
  "31991",
  "32",
  "32/",
  "32003",
  "32005",
  "3203",
  "3209",
  "321",
  "3217",
  "3221",
  "3229",
  "323",
  "3251",
  "3253",
  "3257",
  "3259",
  "326",
  "327",
  "3271",
  "329",
  "3299",
  "33",
  "33/",
  "3301",
  "3307",
  "331",
  "3313",
  "3319",
  "3323",
  "3329",
  "333",
  "3331",
  "3343",
  "3347",
  "3359",
  "3361",
  "337",
  "3371",
  "3373",
  "3389",
  "339",
  "3391",
  "34/",
  "3407",
  "341",
  "3413",
  "343",
  "3433",
  "3449",
  "3457",
  "3461",
  "3463",
  "3467",
  "3469",
  "347",
  "349",
  "3491",
  "3499",
  "35",
  "351",
  "3511",
  "3517",
  "3527",
  "3529",
  "353",
  "3533",
  "3539",
  "3541",
  "3547",
  "3557",
  "3559",
  "357",
  "3571",
  "3581",
  "3583",
  "359",
  "3593",
  "36",
  "36/",
  "360",
  "3600",
  "3607",
  "361",
  "3613",
  "3617",
  "3623",
  "363",
  "3631",
  "3637",
  "3643",
  "365",
  "3659",
  "366",
  "367",
  "3671",
  "3673",
  "3677",
  "368",
  "369",
  "3691",
  "3697",
  "37",
  "37/",
  "370",
  "3701",
  "3709",
  "371",
  "3719",
  "372",
  "3727",
  "373",
  "3733",
  "3739",
  "374",
  "375",
  "376",
  "3761",
  "3767",
  "3769",
  "377",
  "3779",
  "378",
  "379",
  "3793",
  "3797",
  "380",
  "3803",
  "381",
  "3821",
  "3823",
  "383",
  "3833",
  "3847",
  "3851",
  "3853",
  "3863",
  "387",
  "3877",
  "3881",
  "3889",
  "389",
  "39",
  "3907",
  "391",
  "3911",
  "3917",
  "3919",
  "3923",
  "3929",
  "393",
  "3931",
  "3943",
  "3947",
  "3967",
  "397",
  "3989",
  "399",
  "3<<\"\\n",
  "3?0",
  "3[i",
  "3\\n",
  "3a.m",
  "3a.m.",
  "3d\",f[i][j",
  "3e5",
  "3p.m",
  "3p.m.",
  "3th",
  "3x3",
  "4",
  "4(0",
  "4(a",
  "4(i",
  "4(k",
  "4(n",
  "4(v",
  "4*k",
  "4.0",
  "40",
  "40/",
  "400",
  "4001",
  "4003",
  "4007",
  "401",
  "4013",
  "4019",
  "4021",
  "4027",
  "403",
  "404",
  "4049",
  "4051",
  "4057",
  "407",
  "4073",
  "4079",
  "409",
  "4091",
  "4093",
  "4099",
  "41",
  "41/",
  "411",
  "4111",
  "4127",
  "4129",
  "413",
  "4133",
  "4139",
  "4153",
  "4157",
  "4159",
  "416",
  "417",
  "4177",
  "419",
  "42",
  "42/",
  "4201",
  "421",
  "4211",
  "4217",
  "4219",
  "4229",
  "423",
  "4231",
  "4241",
  "4243",
  "4253",
  "4259",
  "4261",
  "427",
  "4271",
  "4273",
  "428",
  "4283",
  "4289",
  "429",
  "4294967296LL",
  "4294967296ll",
  "4297",
  "43",
  "43/",
  "431",
  "4327",
  "433",
  "4337",
  "4339",
  "434",
  "4349",
  "435",
  "4357",
  "436",
  "4363",
  "437",
  "4373",
  "438",
  "439",
  "4391",
  "4397",
  "44",
  "44/",
  "440",
  "4409",
  "441",
  "442",
  "4421",
  "4423",
  "443",
  "444",
  "4441",
  "4447",
  "4451",
  "4457",
  "4463",
  "447",
  "4481",
  "4483",
  "449",
  "4493",
  "45",
  "45/",
  "450",
  "4507",
  "451",
  "4513",
  "4517",
  "4519",
  "4523",
  "453",
  "4547",
  "4549",
  "4561",
  "4567",
  "457",
  "4583",
  "459",
  "4591",
  "4597",
  "46/",
  "460",
  "4603",
  "461",
  "4621",
  "463",
  "4637",
  "4639",
  "4643",
  "4649",
  "4651",
  "4657",
  "4663",
  "467",
  "4673",
  "4679",
  "469",
  "4691",
  "47",
  "47/",
  "4703",
  "471",
  "4721",
  "4723",
  "4729",
  "473",
  "4733",
  "4751",
  "4759",
  "477",
  "4783",
  "4787",
  "4789",
  "479",
  "4793",
  "4799",
  "48",
  "4801",
  "481",
  "4813",
  "4817",
  "483",
  "4831",
  "486",
  "4861",
  "487",
  "4871",
  "4877",
  "4889",
  "489",
  "49/",
  "4903",
  "4909",
  "491",
  "4919",
  "493",
  "4931",
  "4933",
  "4937",
  "4943",
  "4951",
  "4957",
  "4967",
  "4969",
  "497",
  "4973",
  "4987",
  "499",
  "4993",
  "4999",
  "4\\n",
  "4a.m",
  "4a.m.",
  "4e4",
  "4p.m",
  "4p.m.",
  "5",
  "5(k",
  "5,8",
  "50",
  "500",
  "5000",
  "500000",
  "5001",
  "5003",
  "5009",
  "501",
  "5011",
  "5021",
  "5023",
  "503",
  "5039",
  "5051",
  "5059",
  "507",
  "5077",
  "5081",
  "5087",
  "509",
  "5099",
  "51",
  "5101",
  "5107",
  "511",
  "5113",
  "5119",
  "512",
  "513",
  "5147",
  "5153",
  "5167",
  "517",
  "5171",
  "5179",
  "5189",
  "519",
  "5197",
  "52",
  "52/",
  "5209",
  "521",
  "5227",
  "523",
  "5231",
  "5233",
  "5237",
  "5261",
  "527",
  "5273",
  "5279",
  "5281",
  "529",
  "5297",
  "53",
  "53/",
  "5303",
  "5309",
  "531",
  "5323",
  "533",
  "5333",
  "5347",
  "5351",
  "537",
  "5381",
  "5387",
  "539",
  "5393",
  "5399",
  "54/",
  "5407",
  "541",
  "5413",
  "5417",
  "5419",
  "543",
  "5431",
  "5437",
  "5441",
  "5443",
  "5449",
  "547",
  "5471",
  "5477",
  "5479",
  "5483",
  "549",
  "55",
  "55/",
  "5501",
  "5503",
  "5507",
  "551",
  "5519",
  "5521",
  "5527",
  "553",
  "5531",
  "5557",
  "5563",
  "5569",
  "557",
  "5573",
  "5581",
  "559",
  "5591",
  "56",
  "560",
  "561",
  "5623",
  "563",
  "5639",
  "5641",
  "5647",
  "5651",
  "5653",
  "5657",
  "5659",
  "5669",
  "567",
  "5683",
  "5689",
  "569",
  "5693",
  "57",
  "5701",
  "571",
  "5711",
  "5717",
  "573",
  "5737",
  "5741",
  "5743",
  "5749",
  "577",
  "5779",
  "5783",
  "579",
  "5791",
  "58/",
  "5801",
  "5807",
  "581",
  "5813",
  "5821",
  "5827",
  "583",
  "5839",
  "5843",
  "5849",
  "5851",
  "5857",
  "5861",
  "5867",
  "5869",
  "587",
  "5879",
  "5881",
  "589",
  "5897",
  "59",
  "59/",
  "5903",
  "591",
  "5923",
  "5927",
  "593",
  "5939",
  "5953",
  "597",
  "5981",
  "5987",
  "599",
  "5\\n",
  "5a.m",
  "5a.m.",
  "5p.m",
  "5p.m.",
  "6",
  "6(k",
  "6.0",
  "60",
  "60+b*60+c",
  "60.0",
  "60/",
  "600",
  "6007",
  "601",
  "6011",
  "6029",
  "603",
  "6037",
  "6043",
  "6047",
  "6053",
  "6067",
  "607",
  "6073",
  "6079",
  "6089",
  "609",
  "6091",
  "61",
  "61/",
  "6101",
  "611",
  "6113",
  "6121",
  "613",
  "6131",
  "6133",
  "6143",
  "6151",
  "6163",
  "617",
  "6173",
  "618",
  "619",
  "6197",
  "6199",
  "62",
  "62/",
  "620",
  "6203",
  "621",
  "6211",
  "6217",
  "6221",
  "6229",
  "623",
  "6247",
  "625",
  "6257",
  "6263",
  "6269",
  "627",
  "6271",
  "6277",
  "628",
  "6287",
  "629",
  "6299",
  "63",
  "63/",
  "630",
  "6301",
  "631",
  "6311",
  "6317",
  "632",
  "6323",
  "6329",
  "633",
  "6337",
  "634",
  "6343",
  "6353",
  "6359",
  "6361",
  "6367",
  "637",
  "6373",
  "6379",
  "638",
  "6389",
  "639",
  "6397",
  "64",
  "64/",
  "641",
  "642",
  "6421",
  "6427",
  "643",
  "6449",
  "645",
  "6451",
  "646",
  "6469",
  "647",
  "6473",
  "6481",
  "649",
  "6491",
  "65",
  "650",
  "651",
  "6521",
  "6529",
  "653",
  "6547",
  "6551",
  "6553",
  "6563",
  "6569",
  "657",
  "6571",
  "6577",
  "6581",
  "659",
  "6599",
  "66/",
  "6607",
  "661",
  "6619",
  "663",
  "6637",
  "6653",
  "6659",
  "666",
  "6661",
  "667",
  "6673",
  "6679",
  "6689",
  "669",
  "6691",
  "67",
  "670",
  "6701",
  "6703",
  "6709",
  "671",
  "6719",
  "672",
  "673",
  "6733",
  "6737",
  "675",
  "676",
  "6761",
  "6763",
  "677",
  "6779",
  "678",
  "6781",
  "679",
  "6791",
  "6793",
  "68",
  "68/",
  "680",
  "6803",
  "681",
  "682",
  "6823",
  "6827",
  "6829",
  "683",
  "6833",
  "684",
  "6841",
  "6857",
  "686",
  "6863",
  "6869",
  "687",
  "6871",
  "688",
  "6883",
  "689",
  "6899",
  "69",
  "69/",
  "690",
  "6907",
  "691",
  "6911",
  "6917",
  "692",
  "693",
  "6947",
  "6949",
  "6959",
  "696",
  "6961",
  "6967",
  "697",
  "6971",
  "6977",
  "6983",
  "699",
  "6991",
  "6997",
  "6LL",
  "6\\n",
  "6a.m",
  "6a.m.",
  "6f/",
  "6ll",
  "6p.m",
  "6p.m.",
  "6th",
  "6x6",
  "7",
  "7(k",
  "70",
  "70/",
  "700",
  "7001",
  "701",
  "7013",
  "7019",
  "7027",
  "703",
  "7039",
  "7043",
  "7057",
  "706",
  "7069",
  "707",
  "7079",
  "709",
  "71",
  "71/",
  "7103",
  "7109",
  "711",
  "7121",
  "7127",
  "7129",
  "713",
  "715",
  "7151",
  "7159",
  "716",
  "717",
  "7177",
  "7187",
  "719",
  "7193",
  "72",
  "72/",
  "720",
  "7207",
  "721",
  "7211",
  "7213",
  "7219",
  "722",
  "7229",
  "723",
  "7237",
  "7243",
  "7247",
  "7253",
  "727",
  "7283",
  "729",
  "7297",
  "73",
  "73/",
  "7307",
  "7309",
  "731",
  "7321",
  "733",
  "7331",
  "7333",
  "7349",
  "735",
  "7351",
  "736",
  "7369",
  "737",
  "739",
  "7393",
  "74/",
  "741",
  "7411",
  "7417",
  "743",
  "7433",
  "744",
  "7451",
  "7457",
  "7459",
  "746",
  "747",
  "7477",
  "7481",
  "7487",
  "7489",
  "749",
  "7499",
  "75",
  "75/",
  "750",
  "7507",
  "751",
  "7517",
  "7523",
  "7529",
  "753",
  "7537",
  "7541",
  "7547",
  "7549",
  "7559",
  "756",
  "7561",
  "757",
  "7573",
  "7577",
  "7583",
  "7589",
  "759",
  "7591",
  "76/",
  "7603",
  "7607",
  "761",
  "7621",
  "763",
  "7639",
  "7643",
  "7649",
  "7669",
  "767",
  "7673",
  "7681",
  "7687",
  "769",
  "7691",
  "7699",
  "77",
  "77/",
  "7703",
  "771",
  "7717",
  "7723",
  "7727",
  "773",
  "7741",
  "7753",
  "7757",
  "7759",
  "777",
  "7789",
  "779",
  "7793",
  "78/",
  "781",
  "7817",
  "7823",
  "7829",
  "783",
  "7841",
  "7853",
  "7867",
  "787",
  "7873",
  "7877",
  "7879",
  "7883",
  "789",
  "79",
  "79/",
  "7901",
  "7907",
  "791",
  "7919",
  "7927",
  "793",
  "7933",
  "7937",
  "7949",
  "7951",
  "7963",
  "797",
  "799",
  "7993",
  "7a.m",
  "7a.m.",
  "7p.m",
  "7p.m.",
  "8",
  "8(k",
  "8)",
  "8-",
  "8-)",
  "8-D",
  "8-d",
  "80",
  "8000",
  "8009",
  "801",
  "8011",
  "8017",
  "803",
  "8039",
  "8053",
  "8059",
  "8069",
  "807",
  "8081",
  "8087",
  "8089",
  "809",
  "8093",
  "81",
  "81/",
  "8101",
  "811",
  "8111",
  "8117",
  "8123",
  "813",
  "8147",
  "8161",
  "8167",
  "817",
  "8171",
  "8179",
  "819",
  "8191",
  "81s",
  "82/",
  "8209",
  "821",
  "8219",
  "8221",
  "823",
  "8231",
  "8233",
  "8237",
  "8243",
  "8263",
  "8269",
  "827",
  "8273",
  "8287",
  "829",
  "8291",
  "8293",
  "8297",
  "83",
  "83/",
  "831",
  "8311",
  "8317",
  "8329",
  "833",
  "8353",
  "8363",
  "8369",
  "837",
  "8377",
  "8387",
  "8389",
  "839",
  "84",
  "84/",
  "841",
  "8419",
  "8423",
  "8429",
  "843",
  "8431",
  "8443",
  "8447",
  "8461",
  "8467",
  "847",
  "849",
  "85",
  "85/",
  "850",
  "8501",
  "851",
  "8513",
  "8521",
  "8527",
  "853",
  "8537",
  "8539",
  "8543",
  "8563",
  "857",
  "8573",
  "8581",
  "859",
  "8597",
  "8599",
  "86/",
  "8609",
  "861",
  "8623",
  "8627",
  "8629",
  "863",
  "8641",
  "8647",
  "8663",
  "8669",
  "867",
  "8677",
  "8681",
  "8689",
  "869",
  "8693",
  "8699",
  "87/",
  "8707",
  "871",
  "8713",
  "8719",
  "873",
  "8731",
  "8737",
  "8741",
  "8747",
  "8753",
  "8761",
  "877",
  "8779",
  "8783",
  "879",
  "88",
  "88/",
  "8803",
  "8807",
  "881",
  "8819",
  "8821",
  "883",
  "8831",
  "8837",
  "8839",
  "8849",
  "8861",
  "8863",
  "8867",
  "887",
  "8887",
  "889",
  "8893",
  "89",
  "890",
  "891",
  "8923",
  "8929",
  "893",
  "8933",
  "8941",
  "8951",
  "8963",
  "8969",
  "897",
  "8971",
  "899",
  "8999",
  "8D",
  "8LL",
  "8a.m",
  "8a.m.",
  "8b/",
  "8d",
  "8ll",
  "8p.m",
  "8p.m.",
  "8x8",
  "9",
  "9.81",
  "90",
  "90/",
  "9000",
  "90000LL",
  "90000ll",
  "9001",
  "9007",
  "901",
  "9011",
  "9013",
  "9029",
  "903",
  "9041",
  "9043",
  "9049",
  "9059",
  "9067",
  "907",
  "909",
  "9091",
  "91",
  "91/",
  "9103",
  "9109",
  "911",
  "911382323",
  "9127",
  "913",
  "9133",
  "9137",
  "9151",
  "9157",
  "9161",
  "917",
  "9173",
  "9181",
  "9187",
  "919",
  "9199",
  "92/",
  "9203",
  "9209",
  "921",
  "9221",
  "9227",
  "923",
  "9239",
  "9241",
  "9257",
  "927",
  "9277",
  "9281",
  "9283",
  "929",
  "9293",
  "93/",
  "931",
  "9311",
  "9319",
  "9323",
  "933",
  "9337",
  "9341",
  "9343",
  "9349",
  "937",
  "9371",
  "9377",
  "939",
  "9391",
  "9397",
  "93c",
  "94/",
  "9403",
  "941",
  "9413",
  "9419",
  "9421",
  "943",
  "9431",
  "9433",
  "9437",
  "9439",
  "9461",
  "9463",
  "9467",
  "947",
  "9473",
  "9479",
  "949",
  "9491",
  "9497",
  "95",
  "95/",
  "951",
  "9511",
  "9521",
  "953",
  "9533",
  "9539",
  "9547",
  "9551",
  "957",
  "9587",
  "959",
  "96",
  "96/",
  "9601",
  "961",
  "9613",
  "9619",
  "9623",
  "9629",
  "963",
  "9631",
  "9643",
  "9649",
  "9661",
  "967",
  "9677",
  "9679",
  "9689",
  "969",
  "9697",
  "97",
  "97/",
  "971",
  "9719",
  "9721",
  "972663749",
  "973",
  "9733",
  "9739",
  "9743",
  "9749",
  "9767",
  "9769",
  "977",
  "9781",
  "9787",
  "979",
  "9791",
  "98/",
  "9803",
  "981",
  "9811",
  "9817",
  "9829",
  "983",
  "9833",
  "9839",
  "9851",
  "9857",
  "9859",
  "987",
  "9871",
  "9883",
  "9887",
  "989",
  "99",
  "99/",
  "9901",
  "9907",
  "991",
  "9923",
  "9929",
  "993",
  "9931",
  "9941",
  "9949",
  "9967",
  "997",
  "9973",
  "998",
  "998244353",
  "999",
  "99999",
  "9a.m",
  "9a.m.",
  "9p.m",
  "9p.m.",
  ":",
  ":%d",
  ":'(",
  ":')",
  ":'-(",
  ":'-)",
  ":(",
  ":((",
  ":(((",
  ":()",
  ":)",
  ":))",
  ":)))",
  ":*",
  ":-(",
  ":-((",
  ":-(((",
  ":-)",
  ":-))",
  ":-)))",
  ":-*",
  ":-/",
  ":-0",
  ":-3",
  ":->",
  ":-D",
  ":-O",
  ":-P",
  ":-X",
  ":-]",
  ":-d",
  ":-o",
  ":-p",
  ":-x",
  ":-|",
  ":-}",
  ":/",
  ":0",
  ":1",
  ":3",
  ":>",
  ":D",
  ":O",
  ":P",
  ":X",
  ":\\n",
  ":]",
  ":d",
  ":o",
  ":o)",
  ":p",
  ":x",
  ":x)",
  ":|",
  ":}",
  ":\u2019(",
  ":\u2019)",
  ":\u2019-(",
  ":\u2019-)",
  ";",
  ";)",
  ";-)",
  ";-D",
  ";-X",
  ";-d",
  ";D",
  ";X",
  ";_;",
  ";d",
  "<",
  "<\"+",
  "<\"0",
  "<\"1",
  "<\"|",
  "<(Q",
  "<(q",
  "<.<",
  "</3",
  "</d",
  "<20",
  "<3",
  "<33",
  "<333",
  "<<N",
  "<<a",
  "<<b",
  "<<c",
  "<<g",
  "<<i",
  "<<k",
  "<<l",
  "<<m",
  "<<n",
  "<<s",
  "<<t",
  "<<u",
  "<<w",
  "<=1",
  "<=d",
  "<=k",
  "<d",
  "<dd",
  "<ddd",
  "<space>",
  "<xxxx>",
  "=",
  "=\"C",
  "=\"L",
  "=\"R",
  "=\"c",
  "=\"l",
  "=\"r",
  "='1",
  "='@",
  "='E",
  "='F",
  "='L",
  "='M",
  "='N",
  "='R",
  "='W",
  "='X",
  "='e",
  "='f",
  "='l",
  "='m",
  "='n",
  "='r",
  "='w",
  "='x",
  "=(",
  "=(r",
  "=)",
  "=-1",
  "=/",
  "=10",
  "=15",
  "=16",
  "=24",
  "=3",
  "=50",
  "=80",
  "=='",
  "==0",
  "==1",
  "==2",
  "==3",
  "==9",
  "==W",
  "==X",
  "==Y",
  "==b",
  "==j",
  "==k",
  "==n",
  "==v",
  "==w",
  "==x",
  "==y",
  "==z",
  "=D",
  "=X",
  "=[",
  "=]",
  "=d",
  "=n2",
  "=pb",
  "=xb",
  "=yb",
  "={u",
  "={x",
  "={y",
  "=|",
  ">",
  ">(0",
  ">(1",
  ">(2",
  ">(3",
  ">(4",
  ">(a",
  ">(b",
  ">(i",
  ">(j",
  ">(k",
  ">(m",
  ">(n",
  ">(p",
  ">(t",
  ">(x",
  ">(y",
  ">.<",
  ">.>",
  ">:(",
  ">:o",
  ">:x",
  "><(((*>",
  ">=0",
  ">=m",
  ">=n",
  ">>K",
  ">>T",
  ">>Y",
  ">>a",
  ">>b",
  ">>c",
  ">>d",
  ">>k",
  ">>l",
  ">>m",
  ">>n",
  ">>o",
  ">>p",
  ">>q",
  ">>r",
  ">>s",
  ">>t",
  ">>u",
  ">>v",
  ">>w",
  ">>x",
  ">>y",
  ">id",
  ">s2",
  ">t=",
  ">tl",
  ">to",
  ">vi",
  ">y2",
  ">{0",
  ">{1",
  "?",
  "@",
  "@_@",
  "A",
  "A']++",
  "A(length",
  "A(m",
  "A(n",
  "A++",
  "A--",
  "A.back",
  "A.end",
  "A.push_back(length",
  "A.rend",
  "A=911382323,B=972663749,N=1000000",
  "ABEL\\n",
  "ADD",
  "AI",
  "AIN",
  "AKE",
  "AME",
  "AND",
  "APH",
  "ARM",
  "ASCII",
  "ATE",
  "AXN",
  "A[0",
  "A[A_index",
  "A[i",
  "A[s",
  "A\\n",
  "A_index",
  "A_index++",
  "Abandoned",
  "Accept",
  "Accumulate",
  "Ace",
  "Add",
  "Adding",
  "Adds",
  "AdjList",
  "Adjacency",
  "Adjust",
  "Adjusting",
  "Adm",
  "Adm.",
  "Ai",
  "Ak",
  "Ak.",
  "Ala",
  "Ala.",
  "Alabama",
  "Alaska",
  "Alias",
  "Alien",
  "All",
  "Allocate",
  "Already",
  "Also",
  "Alternate",
  "An",
  "Animal",
  "Ans",
  "Apples",
  "Apply",
  "Approximate",
  "Apr",
  "Apr.",
  "April",
  "Arbitrage",
  "Arbitrage\\n",
  "Are",
  "Area",
  "Ariz",
  "Ariz.",
  "Arizona",
  "Ark",
  "Ark.",
  "Arkansas",
  "Array",
  "Arrays",
  "Artwork",
  "As",
  "Assert",
  "Assign",
  "Assume",
  "Assuming",
  "Aug",
  "Aug.",
  "August",
  "AvailableMoves(available",
  "AvailableMoves(vector",
  "Avoid",
  "B",
  "B(length",
  "B(m",
  "B(n",
  "B++",
  "B--",
  "B.back",
  "B.end",
  "B.push_back(length",
  "B.rend",
  "B.size",
  "BASEMENT!\\n",
  "BFS",
  "BICOLORABLE.\\n",
  "BLE",
  "BMT",
  "BRAIN",
  "BW\"[f]<<\"\\n",
  "B[0",
  "B[B_index",
  "B[i",
  "B[s",
  "B_index",
  "B_index++",
  "Backspace",
  "Backtrack",
  "Base",
  "Battle",
  "Biconnected",
  "Binary",
  "Binomial",
  "Bipartite",
  "Bitwise",
  "Black",
  "Blue",
  "Book",
  "Boolean",
  "Both",
  "Bottom",
  "Breadth",
  "Break",
  "Bros",
  "Bros.",
  "Build",
  "Building",
  "Bulgaria",
  "Buzz\\n",
  "C",
  "C'm",
  "C(b",
  "C(length",
  "C(n",
  "C++",
  "C++11",
  "C.",
  "C.back",
  "C.front",
  "CAIN\\n",
  "CCs",
  "CENAS",
  "CHAMPAGNE",
  "CHECK_VALUE",
  "CHF",
  "CHR",
  "CII",
  "CKS",
  "CLK",
  "CNT",
  "COMIDAS",
  "CON",
  "COPAS",
  "CRATE",
  "CSES",
  "C[*K",
  "C[i",
  "C[i].end",
  "C[i][j",
  "C[k][l",
  "Ca",
  "Cache",
  "Calculate",
  "Calculating",
  "Calif",
  "Calif.",
  "California",
  "Call",
  "Can",
  "Cap",
  "Cap>::max",
  "Capacity",
  "Capacity>::max",
  "Carbohydrate",
  "Case",
  "Category",
  "Cause",
  "Chain",
  "Change",
  "Character",
  "Chaz",
  "Chebyshev",
  "Check",
  "Checking",
  "Checks",
  "Chefirnemo\\n",
  "Chessboard",
  "Chocolate",
  "Circular",
  "City",
  "Clear",
  "Closest",
  "Co",
  "Co.",
  "Codeforces",
  "Coefficients",
  "Coin",
  "Col",
  "Collatz",
  "Colo",
  "Colo.",
  "Color",
  "Colorado",
  "Combination",
  "Combine",
  "Compare",
  "CompareLists(Node",
  "CompareLists(headA->next",
  "Comparison",
  "Compass",
  "Component",
  "Compression",
  "Compute",
  "Computes",
  "Condition",
  "Conn",
  "Conn.",
  "Connect",
  "Connecticut",
  "Constant",
  "Constants",
  "Construct",
  "Construction",
  "Consume",
  "Container",
  "Continue",
  "Continuously",
  "Convert",
  "Converting",
  "Converts",
  "Copy",
  "Corp",
  "Corp.",
  "Cos",
  "Cost",
  "Cost>::infinity",
  "Cost>::max",
  "Could",
  "Count",
  "Counter",
  "Counting",
  "Counts",
  "Course",
  "Coz",
  "Cream",
  "Create",
  "Creating",
  "Cuba",
  "CupInfo",
  "Current",
  "CutEdge",
  "Cuz",
  "C\u2019m",
  "D",
  "D(p",
  "D(r",
  "D-1",
  "D.",
  "D.C.",
  "D1",
  "D2",
  "D3",
  "D=",
  "DAG",
  "DAS",
  "DEC",
  "DECREASING\\n",
  "DES",
  "DESAYUNOS",
  "DFS",
  "DFS2",
  "DI",
  "DIABOLICO\\n",
  "DNA",
  "DP",
  "DRUL",
  "DSU",
  "D[6",
  "D[i",
  "D\\n",
  "Dare",
  "Data",
  "Dec",
  "Dec.",
  "December",
  "Decks",
  "Declaration",
  "Declare",
  "Deconstruct",
  "Decrease",
  "Decrement",
  "Define",
  "Defining",
  "Degree",
  "Del",
  "Del.",
  "Delaware",
  "Delete(Node",
  "Deletion",
  "Depending",
  "Depth",
  "Dequeue",
  "Desconocido",
  "Determine",
  "Did",
  "Difference",
  "Dijkstra",
  "Dimensions",
  "Directions",
  "Disable",
  "Discard",
  "Dist",
  "Dist(int",
  "Distance",
  "Distances(dists",
  "Distances(vector",
  "Divide",
  "Dk",
  "Do",
  "Does",
  "Doin",
  "Doin'",
  "Doin\u2019",
  "Down",
  "Dr",
  "Dr.",
  "Draw\\n",
  "Dream",
  "Dream\\n",
  "Dual",
  "Duplicate",
  "Dynamic",
  "E",
  "E.G.",
  "E.g",
  "E.g.",
  "ECoins",
  "EDI",
  "EEUU",
  "EMPATE",
  "END",
  "END\\n",
  "EOF",
  "ERROR\\n",
  "ESCRITO\\n",
  "ESOTERICO\\n",
  "EUU",
  "EVERYONE!\\n",
  "EX/",
  "EXPECTED[6",
  "EXPECTED[i",
  "E\\n",
  "East",
  "Edge",
  "Edges",
  "Edge{edge._from",
  "Element",
  "Else",
  "Emma\\n",
  "Empty",
  "Enable",
  "End",
  "England",
  "Enmity",
  "Enqueue",
  "Ensure",
  "Ensuring",
  "Enter",
  "Erase",
  "Eratosthenes",
  "Error\\n",
  "Even",
  "Everything",
  "Exclude",
  "Exit",
  "Exiting",
  "Expand(expanded",
  "Extract",
  "F",
  "F.",
  "FAIL\\n",
  "FIN",
  "FLE",
  "FROM",
  "FS2",
  "F[0][0",
  "F[0][1",
  "F[1][0",
  "F[1][1",
  "F[2][2",
  "F[N",
  "F[a",
  "F[b",
  "Factorials",
  "Factorization",
  "Fast",
  "Faster",
  "Fat",
  "Feb",
  "Feb.",
  "February",
  "Fiber",
  "Fill",
  "Finally",
  "Find",
  "FindMergeNode(Node",
  "First",
  "FizzBuzz",
  "FizzBuzz\\n",
  "Fizz\\n",
  "Fla",
  "Fla.",
  "Flag",
  "Florida",
  "Flow",
  "Floyd",
  "Flush",
  "For",
  "Ford",
  "Forest",
  "Forward",
  "Found",
  "Found\\n",
  "Frequency",
  "Friday",
  "Fridays",
  "Friendship",
  "Fulkerson",
  "Function",
  "G",
  "GCD",
  "GET",
  "GNE",
  "GP/",
  "GRESKA\\n",
  "G[cur_node",
  "G\\n",
  "Ga",
  "Ga.",
  "Gen",
  "Gen.",
  "Generate",
  "Georgia",
  "Get",
  "GetNode(Node",
  "GetNode(head->next",
  "GetShorty",
  "GetValueFromTailPosition(Node",
  "GetValueFromTailPosition(head->next",
  "Global",
  "Godzilla\\n",
  "Goin",
  "Goin'",
  "Goin\u2019",
  "Gon",
  "Got",
  "Gov",
  "Gov.",
  "Graph",
  "Grass",
  "Green",
  "Grid",
  "Guess",
  "Gunnar\\n",
  "H",
  "HH",
  "HIGH_VALUE",
  "HIS",
  "HUMAN",
  "Had",
  "Halloween.\\n",
  "Handle",
  "Handling",
  "Has",
  "Hash",
  "Have",
  "Havin",
  "Havin'",
  "Havin\u2019",
  "He",
  "He's",
  "Header",
  "Hello",
  "Helper",
  "Herman",
  "He\u2019s",
  "Holds",
  "Hours",
  "House",
  "How",
  "How's",
  "How\u2019s",
  "I",
  "I++",
  "I.E.",
  "I.e",
  "I.e.",
  "IAS",
  "IBR",
  "IDs",
  "IIT",
  "IM",
  "IME",
  "IMPOSIBLE\\n",
  "IMPOSSIBLE",
  "IMPOSSIBLE\\n",
  "IN",
  "INCREASING\\n",
  "INF",
  "INF=1000000000",
  "INFINITY",
  "INS",
  "INT32_MIN",
  "INT_MAX",
  "INT_MIN",
  "INVALID\\n",
  "ION",
  "IRL",
  "ITY",
  "I\\n",
  "Ia",
  "Ia.",
  "Id",
  "Id.",
  "Idaho",
  "Identifier",
  "Idx",
  "If",
  "Ignore",
  "Igual\\n",
  "Ill",
  "Ill.",
  "Illinois",
  "Image",
  "Impossible\\n",
  "Improving",
  "In",
  "Inc",
  "Inc.",
  "Include",
  "Including",
  "Increase",
  "Increment",
  "Ind",
  "Ind.",
  "Index",
  "IndexMatrix",
  "IndexToIndexMap",
  "Indexed",
  "IndexedSet",
  "India",
  "Indiana",
  "Indicate",
  "Infinite",
  "Infinity",
  "Inglaterra",
  "Initial",
  "Initialization",
  "Initialize",
  "Initializes",
  "Initializing",
  "Initially",
  "Input",
  "Insert",
  "Insert(Node",
  "InsertAtHead(Node",
  "InsertNth(Node",
  "Int",
  "Int64",
  "Int64)(i",
  "IntSet",
  "IntVector",
  "Integer",
  "IntegerMatrix",
  "IntegerVector",
  "IntegerVector(size[1",
  "Internal",
  "Invalid",
  "Inverse",
  "Iowa",
  "Ireland",
  "Irlanda",
  "Is",
  "It",
  "It's",
  "Item",
  "Iterate",
  "Iterating",
  "It\u2019s",
  "J",
  "J++",
  "JUSTO\\n",
  "Jan",
  "Jan.",
  "January",
  "Jolly",
  "Jr",
  "Jr.",
  "Judge",
  "Jul",
  "Jul.",
  "July",
  "Jun",
  "Jun.",
  "June",
  "Just",
  "K",
  "K++",
  "K--",
  "K.",
  "K;T++",
  "KES",
  "KNN",
  "Kan",
  "Kan.",
  "Kans",
  "Kans.",
  "Kansas",
  "Kattis",
  "Keep",
  "Keeping",
  "Kentucky",
  "King",
  "Ky",
  "Ky.",
  "L",
  "L)+llabs(M",
  "LAB",
  "LCA",
  "LES",
  "LLONG_MAX",
  "LLONG_MIN",
  "LOG_MAXN",
  "LONG",
  "LOR",
  "LOST",
  "LUE",
  "L\\n",
  "La",
  "La.",
  "Last",
  "Left",
  "Let",
  "Let's",
  "Let\u2019s",
  "Lilac",
  "Link",
  "List",
  "Long",
  "Loop",
  "Loowater",
  "Louisiana",
  "Lovin",
  "Lovin'",
  "Lovin\u2019",
  "Low",
  "Lower",
  "Ltd",
  "Ltd.",
  "M",
  "M)%M)%M",
  "M)+llabs(L",
  "M1",
  "M1[node].push_back(a",
  "M1[parent][parentIndex",
  "M2",
  "M2[node].push_back(b",
  "M2[parent][parentIndex",
  "M<<\"\\n",
  "M<<endl",
  "M=0",
  "M=0,g=0,c=1,k",
  "M=0,k",
  "M=1000000007",
  "M=9",
  "MAP",
  "MAP[pos",
  "MAT",
  "MAX",
  "MAXN",
  "MAX_COIN",
  "MAX_COINS",
  "MAX_K",
  "MAX_LIMIT",
  "MAX_N",
  "MAX_NODES",
  "MAX_PRIME",
  "MAX_SUM",
  "MAX_VALUE",
  "MERIENDAS",
  "MIN",
  "MIT",
  "MM",
  "MOD",
  "MOD-1",
  "MODULO",
  "MSV",
  "M[0][0",
  "M[0][1",
  "M[1][0",
  "M[1][1",
  "M[2][2",
  "M_PI",
  "Ma'am",
  "Macronutrient",
  "Main",
  "Maintain",
  "Make",
  "Map",
  "Mapping",
  "Mar",
  "Mar.",
  "March",
  "Mark",
  "Marks",
  "Mass",
  "Mass.",
  "Massachusetts",
  "Matrix",
  "Max",
  "MaxCostFlowGraph",
  "MaxCostFlowGraph(int",
  "Max_ending",
  "Max_right",
  "Maximum",
  "May",
  "Mayor\\n",
  "Ma\u2019am",
  "Md",
  "Md.",
  "MechaGodzilla\\n",
  "Memoization",
  "Menor\\n",
  "Merge",
  "MergeLists(Node",
  "MergeLists(headA",
  "MergeLists(headA->next",
  "Messrs",
  "Messrs.",
  "Mich",
  "Mich.",
  "Michigan",
  "Middle",
  "Might",
  "Min",
  "MinCostMaxFlowGraph",
  "MinCostMaxFlowGraph(int",
  "Minimum",
  "Minn",
  "Minn.",
  "Minnesota",
  "Miss",
  "Miss.",
  "Mississippi",
  "Mo",
  "Mo.",
  "Modify",
  "Modulo",
  "Modulus",
  "Monday",
  "Mont",
  "Mont.",
  "Moose",
  "More",
  "Mount",
  "Move",
  "Moving",
  "Mr",
  "Mr.",
  "Mrs",
  "Mrs.",
  "Ms",
  "Ms.",
  "Mt",
  "Mt.",
  "Multimap",
  "Multiplies",
  "Multiply",
  "Multiplying",
  "Multiset",
  "Must",
  "N",
  "N+1",
  "N-1",
  "N.C.",
  "N.D.",
  "N.H.",
  "N.J.",
  "N.M.",
  "N.Y.",
  "N;i++",
  "N=100000",
  "N=2000000",
  "N=50",
  "N>>1)*(pos-1",
  "N>>1)-1",
  "NA",
  "NAS",
  "NCA",
  "NCE",
  "NEITHER\\n",
  "NESW\"[o]<<\"\\n",
  "NEVER",
  "NIL",
  "NMX",
  "NO",
  "NONE",
  "NOQ",
  "NORTH",
  "NOS",
  "NOT",
  "NO\\n",
  "NULL",
  "NUM_TRIPLES",
  "NUNCA",
  "N\\n",
  "N][N",
  "Names",
  "Neb",
  "Neb.",
  "Nebr",
  "Nebr.",
  "Nebraska",
  "Need",
  "Negate",
  "NeighborSet",
  "Nev",
  "Nev.",
  "Nevada",
  "Never",
  "New",
  "New Hampshire",
  "New Jersey",
  "New Mexico",
  "New York",
  "Newline",
  "No",
  "No\\n",
  "Node",
  "None",
  "North",
  "North Carolina",
  "North Dakota",
  "Noruega",
  "Norway",
  "Norweigian",
  "Not",
  "Nothin",
  "Nothin'",
  "Nothin\u2019",
  "Nov",
  "Nov.",
  "November",
  "Number",
  "NumberToWordMap",
  "Numbers",
  "Nuthin",
  "Nuthin'",
  "Nuthin\u2019",
  "O",
  "O'clock",
  "O.O",
  "O.o",
  "OCT",
  "OF",
  "OIN",
  "ONE",
  "OOK",
  "OR/",
  "OST",
  "OTE",
  "OTS",
  "O\\n",
  "O_O",
  "O_o",
  "Oct",
  "Oct.",
  "October",
  "Odd",
  "Okla",
  "Okla.",
  "Oklahoma",
  "Ol",
  "Ol'",
  "Ollie",
  "Ol\u2019",
  "Once",
  "One",
  "Online",
  "Only",
  "Operation",
  "Optimization",
  "Optimize",
  "Ore",
  "Ore.",
  "Oregon",
  "Other",
  "Otherwise",
  "Ought",
  "Output",
  "Outputting",
  "Overloaded",
  "Overwrite",
  "O\u2019clock",
  "P",
  "P'][cardNumber",
  "P(ll",
  "P(x",
  "P;i++",
  "P;j++",
  "P;j+=i",
  "P=10001",
  "P=15",
  "PAS",
  "PASS\\n",
  "PATIENCE",
  "PI",
  "POSSIBLE",
  "POSSIBLE\\n",
  "PQ",
  "PRINCIPIO\\n",
  "PUDO\\n",
  "P[i",
  "P\\n",
  "Pa",
  "Pa.",
  "Pair",
  "Parent",
  "Parse",
  "Part",
  "Part>::iterator",
  "PascalCase",
  "Path",
  "PathMap(map",
  "PathMap(vector",
  "Pawn",
  "Pennsylvania",
  "Perform",
  "Perimeter",
  "Permutation",
  "Ph",
  "Ph.D.",
  "Pi",
  "Place",
  "Placeholder",
  "Planning",
  "Play",
  "Player",
  "Players",
  "Plot",
  "Pofik",
  "Pofik\\n",
  "Point",
  "PointVector",
  "Pop",
  "Portugal",
  "Pos",
  "Position",
  "Positions(map",
  "Positions(vector",
  "Possible\\n",
  "Pre",
  "Precompute",
  "Precomputing",
  "Predefined",
  "Prepare",
  "Prepend",
  "Preprocessing",
  "Price",
  "Prime",
  "Print",
  "Printing",
  "Prints",
  "Priority",
  "Problem",
  "Problemset",
  "Process",
  "Processing",
  "Prof",
  "Prof.",
  "Prompt",
  "Propagate",
  "Protein",
  "Ptr",
  "Push",
  "Put",
  "P{x",
  "Q",
  "Q++",
  "Q--",
  "QKA",
  "Queen",
  "Query",
  "Queue",
  "Quit",
  "Quotient",
  "Q{0",
  "R",
  "RAN",
  "RECOUNT!\\n",
  "REE",
  "RES",
  "ROM",
  "ROMANCE\\n",
  "RTH",
  "RUL",
  "R\\n",
  "Randomly",
  "Range",
  "Rank",
  "Read",
  "Reading",
  "Reads",
  "Record",
  "Recursive",
  "Recursively",
  "Red",
  "Reduce",
  "ReduceDistances(dists",
  "Remove",
  "RemoveDuplicates(Node",
  "RemoveDuplicates(head->next",
  "Rep",
  "Rep.",
  "Repeat",
  "Replace",
  "Request",
  "Requests",
  "Requests::iterator",
  "Reset",
  "Restores",
  "Result",
  "Return",
  "Returns",
  "Rev",
  "Rev.",
  "Reverse",
  "Reverses",
  "Right",
  "Row",
  "Run",
  "Running",
  "Runs",
  "S",
  "S.C.",
  "SCC",
  "SCCs",
  "SE",
  "SES",
  "SE\\n\":\"IMPERFECTO\\n",
  "SI",
  "SI\\n",
  "SOLUTION",
  "SOLUTION\\n",
  "SS",
  "START_VALUE",
  "STH",
  "STR",
  "SUB",
  "SUM",
  "S[0",
  "S[I",
  "S[J",
  "S\\n",
  "Safe",
  "Safe\\n",
  "Same",
  "Saturday",
  "Save",
  "Schedule",
  "Search",
  "Segment",
  "SegmentTree",
  "SegmentTreeNode",
  "SegmentTreeNode(SegmentTreeNode",
  "SegmentTreeNode(buildSegmentTree(start",
  "SegmentTreeNode(inputArray[start",
  "SegmentTreeNode(int",
  "SegmentTreeNode(value",
  "SegmentTreeNode>(2*N",
  "Sen",
  "Sen.",
  "Sep",
  "Sep.",
  "Separate",
  "Sept",
  "Sept.",
  "September",
  "Set",
  "Setting",
  "Sha",
  "She",
  "She's",
  "Shelves",
  "She\u2019s",
  "Shift",
  "Shortest",
  "Should",
  "Sieve",
  "Similarly",
  "Simulate",
  "Size",
  "Skip",
  "Solution",
  "Somethin",
  "Somethin'",
  "Somethin\u2019",
  "Sort",
  "SortedInsert(Node",
  "South",
  "South Carolina",
  "Special",
  "Split",
  "Square",
  "St",
  "St.",
  "Stable",
  "Stack",
  "StackInt",
  "Stan",
  "Start",
  "State",
  "Stop",
  "Store",
  "Stores",
  "Str",
  "String",
  "StringSet",
  "StringToIndexMap",
  "StringVector",
  "Strings",
  "Student",
  "Study",
  "Subnormal",
  "Subsets",
  "Subtract",
  "Sum",
  "Sunday",
  "Swap",
  "Sync",
  "Synchronize",
  "Synchronizing",
  "T",
  "T++",
  "T+1",
  "T--",
  "T<<\":\\n",
  "T<<\"\\n",
  "T=",
  "T=0;;T++",
  "T=0;T",
  "T=1",
  "T=1;;T++",
  "T=1;T<=t;T++",
  "T=3600",
  "T>(const",
  "TAR",
  "TER",
  "THE",
  "THIS",
  "TNT",
  "TST",
  "TT",
  "TTL",
  "TUN",
  "Take",
  "Taking",
  "Task",
  "Temporary",
  "Ten",
  "Tenn",
  "Tenn.",
  "Tennessee",
  "Test",
  "That",
  "That's",
  "That\u2019s",
  "The",
  "Theory",
  "There",
  "There's",
  "There\u2019s",
  "These",
  "They",
  "This",
  "This's",
  "This\u2019s",
  "Those",
  "Throw",
  "Thursday",
  "Tie\\n",
  "Titles",
  "To",
  "Toggle",
  "Tokenize",
  "Top",
  "Tortie",
  "Total",
  "Tracks",
  "Traverse",
  "Traversing",
  "Tree",
  "Triangular",
  "Tuesday",
  "Tuple",
  "Turn",
  "Two",
  "Type",
  "Typedef",
  "Typedefing",
  "Typedefs",
  "U",
  "UER",
  "UK",
  "ULDR\"[j",
  "ULL",
  "ULO",
  "UM/",
  "UN/",
  "UP",
  "UP\\n",
  "USA",
  "USI",
  "UVA",
  "Ukraine",
  "Undecided.\\n",
  "Undirected",
  "Union",
  "Unique",
  "Unordered",
  "UnorderedSet",
  "Unpack",
  "Up",
  "Update",
  "Updating",
  "Upper",
  "Uppercase",
  "Use",
  "Using",
  "V",
  "V.V",
  "V=",
  "VALID\\n",
  "VB",
  "VB(m",
  "VER",
  "VI",
  "VS",
  "VVB",
  "VVI",
  "V_V",
  "Va",
  "Va.",
  "Valid",
  "ValidMove(map",
  "ValidMove(vector",
  "ValidMoves(map",
  "ValidMoves(vector",
  "Variable",
  "Variables",
  "Vector",
  "VectorBool",
  "VectorInt",
  "VectorUnorderedSet",
  "VectorVectorInt",
  "Venezuela",
  "Virginia",
  "W",
  "W=-2147483648,M=0",
  "WAKE",
  "WAKES",
  "Warshall",
  "Was",
  "Wash",
  "Wash.",
  "Washington",
  "We",
  "Wednesday",
  "Weight",
  "Were",
  "West",
  "What",
  "What's",
  "What\u2019s",
  "When",
  "When's",
  "When\u2019s",
  "Where",
  "Where's",
  "Where\u2019s",
  "While",
  "White",
  "Who",
  "Who's",
  "Who\u2019s",
  "Why",
  "Why's",
  "Why\u2019s",
  "Width",
  "Wis",
  "Wis.",
  "Wisconsin",
  "Wo",
  "WordToNumberMap",
  "World",
  "World!\\n",
  "Would",
  "X']++",
  "X'][xxxxXxxxx",
  "X'x",
  "X'xxxx",
  "X(x",
  "X(xx",
  "X(xxxx",
  "X)%X)%X",
  "X)+xxxx(X",
  "X++",
  "X++dd",
  "X+1",
  "X+d",
  "X--",
  "X-d",
  "X.",
  "X.X",
  "X.X.",
  "X.x",
  "X.x.",
  "X.xxx",
  "X.xxxx",
  "X.xxxx_xxxx(xxxx",
  "X;X++",
  "X;x++",
  "X;x+=x",
  "X<<\":\\x",
  "X<<\"\\x",
  "X<<xxxx",
  "X=",
  "X=-dddd,X=d",
  "X=d",
  "X=d,x",
  "X=d,x=d,x=d,x",
  "X=d;;X++",
  "X=d;X",
  "X=d;X<=x;X++",
  "X=dd",
  "X=dddd",
  "X=dddd,X=dddd,X=dddd",
  "X>(xxxx",
  "X>>d)*(xxx-d",
  "X>>d)-d",
  "XD",
  "XDD",
  "XOR",
  "XS",
  "XS.push_back(1",
  "XS.push_back(I",
  "XS.size",
  "XSC",
  "XS[0",
  "XS[I",
  "XS[J",
  "XX",
  "XX\"[x]<<\"\\x",
  "XX(x",
  "XX)x",
  "XX.xxxx",
  "XX.xxxx_xxxx(X",
  "XX.xxxx_xxxx(d",
  "XXX",
  "XXX-d",
  "XXX=dddd",
  "XXXX",
  "XXXX!\\x",
  "XXXX\"[x",
  "XXXX\"[x]<<\"\\x",
  "XXXX.\\x",
  "XXXX[d",
  "XXXX[x",
  "XXXX\\x",
  "XXXX_XXX",
  "XXXX_XXXX",
  "XXX[xxx",
  "XXX\\x",
  "XXX_X",
  "XXX_XXX",
  "XXX_XXXX",
  "XXXd",
  "XXXdd_XXX",
  "XXXx",
  "XX[X",
  "XX[d",
  "XX\\x",
  "XX\\x\":\"XXXX\\x",
  "XXx",
  "XXxxxx",
  "X[*X",
  "X[12",
  "X[N",
  "X[N+1],Y[N+1",
  "X[X",
  "X[X+d],X[X+d",
  "X[X_xxxx",
  "X[d",
  "X[d][d",
  "X[dd",
  "X[i",
  "X[x",
  "X[x]++",
  "X[x].xxx",
  "X[x][x",
  "X[xxx_xxxx",
  "X][X",
  "X_K",
  "X_N",
  "X_X",
  "X_XX",
  "X_x",
  "X_xxxx",
  "X_xxxx++",
  "Xd",
  "Xd[xxxx].xxxx_xxxx(x",
  "Xd[xxxx][xxxxXxxxx",
  "Xx",
  "Xx'",
  "Xx'x",
  "Xx'xx",
  "Xx.",
  "Xx.X.",
  "Xx\\x",
  "Xxx",
  "Xxx'x",
  "Xxx.",
  "Xxx>::xxx",
  "XxxXxx",
  "XxxXxxx",
  "XxxXxxx(Xxxx",
  "XxxXxxx(xxxx->xxxx",
  "XxxXxxxXxxXxxxXxxxx",
  "XxxXxxxXxxXxxxXxxxx(xxx",
  "XxxXxxxXxxxXxxxx",
  "XxxXxxxXxxxXxxxx(xxx",
  "XxxXxxxx",
  "XxxXxxxxXxxxXxxxXxxxx(Xxxx",
  "XxxXxxxxXxxxXxxxXxxxx(xxxx->xxxx",
  "Xxx\\x",
  "Xxx_xxxx",
  "Xxxdd",
  "Xxxdd)(x",
  "Xxxx",
  "Xxxx'",
  "Xxxx'x",
  "Xxxx(xxx",
  "Xxxx.",
  "Xxxx>::xxx",
  "Xxxx>::xxxx",
  "XxxxXxXxxxxXxx",
  "XxxxXxx(xxx",
  "XxxxXxx(xxxx",
  "XxxxXxxx",
  "XxxxXxxx\\x",
  "XxxxXxxxxXxxx(Xxxx",
  "Xxxx\\x",
  "Xxxxx",
  "Xxxxx!\\x",
  "Xxxxx'",
  "Xxxxx'x",
  "Xxxxx(Xxxx",
  "Xxxxx(xxx",
  "Xxxxx(xxxx",
  "Xxxxx.",
  "Xxxxx.\\x",
  "Xxxxx::xxxx",
  "Xxxxx>::xxx",
  "XxxxxXxXxxx(Xxxx",
  "XxxxxXxXxxxXxx",
  "XxxxxXxXxxxxXxx",
  "XxxxxXxx",
  "XxxxxXxx(Xxxx",
  "XxxxxXxxx",
  "XxxxxXxxx(xxx",
  "XxxxxXxxx(xxxx",
  "XxxxxXxxxXxxx",
  "XxxxxXxxxXxxx(XxxxxXxxxXxxx",
  "XxxxxXxxxXxxx(xxx",
  "XxxxxXxxxXxxx(xxxx",
  "XxxxxXxxxXxxx(xxxxXxxxxXxxx(xxxx",
  "XxxxxXxxxXxxx(xxxxXxxxx[xxxx",
  "XxxxxXxxxXxxx>(d*X",
  "XxxxxXxxxx",
  "XxxxxXxxxx(Xxxx",
  "XxxxxXxxxx(xxx",
  "XxxxxXxxxx(xxxx",
  "XxxxxXxxxx(xxxx->xxxx",
  "XxxxxXxxxx(xxxxX",
  "XxxxxXxxxx(xxxxX->xxxx",
  "XxxxxXxxxx(xxxx[d",
  "XxxxxXxxxxXxx",
  "XxxxxXxxxx\\x",
  "Xxxxx\\x",
  "Xxxxx\u2019",
  "Xxxxx\u2019x",
  "Xxxx{xxxx._xxxx",
  "Xxxx\u2019",
  "Xxxx\u2019x",
  "Xxx\u2019x",
  "Xx\u2019",
  "Xx\u2019x",
  "Xx\u2019xx",
  "X{x",
  "X\u2019x",
  "X\u2019xxxx",
  "Y",
  "Y)z",
  "Y++",
  "Y+1",
  "Y--",
  "YEARS\\n",
  "YES",
  "YES\\n",
  "YL/",
  "Y[12",
  "Y[N",
  "Y[i",
  "Y[y",
  "Y[y]++",
  "Yes",
  "Yes\\n",
  "You",
  "Yy",
  "Z",
  "Z++",
  "ZY)z",
  "[",
  "[!i",
  "[(1",
  "[(i",
  "[(j",
  "[(n",
  "[*K",
  "[*k",
  "[-:",
  "[10",
  "[12",
  "[13",
  "[20",
  "[21",
  "[26",
  "[31",
  "[51",
  "[81",
  "[:",
  "[=",
  "[a1",
  "[a2",
  "[ai",
  "[ax",
  "[b1",
  "[b2",
  "[bi",
  "[c1",
  "[ch",
  "[cs",
  "[dx",
  "[i1",
  "[i2",
  "[id",
  "[it",
  "[k1",
  "[k2",
  "[kk",
  "[li",
  "[mx",
  "[n1",
  "[n2",
  "[na",
  "[nb",
  "[nx",
  "[pu",
  "[pv",
  "[px",
  "[ri",
  "[s2",
  "[sx",
  "[tc",
  "[tn",
  "[wi",
  "[x1",
  "[x2",
  "[xx",
  "[y1",
  "[y2",
  "[{x",
  "\\",
  "\\\")",
  "\\\"\\n",
  "\\\"\\x",
  "\\0",
  "\\\\",
  "\\\\/",
  "\\\\/\\\\/",
  "\\\\n",
  "\\\\x",
  "\\d",
  "\\n",
  "\\n\"[!i",
  "\\n\"[c==k",
  "\\n\"[d.size",
  "\\n\"[e",
  "\\n\"[elements_to_print.size",
  "\\n\"[i",
  "\\n\"[i==d.size()-1",
  "\\n\"[i==e.size()-1",
  "\\n\"[i==k-1",
  "\\n\"[i==n-1",
  "\\n\"[i==r-1",
  "\\n\"[i==r.size()-1",
  "\\n\"[j",
  "\\n\"[j==c-1",
  "\\n\"[node",
  "\\n\"[xs.empty",
  "\\n1",
  "\\nEnter",
  "\\n\\n",
  "\\n\\n\\n",
  "\\nenter",
  "\\t",
  "\\x",
  "\\x\"[!x",
  "\\x\"[x",
  "\\x\"[x.xxxx",
  "\\x\"[x==x",
  "\\x\"[x==x-d",
  "\\x\"[x==x.xxxx()-d",
  "\\x\"[xx.xxxx",
  "\\x\"[xxxx",
  "\\x\"[xxxx_xx_xxxx.xxxx",
  "\\xXxxxx",
  "\\x\\x",
  "\\x\\x\\x",
  "\\xxxx",
  "]",
  "]!=",
  "]%2",
  "]%M",
  "]%m",
  "])j",
  "]*2",
  "]*a",
  "]*b",
  "]*j",
  "]*t",
  "]++",
  "]+1",
  "]+i",
  "]+k",
  "]+v",
  "],a",
  "],b",
  "],i",
  "],k",
  "],r",
  "],u",
  "],v",
  "],w",
  "],y",
  "]--",
  "]-1",
  "]-x",
  "].d",
  "].p",
  "].u",
  "].v",
  "].x",
  "].y",
  "].z",
  "];v",
  "]<w",
  "]=",
  "]=0",
  "]=1",
  "]=2",
  "]==",
  "]=a",
  "]=i",
  "]=j",
  "]=k",
  "]=l",
  "]=p",
  "]=q",
  "]=s",
  "]=u",
  "]=w",
  "]=x",
  "]=z",
  "]>1",
  "]>m",
  "][0",
  "][1",
  "][2",
  "][3",
  "][4",
  "][5",
  "][6",
  "][7",
  "][8",
  "][K",
  "][N",
  "][a",
  "][b",
  "][c",
  "][i",
  "][j",
  "][k",
  "][l",
  "][m",
  "][n",
  "][p",
  "][r",
  "][s",
  "][t",
  "][u",
  "][v",
  "][x",
  "][y",
  "][z",
  "^",
  "^=",
  "^=c",
  "^_^",
  "^__^",
  "^___^",
  "_(N",
  "_(n",
  "_*)",
  "_-)",
  "_.)",
  "_<)",
  "_Es",
  "_Os",
  "_PI",
  "_[i",
  "_[x",
  "_[y",
  "_^)",
  "__-",
  "__^",
  "_ds",
  "_es",
  "_id",
  "_in",
  "_it",
  "_os",
  "_pi",
  "_s-",
  "_\u00ac)",
  "_\u0ca0)",
  "`",
  "a",
  "a']++",
  "a(1",
  "a(10",
  "a(100001",
  "a(2",
  "a(2*n+2),b(2*n+1",
  "a(26",
  "a(27",
  "a(3",
  "a(3,vi(3",
  "a(4",
  "a(6",
  "a(N",
  "a(X+1",
  "a(blockSize",
  "a(blocksize",
  "a(c",
  "a(g",
  "a(h",
  "a(houses",
  "a(k",
  "a(length",
  "a(m",
  "a(n",
  "a(n),b",
  "a(n),b(n",
  "a(n),b(n),c(n),d(n),p(n,-2",
  "a(n),b(n),d(n",
  "a(n+1",
  "a(n,0),b(n,0",
  "a(number_of_elements",
  "a(p",
  "a(r",
  "a(s",
  "a(s),b(r",
  "a(t",
  "a(u",
  "a(x",
  "a(x+1",
  "a)->IntVector",
  "a)->intvector",
  "a)->vi",
  "a)cout",
  "a)cout<<s<<\"\\n",
  "a*(n",
  "a*modinv(b",
  "a++",
  "a+1",
  "a+b",
  "a--",
  "a--;b--;c--;d--",
  "a-1",
  "a->next",
  "a.",
  "a.back",
  "a.begin",
  "a.clear",
  "a.count(s",
  "a.end",
  "a.erase({c",
  "a.erase({c2",
  "a.erase({it->second",
  "a.erase({next->second",
  "a.erase({prev->second",
  "a.find(n",
  "a.first",
  "a.insert({1",
  "a.insert({c",
  "a.insert({c2",
  "a.insert({d",
  "a.m",
  "a.m.",
  "a.pop_back",
  "a.push_back(b",
  "a.push_back(c",
  "a.push_back(e",
  "a.push_back(i",
  "a.push_back(it->second",
  "a.push_back(length",
  "a.push_back(node",
  "a.push_back(p",
  "a.push_back(s",
  "a.push_back(s[i",
  "a.push_back(u",
  "a.push_back(vi",
  "a.push_back(x",
  "a.rbegin",
  "a.rend",
  "a.resize(n",
  "a.second",
  "a.size",
  "a.size()-1;i++",
  "a.size()-2&&v>=0&&v",
  "a.size();i++",
  "a00",
  "a01",
  "a08",
  "a1",
  "a10",
  "a11",
  "a1q",
  "a2",
  "a2q",
  "a;;i++",
  "a;j<=b;j++",
  "a<<\"\\n",
  "a=0,b=0",
  "a=1,b=1,s=0",
  "a=911382323,b=972663749,n=1000000",
  "aCount",
  "aCount++",
  "a[(n+1)/2",
  "a[*k",
  "a[--i",
  "a[0",
  "a[0].push_back(0",
  "a[0].size",
  "a[0][0",
  "a[0][i",
  "a[0][i]--",
  "a[0][j",
  "a[0][u",
  "a[0][z[m[x]][0",
  "a[1",
  "a[10",
  "a[1000001",
  "a[100001",
  "a[100002",
  "a[10001][10001",
  "a[1001][100001",
  "a[1001][1001",
  "a[101][101",
  "a[1]]++",
  "a[2",
  "a[20",
  "a[200001",
  "a[20001",
  "a[3",
  "a[31",
  "a[360",
  "a[366",
  "a[4",
  "a[401",
  "a[5",
  "a[5001][5001",
  "a[51",
  "a[5][i",
  "a[8",
  "a[K][N",
  "a[MAX_N][2",
  "a[N",
  "a[N+1",
  "a[X+1",
  "a[a_index",
  "a[ai",
  "a[b",
  "a[b++",
  "a[b[i",
  "a[b[i][0]][b[i][1",
  "a[b[i][0]][b[i][1]]=1",
  "a[b[j",
  "a[b[j]-1].push_back({i",
  "a[c-'A']++",
  "a[c-'a']++",
  "a[c[i]-1",
  "a[curr_index",
  "a[d][x",
  "a[day",
  "a[dy][dx",
  "a[end",
  "a[i",
  "a[i++",
  "a[i+1",
  "a[i+1][j-1",
  "a[i+1][r",
  "a[i+j",
  "a[i+n]=a[i",
  "a[i-1",
  "a[i-1]*(i+1",
  "a[i-1]+k",
  "a[i-1][a[i-1][j",
  "a[i-2]*(i-2",
  "a[i-3]*(i-5",
  "a[i-4]*(i-3",
  "a[i:2*n+1",
  "a[i]%primes[j",
  "a[i])l+=b[v",
  "a[i]++",
  "a[i]+a[j",
  "a[i]+i",
  "a[i],i",
  "a[i]--",
  "a[i].end",
  "a[i].second",
  "a[i].size",
  "a[i].size();j++",
  "a[i]=i",
  "a[i]=i+2",
  "a[i]=k--",
  "a[i]=make_tuple(x",
  "a[i]=s",
  "a[i]=x",
  "a[i]={u",
  "a[i]={x",
  "a[i]={{x",
  "a[i][0",
  "a[i][1",
  "a[i][a[i].size",
  "a[i][c",
  "a[i][i",
  "a[i][i+1",
  "a[i][j",
  "a[i][j-1",
  "a[i][j]=",
  "a[i][j]=false",
  "a[i][k]++",
  "a[i][li",
  "a[i][li-1",
  "a[i][r",
  "a[i][ri",
  "a[i][u",
  "a[i][v",
  "a[idx",
  "a[index",
  "a[j",
  "a[j++",
  "a[j-1",
  "a[j-1][i",
  "a[j]++",
  "a[j][i",
  "a[j][x",
  "a[k",
  "a[k++",
  "a[k->first",
  "a[k]+1,a[k]*2",
  "a[k].choices[i",
  "a[k].end",
  "a[k].ok",
  "a[k][j",
  "a[k][l",
  "a[k][n",
  "a[k][x",
  "a[l",
  "a[l++",
  "a[l]+lsum",
  "a[l]+rsum",
  "a[l]==primes[j",
  "a[l][x",
  "a[length][x",
  "a[m[s]].push_back(x",
  "a[m][1",
  "a[max(0,s[i]-0x60)].push_back(i",
  "a[max_n][2",
  "a[mid",
  "a[n",
  "a[n+1",
  "a[n-1",
  "a[n/2",
  "a[n],c=0",
  "a[n][m",
  "a[ny][nx",
  "a[o][i",
  "a[p",
  "a[p[i",
  "a[p][0",
  "a[p][1",
  "a[p][a[p][x",
  "a[q",
  "a[r",
  "a[r1][c1",
  "a[s",
  "a[s.top",
  "a[s]++",
  "a[stack.top",
  "a[t",
  "a[u",
  "a[u]++",
  "a[u]+=x.size",
  "a[u].insert(u",
  "a[u].insert(v",
  "a[u].push_back(v",
  "a[u].size()&&a[u][v]==",
  "a[u]=(a[u]-t.size())/2+t.size",
  "a[u]=k++",
  "a[u]>1",
  "a[u][v",
  "a[v",
  "a[v])a[u].insert(x",
  "a[v]++",
  "a[v]--",
  "a[v].erase(u",
  "a[v].insert(u",
  "a[v].push_back(i",
  "a[v].push_back(u",
  "a[w",
  "a[x",
  "a[x+1",
  "a[x]++",
  "a[x].begin",
  "a[x].clear",
  "a[x].end",
  "a[x]=-(i+1",
  "a[x][y]=1",
  "a[y",
  "a[y++",
  "a[y][x",
  "a[y][x]=",
  "a[y][x]=i+1",
  "a[y][x]=k",
  "a[y][z",
  "a[z--",
  "a\\n",
  "a_fft",
  "a_fft[i",
  "a_index",
  "a_index++",
  "aa",
  "aa[0][k+1][u",
  "aa[0][k+1][u-1",
  "aa[0][k][0",
  "aa[0][k][u",
  "aa[0][k][u-1",
  "aa[0][n][u",
  "aa[1][k+1][u",
  "aa[1][k+1][u-1",
  "aa[1][k][0",
  "aa[1][k][u",
  "aa[1][k][u-1",
  "aa[1][m][u",
  "aa[2][N+1][N+1",
  "aa[2][n+1][n+1",
  "ab",
  "abandoned",
  "abbreviated",
  "abc",
  "abel\\n",
  "about",
  "above",
  "above_average_count",
  "abs",
  "abs(L",
  "abs(M",
  "abs(a",
  "abs(a[i",
  "abs(a[i]+a[j]-x",
  "abs(area",
  "abs(b",
  "abs(currentJumper",
  "abs(currentjumper",
  "abs(d",
  "abs(difference",
  "abs(group_y",
  "abs(ha",
  "abs(l",
  "abs(m",
  "abs(min_value",
  "abs(new_median",
  "abs(numbers[i",
  "abs(old_m",
  "abs(old_median",
  "abs(r",
  "abs(row",
  "abs(s",
  "abs(sum",
  "abs(x1",
  "abs(x2",
  "abs(y",
  "abs(y1",
  "abs(y2",
  "absolute",
  "accept",
  "access",
  "according",
  "accordingly",
  "account",
  "accounts",
  "accumulate",
  "accumulate(C[i].begin",
  "accumulate(a.begin",
  "accumulate(begin(divisors",
  "accumulate(c[i].begin",
  "accumulate(possible_arrays.begin",
  "accumulate(scores.begin",
  "accumulate(sequence.begin",
  "accumulated",
  "accumulatedSum[j",
  "accumulatedSum[targetSize",
  "accumulatedSums[100002",
  "accumulatedsum[j",
  "accumulatedsum[targetsize",
  "accumulatedsums[100002",
  "accumulating",
  "ace",
  "ach",
  "achieve",
  "ack",
  "acm",
  "acmsguru",
  "acorn",
  "acorn(s).\\n",
  "acorns",
  "acorns(26",
  "acorns[i",
  "acorns[input_line[i",
  "acorns_in_trees",
  "acos(-1",
  "acount",
  "acount++",
  "across",
  "act",
  "action",
  "actual",
  "adA",
  "adB",
  "ada",
  "adb",
  "add",
  "add(a",
  "add(b",
  "add(b[k",
  "add(i",
  "add(int",
  "add(ll",
  "add(m[y",
  "add(s",
  "add(x",
  "addCapacity(Capacity",
  "addCapacity(capacity",
  "addCost(Cost",
  "addCost(cost",
  "addEdge(int",
  "addRange(ll",
  "addRange(s",
  "add_edge(int",
  "add_to_component(int",
  "add_to_component(sorted_nodes[i",
  "addcapacity(capacity",
  "addcost(cost",
  "added",
  "addedge(int",
  "adding",
  "addition",
  "additional",
  "addrange(ll",
  "addrange(s",
  "adds",
  "ade",
  "adjIt",
  "adjIt->first.get<0",
  "adjIt->second",
  "adjList(n",
  "adjList(numVertices",
  "adjList[MAXN",
  "adjList[i].push_back(v",
  "adjList[node",
  "adjList[u",
  "adjList[u].insert(v",
  "adjList[u].push_back(v",
  "adjList[v].insert(u",
  "adjList[v].push_back(u",
  "adj_list",
  "adj_list(n_vertices",
  "adj_list[u",
  "adj_node",
  "adjacency",
  "adjacencyList",
  "adjacencyList(n",
  "adjacencyList(nodesCount",
  "adjacencyList.equal_range(make_tuple(currNode",
  "adjacencyList.insert(make_pair(make_tuple(u",
  "adjacencyList[MAX_N",
  "adjacencyList[MAX_NODES",
  "adjacencyList[childNode].push_back(parentNode",
  "adjacencyList[currentNode",
  "adjacencyList[degreeIndex].push_back(degrees[s[i",
  "adjacencyList[graphMap[variable1",
  "adjacencyList[graphMap[variable2",
  "adjacencyList[i",
  "adjacencyList[i][countNodes++",
  "adjacencyList[neighbor].empty",
  "adjacencyList[node",
  "adjacencyList[nodeIndex",
  "adjacencyList[nodeMap[fromNode]].push_back(nodeMap[toNode",
  "adjacencyList[node].clear",
  "adjacencyList[node].empty",
  "adjacencyList[node].pop_back",
  "adjacencyList[node].push_back(1",
  "adjacencyList[node].size",
  "adjacencyList[node][adjacencyList[node].size",
  "adjacencyList[node][currentDepth]++",
  "adjacencyList[node][i",
  "adjacencyList[parentNode].push_back(childNode",
  "adjacencyList[u",
  "adjacencyList[u].push_back(v",
  "adjacencyList[v",
  "adjacencyList[v].push_back(u",
  "adjacency_list",
  "adjacency_list(n",
  "adjacency_list.begin",
  "adjacency_list.end",
  "adjacency_list.resize(main_graph_size",
  "adjacency_list.resize(number_of_nodes",
  "adjacency_list[current_node",
  "adjacency_list[current_vertex",
  "adjacency_list[current_vertex].clear",
  "adjacency_list[edges[i][0]].insert(edges[i][1",
  "adjacency_list[edges[i][1]].insert(edges[i][0",
  "adjacency_list[i",
  "adjacency_list[i][j",
  "adjacency_list[line",
  "adjacency_list[neighbor].erase(current_vertex",
  "adjacency_list[node",
  "adjacency_list[source].push_back(target",
  "adjacency_list[u].push_back(v",
  "adjacency_list[v].push_back(u",
  "adjacencylist",
  "adjacencylist(n",
  "adjacencylist(nodescount",
  "adjacencylist.equal_range(make_tuple(currnode",
  "adjacencylist.insert(make_pair(make_tuple(u",
  "adjacencylist[childnode].push_back(parentnode",
  "adjacencylist[currentnode",
  "adjacencylist[degreeindex].push_back(degrees[s[i",
  "adjacencylist[graphmap[variable1",
  "adjacencylist[graphmap[variable2",
  "adjacencylist[i",
  "adjacencylist[i][countnodes++",
  "adjacencylist[max_n",
  "adjacencylist[max_nodes",
  "adjacencylist[neighbor].empty",
  "adjacencylist[node",
  "adjacencylist[node].clear",
  "adjacencylist[node].empty",
  "adjacencylist[node].pop_back",
  "adjacencylist[node].push_back(1",
  "adjacencylist[node].size",
  "adjacencylist[node][adjacencylist[node].size",
  "adjacencylist[node][currentdepth]++",
  "adjacencylist[node][i",
  "adjacencylist[nodeindex",
  "adjacencylist[nodemap[fromnode]].push_back(nodemap[tonode",
  "adjacencylist[parentnode].push_back(childnode",
  "adjacencylist[u",
  "adjacencylist[u].push_back(v",
  "adjacencylist[v",
  "adjacencylist[v].push_back(u",
  "adjacent",
  "adjacentNode",
  "adjacentNode--",
  "adjacentnode",
  "adjacentnode--",
  "adjit",
  "adjit->first.get<0",
  "adjit->second",
  "adjlist",
  "adjlist(n",
  "adjlist(numvertices",
  "adjlist[i].push_back(v",
  "adjlist[maxn",
  "adjlist[node",
  "adjlist[u",
  "adjlist[u].insert(v",
  "adjlist[u].push_back(v",
  "adjlist[v].insert(u",
  "adjlist[v].push_back(u",
  "adjust",
  "adjusted",
  "adjustedTotalMinutes",
  "adjustedtotalminutes",
  "adjusting",
  "adjustment",
  "adm",
  "adm.",
  "adopted",
  "ads",
  "adv",
  "advance",
  "advance(it",
  "advertise\\n",
  "ady",
  "afe",
  "affected",
  "after",
  "again",
  "again.\\n",
  "age",
  "ags",
  "ahead",
  "ai",
  "ail",
  "ain",
  "air",
  "airport",
  "airports",
  "aj",
  "ak",
  "ak.",
  "ake",
  "aks",
  "ala",
  "ala.",
  "alc",
  "alf",
  "algorithm",
  "algorithms",
  "alias",
  "aliases",
  "alien",
  "alienBase",
  "alienBase.size",
  "alienbase",
  "alienbase.size",
  "all",
  "all(int",
  "all(sy",
  "allIntervals",
  "allIntervals.empty",
  "allIntervals.push_back(make_tuple(--a",
  "allintervals",
  "allintervals.empty",
  "allintervals.push_back(make_tuple(--a",
  "allocate",
  "allocated",
  "allowed",
  "almost",
  "along",
  "alphabet",
  "alphabetic",
  "alphabets",
  "already",
  "als",
  "also",
  "alternate",
  "alternating",
  "always",
  "am",
  "ambiguous",
  "ambiguous\\n",
  "ame",
  "among",
  "amount",
  "amounts",
  "amp",
  "ams",
  "an",
  "an.",
  "anc",
  "anc(N",
  "anc(n",
  "anc.push_back(vi(n",
  "anc[0][i",
  "anc[j+1][u",
  "anc[j+1][v",
  "anc[j-1][anc[j-1][k",
  "anc[j][k",
  "anc[j][u",
  "anc[j][v",
  "ancestor",
  "ancestors",
  "ancestors.push_back(vi(n",
  "ancestors.push_back(vi(n+1",
  "ancestors[0][i",
  "ancestors[0][i]=max(0,p[i-1]+1",
  "ancestors[1][u",
  "ancestors[1][v",
  "ancestors[i][u",
  "ancestors[i][u+1]-1",
  "ancestors[j",
  "ancestors[j][k",
  "ancestors[j][k]=ancestors[j-1][ancestors[j-1][k",
  "ancestors[level][u",
  "ancestors[level][v",
  "and",
  "and/or",
  "ane",
  "anf",
  "angle",
  "angles",
  "animal",
  "animalIndexMap",
  "animalIndexMap.count(childName",
  "animalIndexMap[childName",
  "animalindexmap",
  "animalindexmap.count(childname",
  "animalindexmap[childname",
  "animals",
  "animals(numberOfParents",
  "animals(numberofparents",
  "animals[animalIndexMap[childName]].push_back(parentNumber",
  "animals[animalindexmap[childname]].push_back(parentnumber",
  "animals[parents[index",
  "ank",
  "announced",
  "another",
  "ans",
  "ans(1",
  "ans(k",
  "ans(n",
  "ans++",
  "ans--",
  "ans.back",
  "ans.back().end",
  "ans.back().push_back(0",
  "ans.back().push_back(ns[x",
  "ans.back().push_back(u",
  "ans.begin",
  "ans.empty",
  "ans.end",
  "ans.erase(--it",
  "ans.first",
  "ans.insert(it",
  "ans.push_back(\"10\"[((u",
  "ans.push_back('0",
  "ans.push_back('1",
  "ans.push_back(c[d",
  "ans.push_back(c[x",
  "ans.push_back(ds[i",
  "ans.push_back(i",
  "ans.push_back(s[p[x",
  "ans.push_back(u",
  "ans.push_back(v",
  "ans.push_back(vector",
  "ans.push_back(vi",
  "ans.push_back(x",
  "ans.push_back({l",
  "ans.push_back({left",
  "ans.rend",
  "ans.resize(n",
  "ans.second",
  "ans.size",
  "ans[0",
  "ans[ans.size",
  "ans[get<2>(a[i",
  "ans[i",
  "ans[k",
  "answer",
  "answer.end",
  "answer.push_back(directions[i",
  "answer.size",
  "answers",
  "answers(k",
  "answers[0",
  "answers[j",
  "answers[k",
  "ant",
  "any",
  "anything",
  "aph",
  "appear",
  "appears",
  "append",
  "apple",
  "apple++",
  "apples",
  "apples_in_one_sack",
  "applicable",
  "apply",
  "applying",
  "appropriate",
  "approximate",
  "approximation",
  "apr",
  "apr.",
  "aps",
  "ar.",
  "ar1",
  "ar2",
  "arbitrage",
  "arbitrage\\n",
  "arbitrary",
  "ard",
  "are",
  "area",
  "areas",
  "argc",
  "argv",
  "ari",
  "arithmetic",
  "ariz",
  "ariz.",
  "ark",
  "ark.",
  "arm",
  "armies",
  "army",
  "around",
  "arr",
  "arr(array_size",
  "arr(n",
  "arr.begin",
  "arr.end",
  "arr.push_back(i",
  "arr.push_back(midElement",
  "arr.push_back(midelement",
  "arr.push_back(num",
  "arr.size",
  "arrA(n",
  "arrA[i",
  "arrA[index",
  "arrB(n",
  "arrP[MAX_N",
  "arrP[i",
  "arr[(array_size",
  "arr[(n+1)/2",
  "arr[0",
  "arr[1",
  "arr[MAX_N",
  "arr[N",
  "arr[current_index",
  "arr[current_index]++",
  "arr[i",
  "arr[i]--",
  "arr[i].second",
  "arr[idx",
  "arr[index",
  "arr[j",
  "arr[max_n",
  "arr[n",
  "arr[n-1",
  "arra(n",
  "arra[i",
  "arra[index",
  "arrangement",
  "arrangements",
  "array",
  "array(array_size",
  "array(n",
  "array(number_of_elements",
  "array[i",
  "array[index",
  "array[index_end++",
  "array[index_start++",
  "array[left",
  "array[row][column",
  "array_a",
  "array_a(array_size",
  "array_a(count_a",
  "array_a.end",
  "array_a[i",
  "array_b",
  "array_b(array_size",
  "array_b(elements_a",
  "array_b.rend",
  "array_b[i",
  "array_size",
  "arrays",
  "arrb(n",
  "arrival",
  "arrp[i",
  "arrp[max_n",
  "ars",
  "art",
  "artificial_vertex",
  "artificial_vertex.end",
  "artificial_vertex.push_back(node",
  "artificial_vertex.size",
  "artwork",
  "artworks",
  "ary",
  "as",
  "asc",
  "ascending",
  "ascii",
  "ase",
  "ash",
  "asin((width",
  "asin(double(w",
  "asin(w",
  "ask",
  "ass",
  "assert",
  "assert(!n",
  "assert(!s[k",
  "assert(0",
  "assert(H",
  "assert(a",
  "assert(argc",
  "assert(b",
  "assert(c",
  "assert(d[n",
  "assert(dist[n",
  "assert(false",
  "assert(h",
  "assert(h==1",
  "assert(j",
  "assert(k",
  "assert(l",
  "assert(m",
  "assert(modulus",
  "assert(n",
  "assert(r.size()==dp.back",
  "assert(r[i",
  "assert(results[i",
  "assert(s",
  "assert(s[i",
  "assert(x",
  "assign",
  "assign(a",
  "assign(int",
  "assign(l",
  "assigned",
  "assoc_container.hpp",
  "associated",
  "associative",
  "assume",
  "assumes",
  "assuming",
  "ast",
  "asy",
  "at",
  "ata",
  "atcode",
  "atcoder",
  "atcoder::MaxCostFlowGraph",
  "atcoder::MinCostMaxFlowGraph",
  "atcoder::maxcostflowgraph",
  "atcoder::mcf_graph",
  "atcoder::mincostmaxflowgraph",
  "ate",
  "ath",
  "atoi(a[i].c_str",
  "atoi(argv[1",
  "atoi(s.substr(2).c_str()),b",
  "atoi(t.substr(2).c_str",
  "ats",
  "attach",
  "atz",
  "auf",
  "aug",
  "aug.",
  "augmented",
  "augmentingPath(parent",
  "augmentingPath(std::vector",
  "augmentingpath(parent",
  "augmentingpath(std::vector",
  "author",
  "auto",
  "av",
  "av.push_back(*K",
  "av.push_back(*k",
  "av.push_back(K",
  "av.push_back(k",
  "available",
  "available(4",
  "available.begin",
  "available.end",
  "available_moves",
  "available_moves(available",
  "availablemoves(available",
  "availablemoves(vector",
  "ave",
  "average",
  "average_array_a",
  "average_array_b",
  "averages",
  "avgA",
  "avgB",
  "avg_x",
  "avg_y",
  "avga",
  "avgb",
  "avoid",
  "avoided\\n",
  "avu",
  "awardee",
  "awardees",
  "awn",
  "ax",
  "axis",
  "axn",
  "ay",
  "ays",
  "aze",
  "b",
  "b(1",
  "b(100001",
  "b(2",
  "b(2*n",
  "b(3",
  "b(N",
  "b(Y",
  "b(a",
  "b(a.begin",
  "b(blockSize",
  "b(blocksize",
  "b(c",
  "b(c),d(c),e(c),f",
  "b(e",
  "b(int",
  "b(k",
  "b(k),c(l",
  "b(k1",
  "b(k2",
  "b(length",
  "b(m",
  "b(n",
  "b(n),d(128,-1",
  "b(n,0",
  "b(q",
  "b(r",
  "b(s.size",
  "b(t",
  "b(y",
  "b({0",
  "b)=x",
  "b)cout<<\"ESGRITO\\n",
  "b)cout<<\"esgrito\\n",
  "b)if(!x)o=0",
  "b)z+=x.count",
  "b*(l",
  "b*=1000000",
  "b++",
  "b+1",
  "b+=a[i",
  "b+d",
  "b+e",
  "b+n",
  "b,1",
  "b--",
  "b-1",
  "b->next",
  "b->next->next",
  "b.",
  "b.back",
  "b.begin",
  "b.clear",
  "b.emplace_back(a[i",
  "b.emplace_back(abs(a[i",
  "b.emplace_back(distance(a[i",
  "b.emplace_back(fabs(a[i]-a[j]),i",
  "b.emplace_back(make_tuple(a[i",
  "b.empty",
  "b.end",
  "b.erase(a[n",
  "b.erase(y",
  "b.find(r",
  "b.first",
  "b.insert(-(i+1",
  "b.insert(i",
  "b.pop_back",
  "b.push_back(0",
  "b.push_back(i",
  "b.push_back(j",
  "b.push_back(l",
  "b.push_back(length",
  "b.push_back(vb(81",
  "b.push_back({-r[i],i",
  "b.push_back({i",
  "b.push_back({x",
  "b.rend",
  "b.second",
  "b.size",
  "b.size()&&v>=0&&v",
  "b0",
  "b1",
  "b2",
  "b2/",
  "b3",
  "b<<\"\\n",
  "b=0",
  "b=1",
  "bCount",
  "bCount++",
  "bCount--",
  "b[(1",
  "b[++j",
  "b[0",
  "b[0].first",
  "b[0].second",
  "b[100001",
  "b[10001][10001",
  "b[2",
  "b[2*i",
  "b[20001",
  "b[5001][5001",
  "b[8][8",
  "b[N",
  "b[N+1][N+1",
  "b[a[i",
  "b[a[i]]++",
  "b[a[i]].push_back(i",
  "b[a[s]]--",
  "b[ay][ax",
  "b[b.size",
  "b[b_index",
  "b[bi",
  "b[c[i][j]]++",
  "b[d[c]]=1",
  "b[g[i",
  "b[group[node",
  "b[i",
  "b[i-1]=b[it-&a[1]]+1",
  "b[i]&&!c[i",
  "b[i])x^=c",
  "b[i]-b[i+n-1]+1",
  "b[i].first",
  "b[i].resize(N",
  "b[i].resize(n",
  "b[i].second",
  "b[i].size",
  "b[i]=k--",
  "b[i][0",
  "b[i][i",
  "b[i][j",
  "b[i][j].flip",
  "b[i][j]=a[i][j]==",
  "b[i][j]=k",
  "b[i][j]=true",
  "b[i][k",
  "b[it",
  "b[j",
  "b[j++",
  "b[j].push_back(i",
  "b[k",
  "b[k]++",
  "b[k],b[k]*2))<<endl",
  "b[l",
  "b[min",
  "b[n",
  "b[n+1][n+1",
  "b[n-1]),e(tn",
  "b[node",
  "b[paths[i][j",
  "b[paths[i][j]]=j",
  "b[r",
  "b[s",
  "b[s[i][j]]++",
  "b[s]++",
  "b[u",
  "b[u]++",
  "b[u].size",
  "b[u]=1",
  "b[u]=a[u",
  "b[u]=min(b[u],b[v",
  "b[u]=w",
  "b[v",
  "b[v]-b[u",
  "b[v]=max(b[v],1+b[u",
  "b[v]>k)continue",
  "b[x",
  "b[x1",
  "b[x2",
  "b[x][y",
  "b[y].begin",
  "b[y].end",
  "b[y][x",
  "b[y][x]+1",
  "b[y][x]=++k",
  "b[y][x]=1",
  "b]%m",
  "b_fft",
  "b_fft[i",
  "b_index",
  "b_index++",
  "bab",
  "back",
  "backspace",
  "backtrack",
  "backtracking",
  "backward",
  "backwards",
  "bad",
  "bal",
  "ball",
  "ballot",
  "ballotIndex",
  "ballotindex",
  "ballots",
  "balls",
  "base",
  "baseSet",
  "baseSet.clear",
  "baseSet.end",
  "baseSet.find('A",
  "baseSet.find('C",
  "baseSet.find('G",
  "baseSet.insert(base",
  "baseSet.size",
  "base_length",
  "base_power",
  "based",
  "basement!\\n",
  "bases",
  "baseset",
  "baseset.clear",
  "baseset.end",
  "baseset.find('a",
  "baseset.find('c",
  "baseset.find('g",
  "baseset.insert(base",
  "baseset.size",
  "battle",
  "battleNumber",
  "battlefield(battlefieldSize",
  "battlefield(battlefieldsize",
  "battlefieldSize",
  "battlefield[i",
  "battlefieldsize",
  "battlenumber",
  "bcount",
  "bcount++",
  "bcount--",
  "bda",
  "bds",
  "be",
  "beat_interval",
  "beats",
  "because",
  "become",
  "becomes",
  "beehind.\\n",
  "been",
  "before",
  "begin(edges",
  "beginning",
  "being",
  "bel",
  "belong",
  "belongs",
  "below",
  "ber",
  "best",
  "best(1",
  "best.empty",
  "best.size",
  "bestDayIndex",
  "bestKnapsack(1",
  "bestKnapsack[(1",
  "bestKnapsack[0",
  "bestKnapsack[state",
  "bestKnapsack[state].second",
  "bestScore",
  "bestStartIndex",
  "bestSum",
  "best[(1",
  "best[0",
  "best[s",
  "best_routes",
  "best_routes.empty",
  "best_routes.push_back(final_route",
  "best_routes.size",
  "best_solution",
  "best_solution.cost",
  "bestdayindex",
  "bestknapsack(1",
  "bestknapsack[(1",
  "bestknapsack[0",
  "bestknapsack[state",
  "bestknapsack[state].second",
  "bestscore",
  "beststartindex",
  "bestsum",
  "bet",
  "better",
  "between",
  "bf/",
  "bfs",
  "bi",
  "bicolorable",
  "bicolorable.\\n",
  "biconnect",
  "biconnect_components",
  "biconnected",
  "biconnectivity",
  "bidirectional",
  "binary",
  "binaryNumber",
  "binaryStr",
  "binaryStr(n",
  "binary\\n",
  "binary_search(g[v].begin",
  "binary_search(reverse_adjacency_list[neighbor].begin",
  "binarynumber",
  "binarystr",
  "binarystr(n",
  "binom[0][0",
  "binom[N",
  "binom[N+1][N+1",
  "binom[i",
  "binom[i-1][j",
  "binom[i-1][j-1",
  "binom[i][0",
  "binom[i][i",
  "binom[i][j",
  "binom[m][k2",
  "binom[m][u",
  "binom[n",
  "binom[n+1][n+1",
  "binom[n][k1",
  "binom[n][u",
  "binom[total][i",
  "binom[total_votes][i",
  "binom[total_votes][total_votes",
  "binomial",
  "binomial((n",
  "binomial((n-1)*2,n-1,M",
  "binomial((n-1)*2,n-1,m",
  "binomial(a",
  "binomial(d",
  "binomial(k",
  "binomial(k-1,i-1,m",
  "binomial(ll",
  "binomial(n",
  "binomial(pa",
  "binomialCoefficient(int",
  "binomialCoefficient(n",
  "binomialcoefficient(int",
  "binomialcoefficient(n",
  "bipartite",
  "bit",
  "bit++",
  "bits",
  "bitset<20",
  "bitset<3",
  "bitset<3>>b(3",
  "bitset<3>{0",
  "bitset<3>{1",
  "bitwise",
  "bj",
  "black",
  "blank",
  "ble",
  "block",
  "block(h",
  "blockSize",
  "block[i",
  "block[r][c",
  "block[y][x",
  "blocked",
  "blocks",
  "blocks(height",
  "blocks[i",
  "blocks[i][col",
  "blocksize",
  "blue",
  "blueSize",
  "blueSoldier",
  "blueTeam",
  "blueTeam.empty",
  "blueTeam.pop",
  "blueTeam.push(battlefield[i",
  "blueTeam.push(soldier",
  "blueTeam.top",
  "bluesize",
  "bluesoldier",
  "blueteam",
  "blueteam.empty",
  "blueteam.pop",
  "blueteam.push(battlefield[i",
  "blueteam.push(soldier",
  "blueteam.top",
  "bmt",
  "board",
  "board(3",
  "board(4",
  "board(board_size",
  "board(gridSize",
  "board(gridsize",
  "board(n",
  "board.erase(board.end",
  "board.size",
  "boardSize",
  "board[0",
  "board[0][0",
  "board[0][j",
  "board[3][j",
  "board[8][8",
  "board[boardSize][boardSize",
  "board[boardsize][boardsize",
  "board[current",
  "board[i",
  "board[i].first",
  "board[i].second",
  "board[i][0",
  "board[i][3",
  "board[i][j",
  "board[i][k",
  "board[k",
  "board[k][j",
  "board[newR][newC",
  "board[newr][newc",
  "board[next",
  "board[ny][nx",
  "board[prevRow",
  "board[prevrow",
  "board[r][c",
  "board[row",
  "board[row][col",
  "board[y][x",
  "board_size",
  "boardsize",
  "boatParts",
  "boatParts.insert(currentPart",
  "boatParts.size",
  "boatparts",
  "boatparts.insert(currentpart",
  "boatparts.size",
  "boilerplate",
  "bol",
  "book",
  "bookTitles",
  "bookTitles[title",
  "booked",
  "bookingCounter",
  "bookingCounter++",
  "bookingcounter",
  "bookingcounter++",
  "bookings",
  "books",
  "booktitles",
  "booktitles[title",
  "bool",
  "bool((D",
  "bool((d",
  "bool(int",
  "bool>(13",
  "bool>(cc.size",
  "bool>(k",
  "bool>(m",
  "bool>(n",
  "boolMatrix",
  "boolVector",
  "boolean",
  "boolmatrix",
  "boolvector",
  "bor",
  "border",
  "borders",
  "bot",
  "both",
  "bottom",
  "bound",
  "boundaries",
  "boundary",
  "bounds",
  "bout",
  "box",
  "boxes",
  "br.",
  "bracketStack",
  "bracketStack.empty",
  "bracketStack.pop",
  "bracketStack.push",
  "bracketStack.top",
  "bracketstack",
  "bracketstack.empty",
  "bracketstack.pop",
  "bracketstack.push",
  "bracketstack.top",
  "brain",
  "brainWakesUp",
  "brainwakesup",
  "breadth",
  "break",
  "breaking",
  "brevity",
  "bridge",
  "bridges",
  "broke",
  "bros",
  "bros.",
  "bs",
  "bs++",
  "bucketIdx",
  "bucketidx",
  "buckets(componentCount",
  "buckets(componentcount",
  "buckets(static_cast",
  "buckets.end",
  "buckets[bucketIdx",
  "buckets[bucketIdx].end",
  "buckets[bucketidx",
  "buckets[bucketidx].end",
  "buckets[i",
  "buckets[idx",
  "buckets[spreading[x][y]]++",
  "budget",
  "buffer",
  "buffering",
  "build",
  "build(1",
  "build(id",
  "build(int",
  "build(m",
  "build(node",
  "buildSegmentTree",
  "buildSegmentTree(int",
  "buildSegmentTree(mid",
  "building",
  "buildsegmenttree",
  "buildsegmenttree(int",
  "buildsegmenttree(mid",
  "built",
  "builtin_parity(i",
  "builtin_parity(j",
  "builtin_parity(product",
  "builtin_popcount(i",
  "builtin_popcount(j",
  "builtin_popcount(jk",
  "builtin_popcount(m",
  "builtin_popcount(state",
  "builtin_popcount(xs[i",
  "builtin_popcountll(xs[j",
  "bulgaria",
  "burglar",
  "burglaries",
  "burglarized",
  "burglary",
  "bus",
  "buses",
  "but",
  "button",
  "buttonbashing",
  "buttons",
  "buzz",
  "buzz\\n",
  "buzz_factor",
  "bv",
  "bv.push_back(*K",
  "bv.push_back(*k",
  "bv.push_back(K",
  "bv.push_back(k",
  "bw\"[f]<<\"\\n",
  "by",
  "c",
  "c%s\\n\",x",
  "c'm",
  "c(1",
  "c(26",
  "c(5",
  "c(N",
  "c(a",
  "c(a.begin",
  "c(b",
  "c(c",
  "c(const",
  "c(d",
  "c(f.size",
  "c(k",
  "c(k+1",
  "c(l",
  "c(length",
  "c(ll",
  "c(m",
  "c(n",
  "c(n),d(n",
  "c(tn",
  "c(tn),d(tn",
  "c)b[x]=1",
  "c*f[a]%m*invf[b]%m*invf[a",
  "c++",
  "c++11",
  "c+1",
  "c+=",
  "c+=(Y[y]-1)*(X[x]-1",
  "c+=(y[y]-1)*(x[x]-1",
  "c+=__gcd(i",
  "c+=b",
  "c--",
  "c-1",
  "c-7",
  "c.",
  "c.back",
  "c.back().push_back(i",
  "c.back().push_back(u",
  "c.begin",
  "c.clear",
  "c.count(x",
  "c.empty",
  "c.end",
  "c.erase(c.begin",
  "c.erase(x",
  "c.front",
  "c.insert(s",
  "c.insert(x",
  "c.m",
  "c.pop_back",
  "c.push_back(i",
  "c.push_back(u",
  "c.push_back(vi",
  "c.push_back(x",
  "c.push_back({dp[i][j",
  "c.push_back({i",
  "c.size",
  "c.size()-1",
  "c/=10",
  "c0[(i",
  "c0[1000",
  "c0[i",
  "c1",
  "c1++",
  "c1[1000",
  "c1[i",
  "c2",
  "c2++",
  "c3",
  "c;i++",
  "c;i++)b[i]=a[i].size",
  "c;j++",
  "c;j++)cin>>b[j",
  "c;j++)cout",
  "c;j++)cout<<get<1>(a[i][j",
  "c<<endl",
  "c=(c+17)%36",
  "c=(s[0]-'0')*10+s[1]-'0",
  "c=0",
  "c=0,s=0",
  "c=1",
  "c=1000000000",
  "c>1",
  "cId",
  "cId++",
  "c[*k",
  "c[*s.find_by_order(p",
  "c[0",
  "c[0]++",
  "c[0]=1",
  "c[0]=2",
  "c[0][a",
  "c[0][b",
  "c[0][c[0].size",
  "c[0][i",
  "c[1",
  "c[1000",
  "c[1000001",
  "c[251][51",
  "c[4",
  "c[501][250001",
  "c[K",
  "c[N",
  "c[N+1",
  "c[N][N",
  "c[]={-1,1,-2,2,-2,2,-1,1",
  "c[]={0,1,0,-1",
  "c[a",
  "c[a[i",
  "c[a[i]]++",
  "c[a].back",
  "c[a][a1",
  "c[a][a2",
  "c[a][b1",
  "c[a][b2",
  "c[a][c[a].size",
  "c[b",
  "c[b[i]].size",
  "c[b].back",
  "c[b][a1",
  "c[b][a2",
  "c[b][b1",
  "c[b][b2",
  "c[b][c[b].size",
  "c[c",
  "c[ci[a]][a",
  "c[ci[a]][b",
  "c[d",
  "c[d[i]]++",
  "c[i",
  "c[i+1",
  "c[i]*binomial(d+e",
  "c[i]++",
  "c[i].count(k",
  "c[i].end",
  "c[i].insert(k",
  "c[i]=(c[i]-c[j]*binomial(pa+pb",
  "c[i]=binomial(a+b-2,b-1,M",
  "c[i]=binomial(a+b-2,b-1,m",
  "c[i][j",
  "c[i][n",
  "c[i][s",
  "c[j",
  "c[j+1",
  "c[j]*l[j",
  "c[j][a",
  "c[j][b",
  "c[j][c[j].size",
  "c[j][k",
  "c[j][kk",
  "c[k",
  "c[k]=z",
  "c[k][K",
  "c[k][k",
  "c[k][l",
  "c[l",
  "c[m",
  "c[n",
  "c[n+1",
  "c[n][i",
  "c[n][n",
  "c[p",
  "c[p[u]][u",
  "c[r[i][j]]=1",
  "c[s[i][j]]++",
  "c[s];v",
  "c[start[0]].back",
  "c[start[0]][a",
  "c[start[j]].back",
  "c[start[j]][a",
  "c[start[j]][b",
  "c[t",
  "c[ti[u]]=(c[ti[u]]+c[i])%M",
  "c[ti[u]]=(c[ti[u]]+c[i])%m",
  "c[tn",
  "c[u",
  "c[u]%2",
  "c[u]*a",
  "c[u]++",
  "c[u]=1",
  "c[u]==c[v",
  "c[u]==k",
  "c[u]=d[u]=1",
  "c[u]=k",
  "c[u]=l",
  "c[u]>1",
  "c[u][i",
  "c[u][p[u",
  "c[u][v",
  "c[v",
  "c[v]=p;d[v]=q",
  "c[x",
  "c[x[i]]=i",
  "c[y",
  "c[y.first",
  "c[y[j",
  "c[y][x]=k",
  "c[z",
  "c].push_back(a[j",
  "c].size",
  "c_str",
  "ca",
  "cabs",
  "cache",
  "cache(4",
  "cache.end",
  "cache.find(n",
  "cache[201][201][201",
  "cache[2501][2501",
  "cache[401",
  "cache[D][j",
  "cache[L][i",
  "cache[R][i",
  "cache[U][j",
  "cache[d][j",
  "cache[i",
  "cache[i].count(j",
  "cache[i][j",
  "cache[i][j][k",
  "cache[index].count(currentAnimal",
  "cache[index].count(currentanimal",
  "cache[index][currentAnimal",
  "cache[index][currentanimal",
  "cache[k",
  "cache[l][i",
  "cache[n",
  "cache[n][k",
  "cache[r][i",
  "cache[start][end][current_cut",
  "cache[u][j",
  "cain\\n",
  "cal",
  "calc",
  "calculate",
  "calculateAnswer(i",
  "calculateAnswer(int",
  "calculateFunction(double",
  "calculateFunction(x",
  "calculatePaths",
  "calculatePaths(int",
  "calculatePaths(n",
  "calculate_coefficients",
  "calculate_error(a",
  "calculate_error(const",
  "calculate_powers(0",
  "calculate_powers(i",
  "calculate_powers(int",
  "calculate_sums",
  "calculate_sums(calculate_sums",
  "calculateanswer(i",
  "calculateanswer(int",
  "calculated",
  "calculatefunction(double",
  "calculatefunction(x",
  "calculatepaths",
  "calculatepaths(int",
  "calculatepaths(n",
  "calculates",
  "calculating",
  "calculation",
  "calculations",
  "calif",
  "calif.",
  "call",
  "called",
  "calories",
  "camelCase",
  "camelcase",
  "camera",
  "camera(s",
  "cameras",
  "cameras.end",
  "cameras.push_back(x[i",
  "cameras.size",
  "can",
  "canAdd",
  "canPartition(a",
  "canPartition(const",
  "canadd",
  "candidate",
  "candidateIndex",
  "candidateindex",
  "candidates",
  "candies",
  "candiesCount",
  "candiescount",
  "candlesPerRow",
  "candlesperrow",
  "candy",
  "canpartition(a",
  "canpartition(const",
  "cap",
  "cap>::max",
  "capacities",
  "capacity",
  "capacity(n",
  "capacity>::max",
  "capacity[current][neighbor",
  "capacity[current][previous",
  "capacity[i][j",
  "capacity[previous][current",
  "capacity[u][v",
  "capture",
  "carbohydrate",
  "carbohydrates",
  "card",
  "cardDeck(4",
  "cardDeck[i].resize(13",
  "cardDeck[i][j",
  "cardDeck[suit",
  "cardNumber",
  "card[0",
  "card[1",
  "carddeck(4",
  "carddeck[i].resize(13",
  "carddeck[i][j",
  "carddeck[suit",
  "cardnumber",
  "cards",
  "care",
  "carries",
  "carry",
  "case",
  "case'E':x++",
  "case'N':y--;break",
  "case'S':y++;break",
  "case'W':x--;break",
  "case'e':x++",
  "case'n':y--;break",
  "case's':y++;break",
  "case'w':x--;break",
  "case:\\n",
  "caseA",
  "caseA[currentString",
  "caseB",
  "caseB[currentString",
  "caseB[s",
  "caseCounter",
  "caseCounter++",
  "caseNumber",
  "case_index",
  "case_num",
  "case_number",
  "case_number++",
  "casea",
  "casea[currentstring",
  "caseb",
  "caseb[currentstring",
  "caseb[s",
  "casecounter",
  "casecounter++",
  "casenumber",
  "cases",
  "cases++",
  "cases--",
  "cases:\\n",
  "cassert",
  "casted",
  "cat",
  "cat.count",
  "cat.sum",
  "catBlack",
  "catBlue",
  "catChocolate",
  "catColor",
  "catColor.first",
  "catColor.second",
  "catCream",
  "catLilac",
  "catRed",
  "catTortieBlackRed",
  "catTortieBlueCream",
  "catTortieChocolateRed",
  "catTortieLilacCream",
  "catblack",
  "catblue",
  "catchocolate",
  "catcolor",
  "catcolor.first",
  "catcolor.second",
  "catcream",
  "categories",
  "categories[0].count",
  "categories[0].sum",
  "categories[1].sum",
  "categories[2].sum",
  "categories[3].sum",
  "categories[4].sum",
  "categories[5",
  "categories[i].count",
  "categories[i].sum",
  "categories[max_index].name",
  "categories[min_index].name",
  "category",
  "catlilac",
  "catred",
  "cats[5",
  "cats[mni",
  "cats[mxi",
  "cattortieblackred",
  "cattortiebluecream",
  "cattortiechocolatered",
  "cattortielilaccream",
  "cause",
  "cb",
  "cc--",
  "cc.back().push_back(k[u",
  "cc.back().push_back(v",
  "cc.back()[0",
  "cc.push_back(vector",
  "cc/",
  "cc[c",
  "cc[c].size",
  "cc[c][0",
  "cc[c][i",
  "cci",
  "ccs",
  "cctype",
  "cd",
  "cd--",
  "ce2",
  "ce>",
  "ced",
  "cefh",
  "ceil(h",
  "ceil(ladderLength",
  "ceil(ladderlength",
  "ceil(log2(n",
  "ceil(sqrt(n",
  "ceiling",
  "cell",
  "cell_height",
  "cell_width",
  "cell_width_so_far",
  "cells",
  "cenas",
  "center",
  "centroid",
  "centroid(0",
  "centroid(int",
  "centroid(u",
  "centroid_candidate",
  "ceremonial",
  "cerr",
  "ces",
  "ch",
  "ch.",
  "ch2",
  "chain",
  "chains",
  "champagne",
  "change",
  "changed",
  "changes",
  "changes++",
  "changesMade",
  "changesmade",
  "char",
  "char('A",
  "char('a",
  "char(c",
  "char(char_value",
  "char(v",
  "char>(4",
  "char>(direction",
  "char>(i",
  "char>(x",
  "char>>&map",
  "char_value",
  "character",
  "characterSet",
  "characterSet.erase({it->second",
  "characterSet.erase({nextCharCount",
  "characterSet.insert({1",
  "characterSet.insert({c",
  "characterSet.insert({currentCharCount",
  "characterSet.rbegin",
  "characters",
  "characterset",
  "characterset.erase({it->second",
  "characterset.erase({nextcharcount",
  "characterset.insert({1",
  "characterset.insert({c",
  "characterset.insert({currentcharcount",
  "characterset.rbegin",
  "chaz",
  "che",
  "chebyshev",
  "check",
  "check(ll",
  "check(pi",
  "check_value",
  "checked",
  "checking",
  "checks",
  "chefirnemo\\n",
  "chessboard",
  "chevyshev",
  "chevyshev(ll",
  "chevyshev(t",
  "chf",
  "chicken",
  "chicken!\\n",
  "chickens",
  "chickensEaten",
  "chickenseaten",
  "child",
  "child++",
  "child--",
  "child1Index",
  "child1index",
  "child2Index",
  "child2index",
  "childIndex",
  "childName",
  "childNode",
  "childSum",
  "childSum[node",
  "childSum[parent",
  "childindex",
  "childname",
  "childnode",
  "children",
  "children(adjacencyList[node].size",
  "children(adjacencylist[node].size",
  "children++",
  "children[i",
  "childsum",
  "childsum[node",
  "childsum[parent",
  "cho",
  "chocolate",
  "choice",
  "choiceOrIndices",
  "choiceOrIndices[0",
  "choiceorindices",
  "choiceorindices[0",
  "choices[3",
  "chr",
  "chunks",
  "ci",
  "ci.resize(k[n",
  "ci[0",
  "ci[0].begin",
  "ci[0].empty",
  "ci[0].erase(it",
  "ci[N",
  "ci[a",
  "ci[i",
  "ci[n",
  "ci[ni[i",
  "ci[u].begin",
  "ci[u].empty",
  "ci[u].erase(it",
  "ci[u].insert(cc.size",
  "ci[u].push_back(cc.size",
  "ci[v].empty",
  "cid",
  "cid++",
  "cii",
  "cin",
  "cin.eof",
  "cin.good",
  "cin.peek",
  "cin.tie",
  "cin.tie(0",
  "cin.tie(NULL",
  "cin.tie(null",
  "cin.tie(nullptr",
  "cin>>K",
  "cin>>T",
  "cin>>X>>Y",
  "cin>>a",
  "cin>>a>>b",
  "cin>>a>>x>>o>>b>>y",
  "cin>>a[i",
  "cin>>c",
  "cin>>c>>p>>x>>l",
  "cin>>c>>u>>v",
  "cin>>d",
  "cin>>d>>m",
  "cin>>e[i][j",
  "cin>>h>>c",
  "cin>>j>>k>>l",
  "cin>>k",
  "cin>>k>>u",
  "cin>>k>>v",
  "cin>>l",
  "cin>>l>>u",
  "cin>>m",
  "cin>>m>>l>>M>>L>>tm>>tl",
  "cin>>m>>l>>m>>l>>tm>>tl",
  "cin>>m>>n",
  "cin>>m>>n>>s1>>s2>>t",
  "cin>>n",
  "cin>>n>>d",
  "cin>>n>>k",
  "cin>>n>>m",
  "cin>>n>>m>>a>>b>>c>>d",
  "cin>>n>>m>>k",
  "cin>>n>>m>>l",
  "cin>>n>>m>>r",
  "cin>>n>>p",
  "cin>>n>>q",
  "cin>>n>>r",
  "cin>>n>>s>>r",
  "cin>>n>>t",
  "cin>>n>>x",
  "cin>>o",
  "cin>>p",
  "cin>>q",
  "cin>>q>>u",
  "cin>>r>>s",
  "cin>>s",
  "cin>>s1>>s2",
  "cin>>s>>t",
  "cin>>s>>y",
  "cin>>t",
  "cin>>u",
  "cin>>u;u--",
  "cin>>u>>v",
  "cin>>u>>v>>p",
  "cin>>u>>v>>w",
  "cin>>v",
  "cin>>w>>k",
  "cin>>x",
  "cin>>x1>>y1>>x2>>y2",
  "cin>>x;x--",
  "cin>>x>>n",
  "cin>>x>>o>>y",
  "cin>>x>>y",
  "cin>>x>>y>>d",
  "cin>>x>>y>>r",
  "cin>>x[i",
  "cin>>y>>x",
  "cin>>z>>n",
  "circuits(0",
  "circuits(int",
  "circuits(k",
  "circular",
  "cit",
  "cities",
  "cities[city",
  "cities[city1",
  "cities[city2",
  "cities_left_to_expand",
  "city",
  "city1",
  "city2",
  "ck1",
  "ck2",
  "ck3",
  "ckA",
  "ckB",
  "cka",
  "ckb",
  "cks",
  "clamped",
  "clarity",
  "class",
  "cle",
  "clear",
  "clearer",
  "clk",
  "clockwise",
  "closest",
  "closing",
  "closure",
  "cm",
  "cm2",
  "cmath",
  "cmp",
  "cmp(const",
  "cmp(s1[j",
  "cnt",
  "co",
  "co.",
  "coach",
  "coatBlack",
  "coatBlue",
  "coatChocolate",
  "coatColor",
  "coatColor.first",
  "coatColor.second",
  "coatColors",
  "coatColors[i",
  "coatCream",
  "coatLilac",
  "coatRed",
  "coatblack",
  "coatblue",
  "coatchocolate",
  "coatcolor",
  "coatcolor.first",
  "coatcolor.second",
  "coatcolors",
  "coatcolors[i",
  "coatcream",
  "coatlilac",
  "coatred",
  "code",
  "codeList",
  "codeList.push_back(digitArray",
  "codeforces",
  "codelist",
  "codelist.push_back(digitarray",
  "codes",
  "coefficient",
  "coefficients",
  "coefficients(nodeCount",
  "coefficients(nodecount",
  "coefficients[adjacentNode",
  "coefficients[adjacentnode",
  "coefficients[endingNode",
  "coefficients[endingnode",
  "coefficients[nodeIndex",
  "coefficients[nodeindex",
  "coefficients[startingNode",
  "coefficients[startingnode",
  "coin",
  "coin.first][j",
  "coin.second",
  "coinIndex",
  "coinindex",
  "coins",
  "coins(m",
  "coins[MAX_COIN",
  "coins[i",
  "coins[i].first",
  "coins[i].second",
  "coins[max_coin",
  "col",
  "col1",
  "col2",
  "colCheck(gridSize",
  "colCheck[matrix[j][i",
  "colConflicts",
  "colSum",
  "colcheck(gridsize",
  "colcheck[matrix[j][i",
  "colconflicts",
  "colinear",
  "colinearPointsCount",
  "colinearPointsCount++",
  "colinearpointscount",
  "colinearpointscount++",
  "collatz",
  "collatz(i",
  "collatz(int",
  "collect_edge_weights",
  "collinear",
  "collisions",
  "colo",
  "colo.",
  "color",
  "color(n",
  "color(numVertices",
  "color(numvertices",
  "color.assign(numVertices",
  "color.assign(numvertices",
  "color1",
  "color2",
  "colorGroupsCount",
  "colorGroupsCount++",
  "color[0",
  "color[current_vertex",
  "color[i",
  "color[neighbor",
  "color[u",
  "color[v",
  "color_to_assign",
  "colored",
  "colorgroupscount",
  "colorgroupscount++",
  "colors",
  "colors(array_size",
  "colors(n",
  "colors(numberOfSites",
  "colors(numberofsites",
  "colors.back",
  "colors.begin",
  "colors.end",
  "colors.pop_back",
  "colors.resize(n",
  "colors.size",
  "colors[0",
  "colors[currentColorIndex",
  "colors[current_node",
  "colors[currentcolorindex",
  "colors[i",
  "colors[neighbor",
  "colors[node",
  "cols",
  "colsum",
  "column",
  "column1",
  "column2",
  "columnStart",
  "columns",
  "columnstart",
  "combination",
  "combinations",
  "combinations(factors.size",
  "combinations.push_back(make_pair(triples[i][0",
  "combinations.push_back(make_pair(triples[i][1",
  "combinations[index].count(power",
  "combinations[index].insert(power",
  "combine",
  "combined",
  "come",
  "comidas",
  "comma",
  "command",
  "commands",
  "common",
  "common_ancestor_depth",
  "comparator",
  "compare",
  "compared",
  "comparelists(heada->next",
  "comparelists(node",
  "comparing",
  "comparison",
  "comparisonCount",
  "comparisonCount--",
  "comparison_value",
  "comparisoncount",
  "comparisoncount--",
  "compass",
  "complement",
  "complement.push_back('A",
  "complement.push_back('C",
  "complement.push_back('G",
  "complement.push_back('T",
  "complement.push_back('a",
  "complement.push_back('c",
  "complement.push_back('g",
  "complement.push_back('t",
  "complement.push_back(base",
  "complete",
  "completion_times[N",
  "completion_times[n",
  "completion_times[node",
  "completion_times[parent",
  "complex",
  "component",
  "component(N",
  "component(n",
  "component++",
  "component.assign(n",
  "component.back",
  "component.clear",
  "component.end",
  "component.pop_back",
  "component.push_back(neighbor",
  "component.push_back(node",
  "component.size",
  "component.size()]++",
  "componentCount",
  "componentId.begin",
  "componentId.end",
  "componentId.size",
  "componentId[MAXN",
  "componentId[node",
  "componentId[rootNode",
  "componentIndex",
  "componentSize",
  "component[current_node",
  "component[i",
  "component[j",
  "component[neighbor",
  "component[node",
  "component_count",
  "component_count++",
  "component_ids",
  "component_ids[i",
  "component_ids[node",
  "component_index",
  "component_index++",
  "component_number",
  "component_size",
  "component_size(26",
  "component_size[i",
  "component_size[u",
  "componentcount",
  "componentid.begin",
  "componentid.end",
  "componentid.size",
  "componentid[maxn",
  "componentid[node",
  "componentid[rootnode",
  "componentindex",
  "components",
  "components++",
  "components.back().push_back(i",
  "components.back().push_back(node",
  "components.begin",
  "components.end",
  "components.push_back(component",
  "components.push_back(scc",
  "components.push_back(vector_int",
  "components.push_back(vi",
  "components.size",
  "componentsCount",
  "componentsCount++",
  "components[0].push_back(node",
  "components[b[node]].size",
  "components[i",
  "components_count",
  "components_counter",
  "components_counter++",
  "componentscount",
  "componentscount++",
  "componentsize",
  "composite",
  "composite[N",
  "composite[i",
  "composite[j",
  "composite[n",
  "composites",
  "compression",
  "computation",
  "compute",
  "computeExclusiveOr(bool",
  "computeFlow(int",
  "computeFlow(source",
  "computed",
  "computeexclusiveor(bool",
  "computeflow(int",
  "computeflow(source",
  "computes",
  "computing",
  "con",
  "concatenated",
  "concept",
  "concurrently",
  "condition",
  "conditions",
  "confidence",
  "conflict",
  "conflictCounter",
  "conflictCounter++",
  "conflictCounter--",
  "conflictcounter",
  "conflictcounter++",
  "conflictcounter--",
  "conflicting",
  "conflicts",
  "conn",
  "conn.",
  "connect",
  "connected",
  "connectedComponents(countNodes",
  "connectedComponentsCount",
  "connectedComponents[i",
  "connectedComponents[u",
  "connectedComponents[v",
  "connectedNode",
  "connected_components",
  "connected_components++",
  "connected_edges",
  "connectedcomponents(countnodes",
  "connectedcomponents[i",
  "connectedcomponents[u",
  "connectedcomponents[v",
  "connectedcomponentscount",
  "connectednode",
  "connecting",
  "connection",
  "connections",
  "connectivity",
  "consecutive",
  "consider",
  "considering",
  "consistency",
  "consistent",
  "consists",
  "console",
  "const",
  "constant",
  "constants",
  "constexpr",
  "constraint",
  "constraints",
  "construct",
  "constructed",
  "construction",
  "consume",
  "contain",
  "container",
  "containers",
  "containing",
  "contains",
  "content",
  "contents",
  "contiguous",
  "continue",
  "continuously",
  "contradictions",
  "contradictory",
  "contribute",
  "contribution",
  "contributions",
  "convenience",
  "convention",
  "convention.\\n",
  "conversion",
  "convert",
  "converted",
  "converting",
  "converts",
  "coordinate",
  "coordinates",
  "coords",
  "copas",
  "copy",
  "copy(int",
  "copy(k",
  "copy(scc.begin",
  "copySegmentTree(0",
  "copySegmentTree(size_t",
  "copysegmenttree(0",
  "copysegmenttree(size_t",
  "corner",
  "corp",
  "corp.",
  "correct",
  "correctCount",
  "correctCount++",
  "correctcount",
  "correctcount++",
  "correction",
  "correctly",
  "correspond",
  "corresponding",
  "corresponds",
  "cos",
  "cos((90",
  "cos(c",
  "cos(horizontalAngle",
  "cos(horizontalangle",
  "cos(radians",
  "cos(t",
  "cos(theta",
  "cost",
  "cost>::infinity",
  "cost>::max",
  "cost_matrix[0][i",
  "cost_matrix[MAXN][MAXN",
  "cost_matrix[current][next",
  "cost_matrix[i][n",
  "cost_matrix[i][parents[i",
  "cost_matrix[maxn][maxn",
  "cost_matrix[miner][i",
  "cost_matrix[parents[i]][i",
  "cost_per_square_meter",
  "cost_so_far",
  "costs",
  "costs(M",
  "costs(duration",
  "costs(m",
  "costs.size",
  "costs[0",
  "costs[duration",
  "costs[i",
  "costs[j",
  "costs[j+1",
  "costs[o",
  "could",
  "count",
  "count(1",
  "count(begin(flippedBoards",
  "count(begin(flippedboards",
  "count(childIndex",
  "count(childindex",
  "count(int",
  "count(m.size",
  "count(s.begin",
  "count(student_type.begin",
  "count(x.begin",
  "count(y.begin",
  "count(y1",
  "count++",
  "count--",
  "count1",
  "count1++",
  "count2",
  "count2++",
  "countA",
  "countA++",
  "countB",
  "countB++",
  "countDistinctAnimals(animals",
  "countDistinctAnimals(const",
  "countElementsA",
  "countElementsB",
  "countFreeDays",
  "countFreeDays++",
  "countInRange(const",
  "countInRange(factors",
  "countInRange(remainingFactors",
  "countMap",
  "countMap.begin",
  "countMap.end",
  "countMap.erase(it",
  "countMap.erase(nextIter",
  "countMap.erase(prevIter",
  "countMap.lower_bound(queryIndex",
  "countMap[i",
  "countMap[k",
  "countMap[n",
  "countMap[nextIndex",
  "countNodes",
  "countRemainingElements",
  "countRows(ll",
  "countRows(n",
  "countStableStacks",
  "countStableStacks++",
  "countValidStrings",
  "countValidStrings++",
  "countWays(amount",
  "countWays(int",
  "countWays(targetSum",
  "count[10",
  "count[MAX_N",
  "count[c",
  "count[hash",
  "count[hash(x",
  "count[i",
  "count[max_n",
  "count[mostFrequentDigit",
  "count[mostfrequentdigit",
  "count[product",
  "count[x[--l",
  "count[x[r++",
  "count_a",
  "count_at_current_node",
  "count_black",
  "count_combinations",
  "count_combinations++",
  "count_divisors(int",
  "count_divisors(num",
  "count_doublings",
  "count_doublings++",
  "count_inversions2(IntVector",
  "count_inversions2(arr",
  "count_inversions2(intvector",
  "count_map",
  "count_map[second_string]++",
  "count_of_components",
  "count_of_ones",
  "count_ones(int",
  "count_ones(m",
  "count_unique_elements(IntVector",
  "count_unique_elements(arr",
  "count_unique_elements(intvector",
  "count_white",
  "count_x",
  "counta",
  "counta++",
  "countb",
  "countb++",
  "countdistinctanimals(animals",
  "countdistinctanimals(const",
  "counted",
  "countelementsa",
  "countelementsb",
  "counter",
  "counter++",
  "counterclockwise",
  "counters",
  "counters(components",
  "counters.end",
  "counters.push_back({i",
  "counters[result[x][y",
  "countfreedays",
  "countfreedays++",
  "counting",
  "countinrange(const",
  "countinrange(factors",
  "countinrange(remainingfactors",
  "countmap",
  "countmap.begin",
  "countmap.end",
  "countmap.erase(it",
  "countmap.erase(nextiter",
  "countmap.erase(previter",
  "countmap.lower_bound(queryindex",
  "countmap[i",
  "countmap[k",
  "countmap[n",
  "countmap[nextindex",
  "countnodes",
  "countremainingelements",
  "countries",
  "countries.end",
  "countries.find(country",
  "countries.insert(country",
  "countrows(ll",
  "countrows(n",
  "country",
  "country_index",
  "country_index--",
  "counts",
  "counts(100005",
  "counts(m.size",
  "counts(numberOfBallots",
  "counts(numberofballots",
  "counts.push_back(0",
  "counts.size",
  "counts[ballotIndex",
  "counts[ballotindex",
  "counts[currentIndex",
  "counts[currentindex",
  "counts[diff]++",
  "counts[get<1>(a[i",
  "counts[i",
  "counts[sentence",
  "counts[x[++l)]++",
  "counts[x[--l]]--",
  "counts[x[--r]]++",
  "counts[x[r++]]--",
  "countstablestacks",
  "countstablestacks++",
  "countvalidstrings",
  "countvalidstrings++",
  "countways(amount",
  "countways(int",
  "countways(targetsum",
  "countx(int",
  "countx(ly",
  "countx(ly++",
  "countx(ry--",
  "course",
  "courseName",
  "coursename",
  "courses",
  "coursesMap",
  "coursesMap.begin",
  "coursesMap.end",
  "coursesMap[courseName",
  "coursesmap",
  "coursesmap.begin",
  "coursesmap.end",
  "coursesmap[coursename",
  "cout",
  "cout.flush",
  "cout.precision(10",
  "cout.tie(NULL",
  "cout.tie(null",
  "cout<<\"#\\n",
  "cout<<\"+",
  "cout<<\"+\\n",
  "cout<<\"+\\n\\n\\n",
  "cout<<\"-1\\n",
  "cout<<\"/\"<<char(r[u])<<\"\\n",
  "cout<<\"0",
  "cout<<\"0\\n",
  "cout<<\"0\\n\\n",
  "cout<<\"Black",
  "cout<<\"Case",
  "cout<<\"City",
  "cout<<\"IMPOSSIBLE\\n",
  "cout<<\"Image",
  "cout<<\"Impossible\\n",
  "cout<<\"NOT",
  "cout<<\"NO\\n",
  "cout<<\"Problem",
  "cout<<\"THIS",
  "cout<<\"The",
  "cout<<\"There",
  "cout<<\"Throw",
  "cout<<\"To",
  "cout<<\"World",
  "cout<<\"\\n",
  "cout<<\"black",
  "cout<<\"case",
  "cout<<\"city",
  "cout<<\"escrito\\n",
  "cout<<\"image",
  "cout<<\"impossible\\n",
  "cout<<\"no\\n",
  "cout<<\"not",
  "cout<<\"possible\\n",
  "cout<<\"problem",
  "cout<<\"subnormal\\n",
  "cout<<\"the",
  "cout<<\"there",
  "cout<<\"this",
  "cout<<\"throw",
  "cout<<\"to",
  "cout<<\"world",
  "cout<<\"|\\n",
  "cout<<((h-1)/c+1)*10<<\"\\n",
  "cout<<((n&0xf)==0||(n&0xf)==1||(n&0xf)==4||(n&0xf)==9?\"NO",
  "cout<<((n&0xf)==0||(n&0xf)==1||(n&0xf)==4||(n&0xf)==9?\"no",
  "cout<<(a<=b?\"ROMANCE\\n\":\"PRINCIPIO\\n",
  "cout<<(a<=b?\"romance\\n\":\"principio\\n",
  "cout<<(a[k]>b[k]?s.substr(k",
  "cout<<(a[v].size()>=k?a[v][k-1]:0)<<\"\\n",
  "cout<<(e[find(u)]==find(v))<<\"\\n",
  "cout<<(e[x]?\"leave\\n\":\"stay\\n",
  "cout<<(m-1)/k+1<<endl",
  "cout<<(o?\"\":\"IM\")<<\"POSSIBLE\\n",
  "cout<<(o?\"\":\"im\")<<\"possible\\n",
  "cout<<(o?\"Possible\\n\":\"Not",
  "cout<<(o?\"Yes\\n\":\"No\\n",
  "cout<<(o?\"good\\n\":\"wrong\\n",
  "cout<<(o?\"possible\\n\":\"not",
  "cout<<(o?\"yes\\n\":\"no\\n",
  "cout<<(ok?\"SI\\n\":\"NO\\n",
  "cout<<(ok?\"si\\n\":\"no\\n",
  "cout<<(x%d?\"NO\\n\":\"YES\\n",
  "cout<<(x%d?\"no\\n\":\"yes\\n",
  "cout<<++z<<\"\\n",
  "cout<<-1<<endl",
  "cout<<0<<endl",
  "cout<<M<<\"\\n",
  "cout<<M<<endl",
  "cout<<N",
  "cout<<T<<\"\\n\\n",
  "cout<<a+b<<\"\\n",
  "cout<<a.size",
  "cout<<a<<\",\"<<b<<\"\\n",
  "cout<<a[i",
  "cout<<b.order_of_key(y",
  "cout<<b[c[y][x]]<<endl",
  "cout<<b[y][x]-1",
  "cout<<c",
  "cout<<c<<\"\\n",
  "cout<<c<<endl",
  "cout<<char(d",
  "cout<<char(r[w",
  "cout<<char(v",
  "cout<<d<<\"\\n",
  "cout<<d[k",
  "cout<<e.size",
  "cout<<e.size()<<endl",
  "cout<<e<<\"\\n",
  "cout<<e[i]+1",
  "cout<<endl",
  "cout<<fixed<<setprecision(2",
  "cout<<fixed<<setprecision(2)<<'$'<<s/12<<endl",
  "cout<<g",
  "cout<<i",
  "cout<<i+1",
  "cout<<i<<\"\\n",
  "cout<<i<<endl",
  "cout<<k*k*k-(k-2)*(k-2)*(k-2)<<\"\\n",
  "cout<<k+x<<endl",
  "cout<<k<<\"\\n",
  "cout<<k<<endl",
  "cout<<l",
  "cout<<l<<\"\\n",
  "cout<<m",
  "cout<<m<<\"\\n",
  "cout<<m<<endl",
  "cout<<m[s][y-1]<<endl",
  "cout<<n",
  "cout<<n*(n+1)/2",
  "cout<<n/3",
  "cout<<n<<endl",
  "cout<<p[i]+1",
  "cout<<q[x[i",
  "cout<<r.size()<<\"\\n",
  "cout<<r<<endl",
  "cout<<s",
  "cout<<s.substr(0,i+2)<<\"\\n",
  "cout<<s<<\"\\n",
  "cout<<s<<\"s\\n",
  "cout<<s<<endl",
  "cout<<s[find(u)]<<\"\\n",
  "cout<<s[k*i+j",
  "cout<<s[x",
  "cout<<t",
  "cout<<t<<\"\\n\\n",
  "cout<<t[k][26]<<endl",
  "cout<<u",
  "cout<<u+1",
  "cout<<w",
  "cout<<x*2",
  "cout<<x.size",
  "cout<<x<<\"\\n",
  "cout<<x<<endl",
  "cout<<y+1",
  "cover",
  "covered",
  "cow",
  "coz",
  "cr",
  "crane",
  "crate",
  "cream",
  "create",
  "create_components",
  "created",
  "creating",
  "creation",
  "critical",
  "cross",
  "crossing",
  "crush",
  "crushes",
  "cs",
  "cs--",
  "cs.clear",
  "cs.count('A",
  "cs.count('C",
  "cs.count('G",
  "cs.count('a",
  "cs.count('c",
  "cs.count('g",
  "cs.insert(c",
  "cs.push_back({triples[i][0",
  "cs.push_back({triples[i][1",
  "cs.size",
  "cses",
  "cses.fi",
  "cstdio",
  "cstdlib",
  "ct.",
  "cts",
  "cuba",
  "cube",
  "cube(int",
  "cumulative",
  "cup",
  "cupContents",
  "cupContents(n",
  "cupContents.end",
  "cupContents[i",
  "cupName",
  "cupcontents",
  "cupcontents(n",
  "cupcontents.end",
  "cupcontents[i",
  "cupinfo",
  "cupname",
  "cups",
  "cups(numberOfCups",
  "cups(numberofcups",
  "cups.end",
  "cups[i",
  "cur_dist",
  "cur_index",
  "cur_node",
  "cur_perm",
  "cur_perm[op.second",
  "curr",
  "curr.first",
  "curr.second",
  "currDist",
  "currNode",
  "curr_index",
  "curr_max",
  "curr_nodes",
  "curr_nodes.push_back(m[c",
  "currdist",
  "currencies",
  "currency",
  "currencyMap",
  "currencyMap[currencyName",
  "currencyMap[sourceCurrencyName",
  "currencyMap[targetCurrencyName",
  "currencyName",
  "currencymap",
  "currencymap[currencyname",
  "currencymap[sourcecurrencyname",
  "currencymap[targetcurrencyname",
  "currencyname",
  "current",
  "current++",
  "current->next",
  "current->next->data",
  "current->next->next",
  "current->next->prev",
  "current.cities_left_to_expand",
  "current.city",
  "current.cost",
  "current.d",
  "current.matrix",
  "current.matrix.size",
  "current.remaining_cities.size",
  "current.remaining_cities[i",
  "current.remaining_cities[j",
  "current.stack.begin",
  "current.stack.end",
  "current.x",
  "current.y",
  "currentA",
  "currentA->data",
  "currentA->next",
  "currentAnimal",
  "currentApple",
  "currentB",
  "currentB->next",
  "currentBlockOnStack1",
  "currentBlockOnStack2",
  "currentBlockOnStack3",
  "currentCandy",
  "currentCase",
  "currentChar",
  "currentCharCount",
  "currentCharCount++",
  "currentColor",
  "currentColorIndex",
  "currentComparison",
  "currentComparison.substr(1",
  "currentComparison[0",
  "currentDepth",
  "currentDirection",
  "currentDistance",
  "currentElement",
  "currentInListOne",
  "currentInListOne->data",
  "currentInListOne->next",
  "currentInListTwo",
  "currentInListTwo->next",
  "currentIndex",
  "currentIndex++",
  "currentJumper",
  "currentLow",
  "currentNode",
  "currentNode--",
  "currentNodeX",
  "currentNodeY",
  "currentNumber",
  "currentNumber++",
  "currentOrientation",
  "currentPart",
  "currentPointX",
  "currentPointY",
  "currentPosition",
  "currentPositionToCheck",
  "currentRoom",
  "currentRowEnd",
  "currentSequence",
  "currentSequence.end",
  "currentSequence.find(numbers[i",
  "currentSequence.insert(numbers[i",
  "currentState",
  "currentString",
  "currentSum",
  "currentTaskDurationSum",
  "currentTaskEndTime",
  "currentTemp",
  "currentTerm",
  "currentTest",
  "currentTest++",
  "currentTestCase",
  "currentTestCase++",
  "currentTime",
  "currentValue",
  "currentVertex",
  "currentWord",
  "currentWord.length",
  "currentWord.substr(0",
  "currentWord[wordLength",
  "currentX",
  "currentX++",
  "currentX--",
  "currentY",
  "currentY++",
  "currentY--",
  "current_0",
  "current_area",
  "current_base",
  "current_beats_per_minute",
  "current_case",
  "current_case++",
  "current_char",
  "current_chunk_sum",
  "current_color",
  "current_color_key",
  "current_color_key++",
  "current_cut",
  "current_diff",
  "current_distance_traveled",
  "current_element",
  "current_gear",
  "current_index",
  "current_index++",
  "current_index--",
  "current_matrix",
  "current_max",
  "current_multiplier",
  "current_node",
  "current_non_zero_count",
  "current_non_zero_count++",
  "current_number",
  "current_number++",
  "current_output",
  "current_part{1",
  "current_people",
  "current_permutation",
  "current_permutation(9",
  "current_permutation.end",
  "current_permutation[0",
  "current_permutation[1",
  "current_permutation[2",
  "current_position",
  "current_position++",
  "current_printer_position",
  "current_printhead_size",
  "current_row",
  "current_row[81",
  "current_sequence",
  "current_sequence++",
  "current_set(5",
  "current_set.end",
  "current_set[j",
  "current_slope",
  "current_speed",
  "current_step",
  "current_stop",
  "current_subarray_sum",
  "current_subtotal",
  "current_sum",
  "current_test",
  "current_test++",
  "current_tile",
  "current_time",
  "current_time++",
  "current_value",
  "current_values",
  "current_values.erase(it",
  "current_values.insert({a",
  "current_values.insert({current_number",
  "current_values.lower_bound(make_pair(current_number",
  "current_vertex",
  "current_weight",
  "current_x",
  "current_y",
  "current_zero_count",
  "current_zero_count++",
  "currenta",
  "currenta->data",
  "currenta->next",
  "currentanimal",
  "currentapple",
  "currentb",
  "currentb->next",
  "currentblockonstack1",
  "currentblockonstack2",
  "currentblockonstack3",
  "currentcandy",
  "currentcase",
  "currentchar",
  "currentcharcount",
  "currentcharcount++",
  "currentcolor",
  "currentcolorindex",
  "currentcomparison",
  "currentcomparison.substr(1",
  "currentcomparison[0",
  "currentdepth",
  "currentdirection",
  "currentdistance",
  "currentelement",
  "currentindex",
  "currentindex++",
  "currentinlistone",
  "currentinlistone->data",
  "currentinlistone->next",
  "currentinlisttwo",
  "currentinlisttwo->next",
  "currentjumper",
  "currentlow",
  "currently",
  "currentnode",
  "currentnode--",
  "currentnodex",
  "currentnodey",
  "currentnumber",
  "currentnumber++",
  "currentorientation",
  "currentpart",
  "currentpointx",
  "currentpointy",
  "currentposition",
  "currentpositiontocheck",
  "currentroom",
  "currentrowend",
  "currentsequence",
  "currentsequence.end",
  "currentsequence.find(numbers[i",
  "currentsequence.insert(numbers[i",
  "currentstate",
  "currentstring",
  "currentsum",
  "currenttaskdurationsum",
  "currenttaskendtime",
  "currenttemp",
  "currentterm",
  "currenttest",
  "currenttest++",
  "currenttestcase",
  "currenttestcase++",
  "currenttime",
  "currentvalue",
  "currentvertex",
  "currentword",
  "currentword.length",
  "currentword.substr(0",
  "currentword[wordlength",
  "currentx",
  "currentx++",
  "currentx--",
  "currenty",
  "currenty++",
  "currenty--",
  "currnode",
  "custom",
  "custom_merge_function",
  "custom_merge_function(a",
  "custom_merge_function(left",
  "custom_merge_function(right",
  "customer",
  "customer_id",
  "cut",
  "cut_edges",
  "cut_edges.back",
  "cut_edges.emplace_back(vertex",
  "cut_edges.pop_back",
  "cutedge",
  "cutoff",
  "cuz",
  "cw",
  "cx",
  "cy",
  "cycle",
  "cycles",
  "cycles.push_back(u",
  "cycles[l",
  "cyclic",
  "c\u2019m",
  "d",
  "d']++",
  "d'th",
  "d(0",
  "d(1",
  "d(100001",
  "d(3",
  "d(4",
  "d(8",
  "d(8,vi(8)),t(8,vi(8",
  "d(N",
  "d(T+1,-1",
  "d(X",
  "d(a",
  "d(b",
  "d(c",
  "d(d",
  "d(g",
  "d(i",
  "d(int",
  "d(j",
  "d(k",
  "d(l",
  "d(ll",
  "d(m",
  "d(n",
  "d(n,-10000000),s(n",
  "d(p",
  "d(r",
  "d(s",
  "d(t+1,-1",
  "d(tn",
  "d(u",
  "d(v",
  "d(x",
  "d(y",
  "d(z",
  "d)",
  "d)%X",
  "d)%x",
  "d))/d",
  "d)*(x",
  "d)*x",
  "d),x",
  "d)/",
  "d)/2",
  "d)/x",
  "d):x.xxxx(x",
  "d)=x",
  "d)[d",
  "d)][x",
  "d)b",
  "d*x",
  "d*x+d",
  "d*x/d",
  "d*xx",
  "d*xxxx+xxxx)/d",
  "d++",
  "d+1",
  "d+e",
  "d+i*i",
  "d+x%d<<\"\\x",
  "d,d",
  "d,d,d",
  "d,d,d,d,dd,dd,dd,dd,dd,dd,dd,dd,dd,dd,dd",
  "d,d},{d,d},{d,d},{d,d},{d,d},{d,d},{d,d},{d,d},{d,d},{d,d},{d,d},{d,d",
  "d-",
  "d-%d-%d",
  "d-)",
  "d--",
  "d-1",
  "d-1)*(y",
  "d-X",
  "d.",
  "d.c.",
  "d.clear",
  "d.count(a[j",
  "d.count(z",
  "d.d",
  "d.dd",
  "d.ddd",
  "d.dddd",
  "d.end",
  "d.find(y.first",
  "d.insert(a[j",
  "d.insert(k",
  "d.insert(z",
  "d.m",
  "d.pop_back",
  "d.push_back(*x",
  "d.push_back(9",
  "d.push_back(a",
  "d.push_back(a[i",
  "d.push_back(b",
  "d.size",
  "d.size();i++)cout<<d[i",
  "d.x",
  "d/%d/%d",
  "d1",
  "d1,d2",
  "d2",
  "d27",
  "d2i(int",
  "d2i(y1",
  "d2i(y2",
  "d3",
  "d:%d",
  "d:%d:%d",
  "d:%d:%d\\n",
  "d:%d\\n",
  "d;;X++",
  "d;;x++",
  "d;d--",
  "d;x",
  "d<<\"\\x",
  "d=",
  "d=0",
  "d=1",
  "d=2",
  "d=360",
  "dAns",
  "dIt",
  "dSum",
  "dX",
  "dXX",
  "d[(j",
  "d[*k",
  "d[--j]--",
  "d[0",
  "d[0].push_back(k",
  "d[0]=0",
  "d[1",
  "d[10",
  "d[100001",
  "d[500001",
  "d[6",
  "d[8",
  "d[N",
  "d[X+1",
  "d[a",
  "d[a[u",
  "d[a[u]]+1",
  "d[ay][ax",
  "d[b",
  "d[c",
  "d[c][i",
  "d[centroid_candidate",
  "d[currentNode][currentNode",
  "d[currentNode][i",
  "d[currentnode][currentnode",
  "d[currentnode][i",
  "d[e.u",
  "d[i",
  "d[i-1]*2%M",
  "d[i-1]*2%m",
  "d[i-1]*2)%M",
  "d[i-1]*2)%m",
  "d[i]++",
  "d[i]-d[l[c]-1])%M",
  "d[i]-d[l[c]-1])%m",
  "d[i].push_back(f",
  "d[i].resize(m",
  "d[i].size",
  "d[i][currentNode",
  "d[i][currentnode",
  "d[i][i",
  "d[i][j",
  "d[i][k",
  "d[i][l",
  "d[j",
  "d[j]++",
  "d[j]--",
  "d[j][i",
  "d[k",
  "d[k][j",
  "d[k][u",
  "d[k][v",
  "d[l[c]-1])%M",
  "d[l[c]-1])%m",
  "d[m",
  "d[n",
  "d[n]-1)%M",
  "d[n]-1)%m",
  "d[num",
  "d[o",
  "d[p",
  "d[parent",
  "d[r][c",
  "d[reciprocal]++",
  "d[rs][cs",
  "d[s",
  "d[s[0]],v",
  "d[s[1",
  "d[s];v",
  "d[s]=k++",
  "d[t",
  "d[ti[u]]=min(d[ti[u]],1+d[i",
  "d[tn",
  "d[u",
  "d[u]&&!d[v",
  "d[u]*b",
  "d[u]-d[v",
  "d[u]=k",
  "d[u]=min(d[u],d[v]-1",
  "d[u]=w",
  "d[u]>d[v",
  "d[u][v",
  "d[u][v]=d[i][j]+1",
  "d[v",
  "d[v]++",
  "d[v]>d[u",
  "d[v][u",
  "d[x",
  "d[x+1",
  "d[x-1]++",
  "d[x]++",
  "d[x]--",
  "d[y",
  "d[y]++",
  "d[y][x",
  "d[z",
  "d\\n",
  "d\\n\",T",
  "d\\n\",t",
  "d\\n\\n",
  "d\\n\\n\",t+1",
  "d\\x",
  "d\\xd",
  "d]++",
  "d].xxx",
  "d].xxxx",
  "d].xxxx(*xx",
  "d].xxxx(d",
  "d].xxxx(x",
  "d].xxxx(xx[x",
  "d].xxxx_xxxx(x",
  "d].xxxx_xxxx({x",
  "d].xxxx_xxxx({xxxxXxx[xxxxd",
  "d].xxxx_xxxx({xxxx[xxxxd",
  "d][(x",
  "d][X",
  "d][XXX_XXXX",
  "d][d",
  "d][x",
  "d][x[x",
  "d][x].xxxx(x",
  "d][x].xxxx(xxx_xxxx",
  "d][x][d",
  "d][xxx",
  "d][xxxX",
  "d][xxx].xxxx",
  "d][xxx_xxxx",
  "d][xxxx",
  "d][xxxxX",
  "d][xxxxXxxxx",
  "d][xxxxXxxxx][d",
  "d][xxxx[x",
  "d][xxxx[xxxx",
  "d][xxxx][d",
  "d]].xxxx_xxxx(x",
  "d]][x",
  "d^(xxxx",
  "d^x",
  "d_d",
  "d_m",
  "d_r",
  "d_s",
  "d_t",
  "d_x",
  "d_y",
  "da",
  "dag",
  "dal",
  "dans",
  "dare",
  "darts",
  "dartsThrown",
  "dartsthrown",
  "das",
  "data",
  "data[200001",
  "data[4",
  "data[MAX_N",
  "data[i",
  "data[i][0].first",
  "data[i][0].second",
  "data[max_n",
  "data[node",
  "data[node][0",
  "data[node][0].first",
  "data[node][0].second",
  "data[node][1",
  "data[x",
  "date",
  "date2offset(int",
  "date2offset(year",
  "dateTimeToMinutes(int",
  "dateTimeToMinutes(yyyy",
  "dateToDays(int",
  "dateToDays(year",
  "dates",
  "dates(month",
  "dates[i",
  "datetimetominutes(int",
  "datetimetominutes(yyyy",
  "datetodays(int",
  "datetodays(year",
  "day",
  "day++",
  "day2offset(day",
  "day2offset(int",
  "dayFrequency[6",
  "dayFrequency[i",
  "dayFrequency[itemNumber",
  "day_of_birth1",
  "day_of_birth2",
  "dayfrequency[6",
  "dayfrequency[i",
  "dayfrequency[itemnumber",
  "days",
  "days(number_of_days",
  "daysInMonth",
  "daysInMonth[13",
  "daysInMonth[2",
  "daysInMonth[2]++",
  "daysInMonth[i",
  "daysInMonth[month",
  "daysInMonths[1",
  "daysInMonths[12",
  "daysInMonths[m",
  "daysToDays(day",
  "daysToDays(int",
  "daysToMonth(int",
  "daysToMonth(totalDays",
  "daysToYear(int",
  "daysToYear(totalDays",
  "days[12",
  "days[1]++",
  "days[i",
  "days[i-1",
  "days[j-1",
  "daysinmonth",
  "daysinmonth[13",
  "daysinmonth[2",
  "daysinmonth[2]++",
  "daysinmonth[i",
  "daysinmonth[month",
  "daysinmonths[1",
  "daysinmonths[12",
  "daysinmonths[m",
  "daystodays(day",
  "daystodays(int",
  "daystomonth(int",
  "daystomonth(totaldays",
  "daystoyear(int",
  "daystoyear(totaldays",
  "dc",
  "dc[i",
  "dd",
  "dd\"[x[x",
  "dd+x*dd+x",
  "dd.d",
  "dd;;x++",
  "ddd",
  "ddd.d",
  "dddXX",
  "dddd",
  "dddd.d",
  "ddddX",
  "ddddXX",
  "ddddXXXX",
  "ddddx",
  "ddddxx",
  "ddddxxxx",
  "dddxx",
  "dds",
  "ddx",
  "ddx.x",
  "ddx.x.",
  "ddxx",
  "de1",
  "de2",
  "deA",
  "deB",
  "deX",
  "deY",
  "dea",
  "deal",
  "dealing",
  "deals",
  "deb",
  "dec",
  "dec.",
  "december",
  "decide",
  "decimal",
  "decimalNumber",
  "decimal\\n",
  "decimalnumber",
  "deck",
  "decks",
  "declaration",
  "declarations",
  "declare",
  "declared",
  "deconstruct",
  "decrease",
  "decreases",
  "decreasing",
  "decreasing\\n",
  "decrement",
  "ded",
  "dee",
  "def",
  "default",
  "default_random_engine",
  "define",
  "defined",
  "defining",
  "definition",
  "definitions",
  "degree",
  "degree(n",
  "degreeIndex",
  "degree[i",
  "degree[u",
  "degree_counter",
  "degree_counter++",
  "degreeindex",
  "degrees",
  "degrees(128",
  "degrees(n",
  "degrees[MAX_N",
  "degrees[N",
  "degrees[ch",
  "degrees[i",
  "degrees[max_n",
  "degrees[n",
  "degrees[neighbor",
  "degrees[node",
  "degrees[parent",
  "degrees[parent]++",
  "degrees[u",
  "del",
  "del.",
  "delete(node",
  "deletion",
  "delimiter",
  "delta",
  "demand",
  "den",
  "denominator",
  "denotes",
  "depending",
  "depth",
  "depth(k",
  "depth.resize(n",
  "depthFirstSearch",
  "depthFirstSearch(0",
  "depthFirstSearch(const",
  "depthFirstSearch(g",
  "depthFirstSearch(i",
  "depthFirstSearch(int",
  "depthFirstSearch(neighbor",
  "depthFirstSearch(next",
  "depthFirstSearch(v",
  "depthFirstSearch1(i",
  "depthFirstSearch1(int",
  "depthFirstSearch1(neighbor",
  "depthFirstSearch2(int",
  "depthFirstSearch2(neighbor",
  "depthFirstSearch2(node",
  "depthFirstSearchHelper(0",
  "depthFirstSearchHelper(int",
  "depthFirstSearchHelper(next",
  "depth[i",
  "depth[j",
  "depth[k][u",
  "depth[k][v",
  "depth[u",
  "depth[v",
  "depth_first_search1(group[node",
  "depth_first_search1(i",
  "depth_first_search1(int",
  "depth_first_search1(neighbor",
  "depth_first_search2(a[i",
  "depth_first_search2(current_node",
  "depth_first_search2(int",
  "depth_first_search2(neighbor",
  "depth_first_search_components(i",
  "depth_first_search_components(int",
  "depth_first_search_components(neighbor",
  "depth_first_search_strong_components(i",
  "depth_first_search_strong_components(int",
  "depth_first_search_strong_components(neighbor",
  "depthfirstsearch",
  "depthfirstsearch(0",
  "depthfirstsearch(const",
  "depthfirstsearch(g",
  "depthfirstsearch(i",
  "depthfirstsearch(int",
  "depthfirstsearch(neighbor",
  "depthfirstsearch(next",
  "depthfirstsearch(v",
  "depthfirstsearch1(i",
  "depthfirstsearch1(int",
  "depthfirstsearch1(neighbor",
  "depthfirstsearch2(int",
  "depthfirstsearch2(neighbor",
  "depthfirstsearch2(node",
  "depthfirstsearchhelper(0",
  "depthfirstsearchhelper(int",
  "depthfirstsearchhelper(next",
  "deque",
  "dequeue",
  "der",
  "des",
  "desayunos",
  "descendants",
  "descending",
  "desconocido",
  "description",
  "desired",
  "destination",
  "destination(n",
  "destination[(j",
  "destination[0",
  "destination[j",
  "destination_x",
  "destination_y",
  "destroyed.\\n",
  "details",
  "detected",
  "detected.\\n",
  "determine",
  "determined",
  "dex",
  "dey",
  "dfs",
  "dfs(0",
  "dfs(1",
  "dfs(a",
  "dfs(a[u",
  "dfs(a[u],k",
  "dfs(adjacentNode",
  "dfs(adjacentnode",
  "dfs(b",
  "dfs(ci[v][0",
  "dfs(const",
  "dfs(g",
  "dfs(g[c][i",
  "dfs(g[u][0",
  "dfs(graph",
  "dfs(grid_rows",
  "dfs(h",
  "dfs(i",
  "dfs(i+1,j",
  "dfs(i,-1",
  "dfs(i,0",
  "dfs(i-1,j",
  "dfs(int",
  "dfs(it->first",
  "dfs(j",
  "dfs(m[s",
  "dfs(n",
  "dfs(neighbor",
  "dfs(neighbour",
  "dfs(newX",
  "dfs(new_x",
  "dfs(newx",
  "dfs(node",
  "dfs(ny",
  "dfs(order[0",
  "dfs(person",
  "dfs(r",
  "dfs(reverseGraph",
  "dfs(reversegraph",
  "dfs(root",
  "dfs(row",
  "dfs(s",
  "dfs(startingNode",
  "dfs(startingnode",
  "dfs(u",
  "dfs(u-1",
  "dfs(v",
  "dfs(vvi",
  "dfs(x",
  "dfs(y",
  "dfs(z",
  "dfs1",
  "dfs1(0",
  "dfs1(g[i",
  "dfs1(i",
  "dfs1(int",
  "dfs1(j",
  "dfs1(neighbor",
  "dfs1(u",
  "dfs1(v",
  "dfs1=[&](int",
  "dfs2",
  "dfs2(*it",
  "dfs2(0",
  "dfs2(a[i",
  "dfs2(artificial_vertex[i",
  "dfs2(i",
  "dfs2(i,0",
  "dfs2(int",
  "dfs2(j",
  "dfs2(k",
  "dfs2(neighbor",
  "dfs2(newX",
  "dfs2(newx",
  "dfs2(node",
  "dfs2(s",
  "dfs2(u",
  "dfs2(v",
  "dfs2(x",
  "dfs2(z",
  "dfs2=[&](int",
  "dfs3",
  "dfs3(component[0",
  "dfs3(i",
  "dfs3(int",
  "dfs3(j",
  "dfs3(neighbor",
  "dfs3(v",
  "dfs3(x[0",
  "dfs4(i",
  "dfs4(int",
  "dfs4(v",
  "dfs=[&](int",
  "dfsChain(k",
  "dfsChain[0][u",
  "dfsChain[k][u",
  "dfsChain[k][v",
  "dfsChain[level",
  "dfsChain[level].resize(m",
  "dfsChain[level][j",
  "dfs_2",
  "dfs_2(neighbor",
  "dfs_2(sorted_nodes[i",
  "dfs_chain",
  "dfs_chain.push_back({u",
  "dfs_util(int",
  "dfs_util(neighbor",
  "dfs_util(node",
  "dfschain(k",
  "dfschain[0][u",
  "dfschain[k][u",
  "dfschain[k][v",
  "dfschain[level",
  "dfschain[level].resize(m",
  "dfschain[level][j",
  "dge",
  "di",
  "di(n",
  "di[b",
  "di[n",
  "dia",
  "diabolico\\n",
  "diagonal",
  "diagonalSum",
  "diagonally",
  "diagonals",
  "diagonalsum",
  "dice",
  "dictionary",
  "dictionary.count(inputLine",
  "dictionary.count(inputline",
  "dictionary[inputLine",
  "dictionary[inputline",
  "dictionary[word2",
  "did",
  "die1",
  "die2",
  "died\\n",
  "diff",
  "diff_sum(int",
  "diff_sum(m[y",
  "differ",
  "difference",
  "difference(int",
  "difference++",
  "difference--",
  "differences",
  "different",
  "differential",
  "digit",
  "digitArray",
  "digitArray(inputString.size",
  "digitArray.end",
  "digitArray.size",
  "digitArray[i",
  "digitCount",
  "digitCounts",
  "digitCounts(10",
  "digitCounts[0",
  "digitCounts[digit",
  "digitSum(ll",
  "digital",
  "digitalSequence(sequenceLength",
  "digitalSequence[currentPositionToCheck",
  "digitalSequence[i",
  "digitalSequence[previousPositionToCheck",
  "digitalSequence[sequenceLength",
  "digitalsequence(sequencelength",
  "digitalsequence[currentpositiontocheck",
  "digitalsequence[i",
  "digitalsequence[previouspositiontocheck",
  "digitalsequence[sequencelength",
  "digitarray",
  "digitarray(inputstring.size",
  "digitarray.end",
  "digitarray.size",
  "digitarray[i",
  "digitcount",
  "digitcounts",
  "digitcounts(10",
  "digitcounts[0",
  "digitcounts[digit",
  "digits",
  "digits.size",
  "digitsCount(128",
  "digitsCount[c]++",
  "digitsCount[i",
  "digits[i",
  "digits[j",
  "digits[solutionOrder[i",
  "digits[solutionorder[i",
  "digits_a",
  "digits_a.end",
  "digits_a.push_back(9",
  "digits_a.push_back(a",
  "digits_b",
  "digits_b.end",
  "digits_b.push_back(9",
  "digits_b.push_back(b",
  "digits_count",
  "digits_count++",
  "digitscount(128",
  "digitscount[c]++",
  "digitscount[i",
  "digitsum(ll",
  "dii",
  "dijkstra",
  "dijkstra(g",
  "dijkstra(graph",
  "dijkstra(h",
  "dimensional",
  "dimensions",
  "dinner",
  "dio",
  "dir",
  "dir[0",
  "dir[1",
  "directed",
  "direction",
  "direction.c_str",
  "direction.length",
  "directionVectors[4][2",
  "directionVectors[currentDirection][0",
  "directionVectors[currentDirection][1",
  "directionVectors[currentDirection][1]][x",
  "direction[i",
  "directional",
  "directions",
  "directions[][2",
  "directions[direction",
  "directions{{-1",
  "directionvectors[4][2",
  "directionvectors[currentdirection][0",
  "directionvectors[currentdirection][1",
  "directionvectors[currentdirection][1]][x",
  "directly",
  "dirs",
  "dirs[i",
  "dis(1",
  "dis(generator",
  "dis(l",
  "disable",
  "disabling",
  "discard",
  "discarded",
  "disconnected",
  "dishonest.\\n",
  "dishonest\\n",
  "disjoint",
  "dist",
  "dist(_n",
  "dist(int",
  "dist(n",
  "dist(rows",
  "dist.assign(n",
  "dist.end",
  "dist.resize(nodes",
  "distAtNode",
  "dist[0",
  "dist[adj_node",
  "dist[cur_node",
  "dist[currentNode",
  "dist[current_node",
  "dist[currentnode",
  "dist[e.to",
  "dist[e.u",
  "dist[endRow][endCol",
  "dist[endrow][endcol",
  "dist[i",
  "dist[n",
  "dist[neighbor",
  "dist[newRow][newCol",
  "dist[newrow][newcol",
  "dist[nextNode",
  "dist[nextnode",
  "dist[nodes",
  "dist[s",
  "dist[src",
  "dist[startRow][startCol",
  "dist[startrow][startcol",
  "dist[t",
  "dist[v",
  "distance",
  "distance(8",
  "distance(_nodes",
  "distance(c",
  "distance(c.begin",
  "distance(components.begin",
  "distance(numbers.begin",
  "distance.end",
  "distanceMatrix(nodeCount",
  "distanceMatrix[0][previousNode",
  "distanceMatrix[destination][source",
  "distanceMatrix[i][j",
  "distanceMatrix[i][k",
  "distanceMatrix[k][j",
  "distanceMatrix[source][destination",
  "distance[0][p",
  "distance[a][b",
  "distance[b][a",
  "distance[currentVertex",
  "distance[currentvertex",
  "distance[edge.to",
  "distance[endRow][endCol",
  "distance[endrow][endcol",
  "distance[i",
  "distance[i][i",
  "distance[i][j",
  "distance[i][k",
  "distance[k][j",
  "distance[newRow][newCol",
  "distance[newrow][newcol",
  "distance[previousVertices[i",
  "distance[previousvertices[i",
  "distance[source",
  "distancematrix(nodecount",
  "distancematrix[0][previousnode",
  "distancematrix[destination][source",
  "distancematrix[i][j",
  "distancematrix[i][k",
  "distancematrix[k][j",
  "distancematrix[source][destination",
  "distances",
  "distances(T",
  "distances(dists",
  "distances(n",
  "distances(nodes",
  "distances(nodesCount",
  "distances(nodescount",
  "distances(t",
  "distances(vector",
  "distances.size",
  "distances[0",
  "distances[a",
  "distances[adjacent",
  "distances[b",
  "distances[i",
  "distances[i][i",
  "distances[i][j",
  "distances[i][size",
  "distances[initial_y][initial_x",
  "distances[j][i",
  "distances[k",
  "distances[ny][nx",
  "distances[size][i",
  "distances[size][size",
  "distances[t",
  "distances[u",
  "distances[v",
  "distances[y",
  "distances[y][x",
  "distatnode",
  "distinceSumUpTo(x",
  "distinceSumUpTo[0",
  "distinceSumUpTo[currentNumber",
  "distinceSumUpTo[x",
  "distincesumupto(x",
  "distincesumupto[0",
  "distincesumupto[currentnumber",
  "distincesumupto[x",
  "distinct",
  "distinctFactors",
  "distinctFactors.insert(factor",
  "distinctFactors.insert(prime",
  "distinctNumbers",
  "distinctNumbers.insert(remainder",
  "distinctNumbers.size",
  "distinct_factors",
  "distinct_factors.end",
  "distinct_factors.push_back(power",
  "distinct_factors.size",
  "distinct_factors[i",
  "distinctfactors",
  "distinctfactors.insert(factor",
  "distinctfactors.insert(prime",
  "distinctnumbers",
  "distinctnumbers.insert(remainder",
  "distinctnumbers.size",
  "dists",
  "dists(mice",
  "dists.size",
  "dists[i",
  "dit",
  "divide",
  "divideStick(0",
  "divideStick(i",
  "divideStick(int",
  "divided",
  "divides",
  "dividestick(0",
  "dividestick(i",
  "dividestick(int",
  "dividing",
  "divisible",
  "division",
  "divisor",
  "divisorCount",
  "divisorCounts(N",
  "divisorCounts[j]++",
  "divisorCounts[numberToCheck",
  "divisorcount",
  "divisorcounts(n",
  "divisorcounts[j]++",
  "divisorcounts[numbertocheck",
  "divisors",
  "divisors(c",
  "divisors(combinations",
  "divisors(f",
  "divisors(int",
  "divisors(vi",
  "divisors(vsi",
  "divisors(x",
  "divisors.insert(power",
  "divisors.resize(0",
  "divisors[MAX_N",
  "divisors[index].size",
  "divisors[index][k",
  "divisors[max_n",
  "divisors[n].push_back(i",
  "divisors[n].push_back(n",
  "dk",
  "dle",
  "dm.",
  "dna",
  "dnaStrand",
  "dnastrand",
  "do",
  "doctor1",
  "doctor1.size",
  "doctor1[i",
  "doctor2",
  "doctors",
  "dodecahedron",
  "does",
  "doin",
  "doin'",
  "doing",
  "doin\u2019",
  "done",
  "doomed!\\n",
  "dot",
  "dots",
  "double",
  "double(100",
  "double(a",
  "double(b",
  "double(c",
  "double(d",
  "double(i",
  "double(k",
  "double(m",
  "double(n",
  "double(q",
  "double(r",
  "double(s",
  "double)i",
  "double)j",
  "double)k",
  "double>(100",
  "double>(above_average_count",
  "double>(height",
  "double>(i",
  "double>(index",
  "double>(n",
  "double>(p[i",
  "double>(pi[n",
  "double>(points",
  "double>(previous_time",
  "double>(seconds",
  "double>(sum",
  "double>(u[k",
  "dow",
  "down",
  "downwards",
  "dox",
  "dp",
  "dp(MAX_COIN",
  "dp(N",
  "dp(capacity",
  "dp(l",
  "dp(max_coin",
  "dp(n",
  "dp(n+1",
  "dp(n+1,INF",
  "dp(n+1,inf",
  "dp(number_of_test_cases",
  "dp(t+1",
  "dp.resize(n",
  "dp1",
  "dp1(n",
  "dp1[i",
  "dp1[u",
  "dp1[z",
  "dp2",
  "dp2(n",
  "dp2[0",
  "dp2[u",
  "dp2[z",
  "dp[(1",
  "dp[0",
  "dp[0]=0",
  "dp[0][0",
  "dp[0][0].insert(0",
  "dp[0][0][j",
  "dp[0][1",
  "dp[0][2",
  "dp[0][i",
  "dp[0][i][j",
  "dp[0][j",
  "dp[0][n",
  "dp[1",
  "dp[1][0",
  "dp[1][1",
  "dp[2501][2501",
  "dp[K",
  "dp[MAX_COINS",
  "dp[N",
  "dp[N][N",
  "dp[N][N][2",
  "dp[N][i",
  "dp[a][b",
  "dp[amount][amount",
  "dp[capacity][i",
  "dp[coinIndex][amount",
  "dp[coinindex][amount",
  "dp[i",
  "dp[i+j",
  "dp[i]=dp[i",
  "dp[i][0",
  "dp[i][1",
  "dp[i][2",
  "dp[i][3",
  "dp[i][4",
  "dp[i][5",
  "dp[i][i][0",
  "dp[i][j",
  "dp[i][j-1",
  "dp[i][j].rbegin",
  "dp[i][j].rend",
  "dp[i][j][0",
  "dp[i][j][1",
  "dp[i][j][2",
  "dp[j",
  "dp[j][currentIndex][0",
  "dp[j][currentIndex][1",
  "dp[j][currentindex][0",
  "dp[j][currentindex][1",
  "dp[j][j",
  "dp[k",
  "dp[k][j",
  "dp[l",
  "dp[m][0",
  "dp[max_coins",
  "dp[n",
  "dp[n-1",
  "dp[n]==INF",
  "dp[n]==inf",
  "dp[n][1",
  "dp[n][2",
  "dp[n][4",
  "dp[n][i",
  "dp[n][k",
  "dp[n][k][2",
  "dp[n][m",
  "dp[n][n",
  "dp[n][n][2",
  "dp[previousIndex1",
  "dp[previousIndex1][currentIndex",
  "dp[previousindex1",
  "dp[previousindex1][currentindex",
  "dp[r][c",
  "dp[result_amount",
  "dp[s",
  "dp[s][x",
  "dp[total_rest_time][i",
  "dp[total_rest_time][i+1",
  "dp[u",
  "dp[u]+1",
  "dp[v",
  "dp[w][i",
  "dp[w][i-1",
  "dp[y][x",
  "dp[yy][xx",
  "dqii",
  "dr",
  "dr.",
  "dr[i",
  "draw\\n",
  "dream",
  "dreamCount",
  "dreamOrder",
  "dreamOrder.count(currentComparison",
  "dreamOrder.erase(currentComparison",
  "dreamOrder.erase(recordedDreams.back",
  "dreamOrder[currentComparison",
  "dreamOrder[dream",
  "dream\\n",
  "dreamcount",
  "dreamorder",
  "dreamorder.count(currentcomparison",
  "dreamorder.erase(currentcomparison",
  "dreamorder.erase(recordeddreams.back",
  "dreamorder[currentcomparison",
  "dreamorder[dream",
  "dreams",
  "drul",
  "ds",
  "ds.end",
  "ds.push_back(x",
  "ds.size",
  "ds[i",
  "dst",
  "dsu",
  "dsum",
  "dth",
  "dual",
  "dual(_n",
  "dual[currentVertex",
  "dual[currentvertex",
  "dual[e.from",
  "dual[e.to",
  "dual[i",
  "dual[node",
  "dual[s",
  "dual[source",
  "dual[t",
  "dual[v",
  "dual[v]|",
  "dual_ref",
  "duals",
  "duals(_nodes",
  "duals.end",
  "duals[currentVertex",
  "duals[currentvertex",
  "duals[edge.to",
  "duals[i",
  "duals[source",
  "due",
  "dup",
  "duplicate",
  "duplicateCount",
  "duplicatecount",
  "duplicated",
  "duplicates",
  "duplicates++",
  "duration",
  "duration_type",
  "during",
  "dx",
  "dx\",x[x][x",
  "dx+d",
  "dx-d",
  "dx.x",
  "dx.x.",
  "dx1",
  "dx2",
  "dx[4",
  "dx[N",
  "dx[]={0,1,0,-1",
  "dx[i",
  "dx[j",
  "dx[k",
  "dx[l",
  "dx[n",
  "dxd",
  "dxdd",
  "dxx",
  "dy",
  "dy[4",
  "dy[N",
  "dy[]={-1,0,1,0",
  "dy[i",
  "dy[i]][x",
  "dy[j",
  "dy[k",
  "dy[l",
  "dy[n",
  "dy_walkable",
  "dy_walkable[i",
  "dynamic",
  "dz0",
  "d{0",
  "e",
  "e's",
  "e(0",
  "e(1",
  "e(2",
  "e(3",
  "e(4",
  "e(8",
  "e(K",
  "e(N",
  "e(a",
  "e(b",
  "e(c",
  "e(d",
  "e(i",
  "e(j",
  "e(k",
  "e(l",
  "e(m",
  "e(n",
  "e(p",
  "e(q",
  "e(r",
  "e(s",
  "e(t",
  "e(tn",
  "e(u",
  "e(v",
  "e(w",
  "e(x",
  "e(y",
  "e(z",
  "e)i",
  "e)j",
  "e)k",
  "e*j",
  "e++",
  "e+1",
  "e--",
  "e-9",
  "e.",
  "e.cap",
  "e.cost",
  "e.d",
  "e.emplace_back(a",
  "e.emplace_back(make_pair(a[u",
  "e.emplace_back(min(u",
  "e.emplace_back(u",
  "e.end",
  "e.g",
  "e.g.",
  "e.p",
  "e.push_back(t[i",
  "e.push_back({i",
  "e.size",
  "e.size();i++",
  "e.t0",
  "e.to",
  "e.u",
  "e18",
  "e=(d-2)%8",
  "e=0",
  "eId",
  "e[0",
  "e[0].push_back(1",
  "e[0].size",
  "e[0][d]++",
  "e[0][i",
  "e[0][k",
  "e[0][k1",
  "e[0][mx",
  "e[1",
  "e[3",
  "e[4",
  "e[N",
  "e[P",
  "e[a",
  "e[a]=b;e[b]=a",
  "e[a]=e[b]=q",
  "e[b",
  "e[e[a",
  "e[e[a]]=e[e[b]]=p",
  "e[e[a]]=p",
  "e[e[b",
  "e[e[b]]=p",
  "e[find(u",
  "e[i",
  "e[i-1",
  "e[i].back",
  "e[i].push_back(1",
  "e[i].size",
  "e[i]=make_tuple(u",
  "e[i]=make_tuple(x[u]-1,x[v]-1",
  "e[i]={x[r],x[s",
  "e[i][d]++",
  "e[i][j",
  "e[i][k",
  "e[i][k1",
  "e[i][min(k1",
  "e[i][min(mx",
  "e[j",
  "e[k",
  "e[m",
  "e[n",
  "e[p",
  "e[p]=e[a",
  "e[p]=e[b",
  "e[ti[u]]=max(e[ti[u]],1+e[i",
  "e[tn",
  "e[u",
  "e[u]=1",
  "e[v",
  "e[x",
  "e[y",
  "e\\n",
  "e_a",
  "e_b",
  "e_t",
  "e_x",
  "e_y",
  "each",
  "ead",
  "eaf",
  "eagles.\\n",
  "eak",
  "eal",
  "eam",
  "ean",
  "eap",
  "ear",
  "earlier",
  "earliest",
  "earliest_placement",
  "eas",
  "easier",
  "east",
  "easy",
  "eat",
  "eaten",
  "eb.",
  "ebr",
  "ec.",
  "eccentricity",
  "ece",
  "eck",
  "ecoins",
  "ect",
  "ed2",
  "edge",
  "edge--",
  "edge._index",
  "edge.capacity",
  "edge.capacity--",
  "edge.cost",
  "edge.first",
  "edge.reverseEdgeId",
  "edge.reverseedgeid",
  "edge.second",
  "edge.to",
  "edgeCountInSet1",
  "edgeCountInSet1[i",
  "edgeCountInSet2",
  "edgeCountInSet2[i",
  "edgeCounts",
  "edgeCounts.assign(adjacencyList[node].size",
  "edgeCounts[0].push_back(1",
  "edgeCounts[0].size",
  "edgeCounts[0][currentDepth]++",
  "edgeCounts[0][k",
  "edgeCounts[i].size",
  "edgeCounts[i][j",
  "edgeCounts[i][k",
  "edgeEnd",
  "edgeId",
  "edgeIndex",
  "edgeIter",
  "edgeIter->cost",
  "edgeIter->to",
  "edgeWeights",
  "edgeWeights(edgesCount",
  "edgeWeights[i",
  "edge[i",
  "edge[i].first",
  "edge[i].second",
  "edge[m",
  "edge_count",
  "edge_count[current_vertex]++",
  "edge_count[i",
  "edge_count[k",
  "edge_id",
  "edge_weights",
  "edge_weights[current_node",
  "edge_weights[neighbor",
  "edgecountinset1",
  "edgecountinset1[i",
  "edgecountinset2",
  "edgecountinset2[i",
  "edgecounts",
  "edgecounts.assign(adjacencylist[node].size",
  "edgecounts[0].push_back(1",
  "edgecounts[0].size",
  "edgecounts[0][currentdepth]++",
  "edgecounts[0][k",
  "edgecounts[i].size",
  "edgecounts[i][j",
  "edgecounts[i][k",
  "edgeend",
  "edgeid",
  "edgeindex",
  "edgeiter",
  "edgeiter->cost",
  "edgeiter->to",
  "edges",
  "edges(e",
  "edges(edges_count",
  "edges(m",
  "edges++",
  "edges.emplace_back(u",
  "edges.emplace_back(v",
  "edges.end",
  "edges.find(edge[i",
  "edges.insert(edge[i",
  "edges.push_back(make_pair(previousNode",
  "edges.push_back(make_pair(previousnode",
  "edges.push_back(make_tuple(adjacencyList[i",
  "edges.push_back(make_tuple(adjacencylist[i",
  "edges.push_back(make_tuple(p",
  "edges.push_back({i",
  "edges.resize(edge_count",
  "edges.size",
  "edgesCount",
  "edgesInSet1",
  "edgesInSet1.insert(i",
  "edgesInSet1.size",
  "edgesInSet2",
  "edgesInSet2.insert(i",
  "edges[edgeIndex",
  "edges[edgeindex",
  "edges[i",
  "edges[i].d",
  "edges[i].p",
  "edges[i].t0",
  "edges[i].u",
  "edges[i].v",
  "edges[i][0",
  "edges[i][1",
  "edges[u",
  "edges_count",
  "edges_list",
  "edges_list(edges",
  "edges_list[i",
  "edgescount",
  "edgesinset1",
  "edgesinset1.insert(i",
  "edgesinset1.size",
  "edgesinset2",
  "edgesinset2.insert(i",
  "edgeweights",
  "edgeweights(edgescount",
  "edgeweights[i",
  "edge{edge._from",
  "edi",
  "eds",
  "eed",
  "eek",
  "een",
  "eep",
  "ees",
  "eet",
  "eeuu",
  "ef7",
  "efficiency",
  "efficient",
  "efh",
  "efs",
  "eft",
  "ega",
  "eh",
  "eh\\n",
  "ei",
  "eid",
  "eight",
  "ein",
  "eir",
  "either",
  "ej",
  "el.",
  "ela",
  "eld",
  "ele",
  "elective",
  "electiveCourses",
  "electiveCourses.end",
  "electiveCourses.push_back(it->second",
  "electiveCourses.push_back(nextIt->second",
  "electiveCourses.size",
  "electiveCourses[i",
  "electivecourses",
  "electivecourses.end",
  "electivecourses.push_back(it->second",
  "electivecourses.push_back(nextit->second",
  "electivecourses.size",
  "electivecourses[i",
  "elem",
  "element",
  "elements",
  "elements:\\n",
  "elementsA",
  "elementsA(countElementsA",
  "elementsA[i",
  "elementsB",
  "elementsB(countElementsB",
  "elementsB[i",
  "elements_a",
  "elements_to_print",
  "elements_to_print.push_back(s.find_by_order(i",
  "elementsa",
  "elementsa(countelementsa",
  "elementsa[i",
  "elementsb",
  "elementsb(countelementsb",
  "elementsb[i",
  "elf",
  "eligible",
  "eligible.\\n",
  "ell",
  "els",
  "else",
  "elsewhere",
  "ely",
  "em",
  "emma\\n",
  "emo",
  "emp",
  "empate",
  "empty",
  "ems",
  "en",
  "en.",
  "enable",
  "enb",
  "encodedMessage",
  "encodedMessage.length",
  "encodedMessage[squareRoot",
  "encoded_number",
  "encoded_number.push_back(number[number_val",
  "encoded_number.push_back(number[quotient",
  "encodedmessage",
  "encodedmessage.length",
  "encodedmessage[squareroot",
  "encounter",
  "encountered",
  "end",
  "end(board",
  "end(count",
  "end(divisors",
  "end(edges",
  "end(flippedBoards",
  "end(flippedBoards[0",
  "end(flippedboards",
  "end(flippedboards[0",
  "end(input",
  "end(number_of_elements",
  "end++",
  "end.end",
  "endCol",
  "endCol--",
  "endIndex",
  "endIndex--",
  "endNode",
  "endPos",
  "endRow",
  "endRow--",
  "endTime",
  "endTimes(numberOfBookings",
  "endTimes.end",
  "endTimes[bookingCounter",
  "endTimes[i",
  "endX",
  "endY",
  "end[i",
  "end[left_index",
  "end[position",
  "end\\n",
  "end_index",
  "end_index--",
  "end_pos",
  "end_x",
  "end_y",
  "endcol",
  "endcol--",
  "ended",
  "endindex",
  "endindex--",
  "ending",
  "endingNode",
  "endingnode",
  "endl",
  "endnode",
  "endpoint",
  "endpoints",
  "endpos",
  "endrow",
  "endrow--",
  "ends",
  "endtime",
  "endtimes(numberofbookings",
  "endtimes.end",
  "endtimes[bookingcounter",
  "endtimes[i",
  "endx",
  "endy",
  "england",
  "enmity",
  "enn",
  "enough",
  "enqueue",
  "ens",
  "ensure",
  "ensuring",
  "ent",
  "enter",
  "entered",
  "enters",
  "entire",
  "entry",
  "entry.first",
  "entry.second",
  "eof",
  "ep.",
  "epos",
  "eps",
  "ept",
  "equal",
  "equal(c.begin",
  "equal_count",
  "equality",
  "equals",
  "equation",
  "equations",
  "equations.end",
  "equations.find(expression",
  "equations[key",
  "equivalence(bool",
  "equivalent",
  "er1",
  "er2",
  "erA",
  "erB",
  "era",
  "erase",
  "eratosthenes",
  "erb",
  "ere",
  "erm",
  "ern",
  "ero",
  "err",
  "error",
  "error(a",
  "error(const",
  "error\\n",
  "ers",
  "ert",
  "ery",
  "es1",
  "es2",
  "es\\n",
  "escrito\\n",
  "ese",
  "esoterico\\n",
  "ess",
  "est",
  "estimated_area",
  "et1",
  "et2",
  "eta",
  "etc",
  "ete",
  "ets",
  "eue",
  "eup",
  "euu",
  "ev.",
  "eve",
  "even",
  "even_count",
  "even_count++",
  "event",
  "events",
  "every",
  "everyone!\\n",
  "everything",
  "everywhere",
  "evi",
  "ewC",
  "ewR",
  "ewX",
  "ewY",
  "ewc",
  "ewr",
  "ewx",
  "ewy",
  "ex/",
  "ex1",
  "exact",
  "exact_area",
  "exactly",
  "example",
  "exceed",
  "exceeds",
  "except",
  "exchange",
  "exchangeRate",
  "exchangerate",
  "exclamation",
  "exclude",
  "excluded",
  "excluding",
  "exclusive",
  "exclusive(bool",
  "execute",
  "execution",
  "exist",
  "existing",
  "exists",
  "exit",
  "exit\\n",
  "exiting",
  "exp",
  "exp(cd{0",
  "exp2(d",
  "exp2(k",
  "expand(expanded",
  "expand(list",
  "expanded",
  "expanded.begin",
  "expanded.end",
  "expanded.push_front(next",
  "expanded.sort",
  "expected",
  "expected[6",
  "expected[i",
  "explicit",
  "explore",
  "explored",
  "exploring",
  "exponent",
  "exponentiation",
  "exponents",
  "exposed_nodes",
  "exposed_nodes.insert(node",
  "exposed_nodes.insert(parent",
  "exposed_nodes.size",
  "expression",
  "expressions",
  "ext",
  "extending",
  "extra",
  "extract",
  "extracted",
  "extraction",
  "eys",
  "e\u2019s",
  "f",
  "f(0",
  "f(0,0",
  "f(0,0,0",
  "f(1",
  "f(2",
  "f(a",
  "f(b",
  "f(c",
  "f(d",
  "f(double",
  "f(g",
  "f(h",
  "f(i",
  "f(i+(j==2),(j+1)%3,k",
  "f(i+(j==2),(j+1)%3,k+1",
  "f(i+1,k",
  "f(i+1,k+a[i",
  "f(int",
  "f(j",
  "f(k",
  "f(l",
  "f(l+1",
  "f(ll",
  "f(m",
  "f(mii",
  "f(n",
  "f(n+1",
  "f(r",
  "f(s",
  "f(string",
  "f(u",
  "f(vector",
  "f(vvii",
  "f(x",
  "f(y",
  "f(yy",
  "f++",
  "f.",
  "f.back",
  "f.pop_back",
  "f.push_back(a[x",
  "f.push_back(f[i-1",
  "f.push_back(l",
  "f.push_back(n",
  "f.push_back(x",
  "f.push_back({g",
  "f.push_back({i",
  "f.push_back({n",
  "f.size",
  "f/2",
  "f/4",
  "f1(0",
  "f1(a",
  "f1(const",
  "f1(g",
  "f1(int",
  "f1(k",
  "f1(vi",
  "f2(0",
  "f2(a",
  "f2(const",
  "f2(g",
  "f2(int",
  "f2(k",
  "f2(vi",
  "f3(0",
  "f3(a",
  "f3(const",
  "f3(g",
  "f3(int",
  "f3(k",
  "f3(vi",
  "f4(0",
  "f4(a",
  "f4(int",
  "f4(k",
  "f4(vi",
  "f5(int",
  "f5(k",
  "f6(int",
  "f6(k",
  "f7(int",
  "f7(k",
  "f8(int",
  "f8(k",
  "f=0",
  "f=1",
  "f[0",
  "f[0][0",
  "f[0][1",
  "f[1",
  "f[1]=1",
  "f[1][0",
  "f[1][1",
  "f[2",
  "f[2*N",
  "f[2*n",
  "f[2][2",
  "f[N",
  "f[N],inv[N],invf[N",
  "f[a",
  "f[b",
  "f[i",
  "f[i-1",
  "f[i-2",
  "f[i]=f[i-1]*i%M",
  "f[i]=f[i-1]*i%m",
  "f[i]=j",
  "f[i][j",
  "f[i][j]=-1",
  "f[i][j]=k",
  "f[k",
  "f[m",
  "f[n",
  "f[n+m-1",
  "f[n],inv[n],invf[n",
  "f[new_x][new_y",
  "f[p",
  "f[u",
  "f[x][y",
  "f\\n",
  "fabs(ha",
  "fabs(x",
  "face",
  "fact(N",
  "fact(n",
  "fact[0",
  "fact[1000001",
  "fact[a[i",
  "fact[i",
  "fact[na",
  "factor",
  "factor++",
  "factorSequence(2",
  "factorSequence.push_back(factorSequence[sequenceIndex",
  "factorSequence[sequenceIndex",
  "factor].insert(0",
  "factor].order_of_key(leftBound",
  "factor].order_of_key(leftbound",
  "factor].order_of_key(rightBound",
  "factor].order_of_key(rightbound",
  "factored",
  "factorial",
  "factorialXi",
  "factorials",
  "factorialxi",
  "factorization",
  "factors",
  "factors(const",
  "factors(p",
  "factors(primes",
  "factors.push_back(divisor",
  "factors.push_back(factor",
  "factors.push_back(n",
  "factors.push_back(p",
  "factors.push_back(prime",
  "factors.push_back({factor",
  "factors.push_back({gcd_value",
  "factors.push_back({i",
  "factors.push_back({n",
  "factors.resize(0",
  "factors.size",
  "factors[0",
  "factors[i",
  "factors[index",
  "factorsequence(2",
  "factorsequence.push_back(factorsequence[sequenceindex",
  "factorsequence[sequenceindex",
  "fail\\n",
  "failed\\n",
  "fall",
  "falls",
  "false",
  "far",
  "fast",
  "fastPower(a",
  "fastPower(ll",
  "fastPtr",
  "fastPtr->next",
  "fastPtr->next->next",
  "fast_exponentiation(a",
  "fast_exponentiation(b",
  "fast_exponentiation(ll",
  "fast_fft(a",
  "fast_fft(b",
  "fast_fft(product",
  "fast_fft(vector",
  "fast_pow(ll",
  "fast_power(2",
  "fast_power(ll",
  "faster",
  "fastio",
  "fastio::sync",
  "fastpower(a",
  "fastpower(ll",
  "fastptr",
  "fastptr->next",
  "fastptr->next->next",
  "fat",
  "feb",
  "feb.",
  "february",
  "feedback",
  "fence",
  "fence.end",
  "fence.push_back(point(a",
  "fer",
  "fewer",
  "ff/",
  "fft",
  "fft(a",
  "fft(b",
  "fft(tp",
  "fft(vector",
  "fib(ll",
  "fib(n",
  "fiber",
  "fic",
  "field",
  "field_index",
  "field_index++",
  "fields",
  "fik",
  "file",
  "fileNames(numFiles",
  "fileNames[i",
  "filenames(numfiles",
  "filenames[i",
  "files",
  "fill",
  "fill(a",
  "fill(b",
  "fill(begin(board",
  "fill(d.begin",
  "fill(dist.begin",
  "fill(distance.begin",
  "fill(duals.begin",
  "fill(f",
  "fill(freq",
  "fill(g",
  "fill(g[0",
  "fill(g[0][N",
  "fill(g[0][n",
  "fill(l",
  "fill(l.begin",
  "fill(left",
  "fill(nodes.begin",
  "fill(p.begin",
  "fill(positions.begin",
  "fill(results.begin",
  "fill(row.begin",
  "fill(s",
  "fill(s.begin",
  "fill(t",
  "fill(t.begin",
  "fill(visited",
  "fill(visited.begin",
  "fill(xs",
  "fill(ys",
  "fillPath(int",
  "fillPath(newR",
  "fillPath(y",
  "fill_char",
  "fill_n(a",
  "fill_n(accumulatedSum",
  "fill_n(accumulatedsum",
  "fill_n(b",
  "fill_n(composite",
  "filled",
  "filled(visited.begin",
  "filling",
  "fillpath(int",
  "fillpath(newr",
  "fillpath(y",
  "fin",
  "final",
  "finalResult",
  "final_height",
  "final_route",
  "final_route.push_back(stop_names[index",
  "final_sum",
  "finally",
  "finalresult",
  "find",
  "find(*a",
  "find(*b",
  "find(0",
  "find(VI",
  "find(a",
  "find(a),pb",
  "find(a);b",
  "find(b",
  "find(child",
  "find(components.begin",
  "find(const",
  "find(e[a",
  "find(hashes.begin",
  "find(i",
  "find(int",
  "find(j",
  "find(l",
  "find(leaders",
  "find(p[a",
  "find(p[i",
  "find(p[u",
  "find(p[x",
  "find(parent",
  "find(parent[node",
  "find(parent_[x",
  "find(t+1",
  "find(u",
  "find(u),b",
  "find(uv.begin",
  "find(v",
  "find(vi",
  "find(x",
  "find(y",
  "find=[&](int",
  "findAugmentingPath(sink",
  "findDivisors(factors",
  "findDivisors(ll",
  "findDivisors(vi",
  "findDivisors(x",
  "findKing",
  "findKing(g",
  "findKing(int",
  "findOverlappingIntervals(const",
  "findOverlappingIntervals(tree",
  "findSet(intVector",
  "findSet(set",
  "find_centroid(0",
  "find_centroid(child",
  "find_centroid(int",
  "find_largest_number_not_at_its_position(IntVector",
  "find_largest_number_not_at_its_position(arr",
  "find_largest_number_not_at_its_position(intvector",
  "find_shortest_path",
  "findaugmentingpath(sink",
  "finddivisors(factors",
  "finddivisors(ll",
  "finddivisors(vi",
  "finddivisors(x",
  "finding",
  "findking",
  "findking(g",
  "findking(int",
  "findmergenode(node",
  "findoverlappingintervals(const",
  "findoverlappingintervals(tree",
  "findset(intvector",
  "findset(set",
  "finished",
  "finv[0",
  "finv[N",
  "finv[i",
  "finv[k",
  "finv[n",
  "fire",
  "first",
  "firstChar",
  "firstDigitCount",
  "firstNumber",
  "firstTwoTerms",
  "firstWord",
  "first\\n",
  "first_letter",
  "first_string",
  "first_string.length",
  "first_string[position",
  "firstchar",
  "firstdigitcount",
  "firstnumber",
  "firsttwoterms",
  "firstword",
  "fit",
  "fitted",
  "fitting",
  "five",
  "fix",
  "fixed",
  "fizz",
  "fizz\\n",
  "fizz_factor",
  "fizzbuzz",
  "fizzbuzz\\n",
  "fla",
  "fla.",
  "flag",
  "flags",
  "fle",
  "flights",
  "flip",
  "flippedBoards(3",
  "flippedBoards[i][j",
  "flippedBoards[row",
  "flippedBoards[row][col",
  "flippedBoards[row][col].flip",
  "flippedboards(3",
  "flippedboards[i][j",
  "flippedboards[row",
  "flippedboards[row][col",
  "flippedboards[row][col].flip",
  "flipping",
  "float",
  "flood",
  "floor(log10(max_digit",
  "floor(log2(depth[v",
  "floor(log2(m",
  "flow",
  "flow(int",
  "flow(s",
  "flow(source",
  "flow_limit",
  "flow_limit).back",
  "floyd",
  "flush",
  "follow",
  "followed",
  "following",
  "food",
  "for",
  "for(;a<=b;a*=2,i++",
  "for(;i",
  "for(;i>0;i--",
  "for(;in>>y>>x;j++",
  "for(;k<=s.size();k++",
  "for(;s[i]!=';'&&s[i]!='",
  "for(auto",
  "for(char",
  "for(const",
  "for(dii",
  "for(i",
  "for(i=0;;i++",
  "for(ii",
  "for(iii",
  "for(int",
  "for(ll",
  "for(size_t",
  "for(string",
  "for(unsigned",
  "for(vi",
  "for(vi&x",
  "ford",
  "forest",
  "forever",
  "form",
  "format",
  "formatted",
  "formatting",
  "formed",
  "former",
  "forms",
  "formula",
  "forward",
  "found",
  "found\\n",
  "found_duplicate",
  "found_element",
  "four",
  "fp",
  "fraction",
  "fraction\"/\"denominator",
  "fractional",
  "fractions",
  "free",
  "free\\n",
  "freq",
  "freq(256",
  "freq[26",
  "freq[c",
  "freq[i",
  "freq[static_cast",
  "freq[x",
  "freq_sets",
  "freq_sets.begin",
  "freq_sets.end",
  "freq_sets.find(current_set",
  "freq_sets[current_set",
  "frequencies",
  "frequencies(26",
  "frequencies[i",
  "frequencies[toupper(c",
  "frequency",
  "frequency(totalDice",
  "frequency(totaldice",
  "frequencyMap",
  "frequencyMap.end",
  "frequencyMap.erase(it",
  "frequencyMap.find(currentElement",
  "frequencyMap.find(line",
  "frequencyMap[currentElement",
  "frequencyMap[line",
  "frequencyMap[line]++",
  "frequencyOfMostFrequentDigit",
  "frequencyOfMostFrequentDigit--",
  "frequency[i",
  "frequencymap",
  "frequencymap.end",
  "frequencymap.erase(it",
  "frequencymap.find(currentelement",
  "frequencymap.find(line",
  "frequencymap[currentelement",
  "frequencymap[line",
  "frequencymap[line]++",
  "frequencyofmostfrequentdigit",
  "frequencyofmostfrequentdigit--",
  "frequent",
  "frequently",
  "friday",
  "fridays",
  "friend",
  "friendship",
  "from",
  "fromNode",
  "from_id",
  "fromnode",
  "front",
  "fruit",
  "fruits",
  "fs1",
  "fs2",
  "fs3",
  "ful",
  "fulkerson",
  "full",
  "fun",
  "function",
  "functional",
  "functions",
  "further",
  "future",
  "g",
  "g(1",
  "g(26",
  "g(3",
  "g(5",
  "g(6",
  "g(K",
  "g(N",
  "g(T",
  "g(T+1",
  "g(d",
  "g(g",
  "g(k",
  "g(n",
  "g(n),h(n",
  "g(n),h(n),c",
  "g(n+1",
  "g(numberOfNodes",
  "g(numberofnodes",
  "g(t",
  "g(t+1",
  "g(vector",
  "g(x",
  "g(y",
  "g)r",
  "g++",
  "g--",
  "g.",
  "g.add_edge(N",
  "g.add_edge(i",
  "g.add_edge(n",
  "g.add_edge(t",
  "g.add_edge(u",
  "g.flow(N",
  "g.flow(n",
  "g.flow(s",
  "g.push_back(T",
  "g.push_back(t",
  "g.size",
  "g1(0",
  "g1(int",
  "g1(sx",
  "g2(0",
  "g2(int",
  "g2(n",
  "g3(0",
  "g3(int",
  "g3(sx",
  "g4(0",
  "g4(int",
  "g4(n",
  "g[0",
  "g[0].push_back(1",
  "g[0].push_back(2",
  "g[0].push_back(4",
  "g[0][0",
  "g[0][i",
  "g[0][i]++",
  "g[1].push_back(0",
  "g[1].push_back(2",
  "g[1].push_back(4",
  "g[2].push_back(0",
  "g[2].push_back(1",
  "g[2].push_back(3",
  "g[2].push_back(4",
  "g[3].push_back(2",
  "g[3].push_back(4",
  "g[4].push_back(0",
  "g[4].push_back(1",
  "g[4].push_back(2",
  "g[4].push_back(3",
  "g[6][0",
  "g[7][7",
  "g[K][2",
  "g[N",
  "g[N][N",
  "g[_e.to][_e.rev",
  "g[a",
  "g[a.first][a.second",
  "g[a].push_back(b",
  "g[a].push_back({b",
  "g[a][b",
  "g[b.first][b.second",
  "g[b].push_back(a",
  "g[b][a",
  "g[c].clear",
  "g[c].empty",
  "g[c].size",
  "g[c][i",
  "g[cur_node",
  "g[currentNode",
  "g[currentnode",
  "g[edges[i].v].push_back(i",
  "g[from].push_back(_edge{to",
  "g[i",
  "g[i].empty",
  "g[i].end",
  "g[i].insert(max(0",
  "g[i].insert(max(0,min(T",
  "g[i].insert(max(0,min(t",
  "g[i].push_back(j",
  "g[i].push_back(p",
  "g[i].push_back(u",
  "g[i].push_back(v",
  "g[i].size",
  "g[i]=vi(m",
  "g[i][j",
  "g[i][j]--",
  "g[i][j]=u-1",
  "g[i][n",
  "g[idx[a]][idx[b",
  "g[idx[b]][idx[a",
  "g[j].push_back(i",
  "g[j][i",
  "g[j][i]++",
  "g[j][l",
  "g[k][2",
  "g[m[a[j]]].push_back(m[b[j",
  "g[m[x]-1].emplace_back(m[y]-1,a",
  "g[m[y]-1].emplace_back(m[x]-1,b",
  "g[n",
  "g[n][m",
  "g[n][n",
  "g[node",
  "g[nodeA].push_back(nodeB",
  "g[nodeB].push_back(nodeA",
  "g[nodea].push_back(nodeb",
  "g[nodeb].push_back(nodea",
  "g[p[u]][u",
  "g[p[u]][u]--",
  "g[p].push_back(i",
  "g[p][__builtin_popcount(s",
  "g[pos[i].first][pos[i].second",
  "g[pv[v]][pe[v",
  "g[pv[v]][pe[v]].cap",
  "g[s[a]].push_back(s[b",
  "g[s[b]].push_back(s[a",
  "g[s].push_back({i",
  "g[temp_v].push_back(u",
  "g[to].push_back(_edge{from",
  "g[u",
  "g[u])a[v]++",
  "g[u])a[v]--",
  "g[u])dfs(j",
  "g[u].begin",
  "g[u].clear",
  "g[u].count(v",
  "g[u].empty",
  "g[u].end",
  "g[u].erase(v",
  "g[u].insert(v",
  "g[u].pop_back",
  "g[u].push_back(i",
  "g[u].push_back(make_pair(v",
  "g[u].push_back(temp_v",
  "g[u].push_back(v",
  "g[u].push_back({inv[v",
  "g[u].push_back({v",
  "g[u].push_back({w",
  "g[u].size",
  "g[u][g[u].size",
  "g[u][i",
  "g[u][j",
  "g[u][n",
  "g[u][p[u",
  "g[u][p[u]]++",
  "g[u][v",
  "g[u][v]++",
  "g[v",
  "g[v].empty",
  "g[v].end",
  "g[v].erase(u",
  "g[v].insert(u",
  "g[v].push_back(make_pair(u",
  "g[v].push_back(u",
  "g[v].push_back({inv[u",
  "g[v].push_back({u",
  "g[v][e.rev].cap",
  "g[v][i",
  "g[v][u",
  "g[v][u].insert(t",
  "g[x",
  "g[x].push_back(i",
  "g[x][i",
  "g[x][y",
  "g[y+1][x",
  "g[y-1][x",
  "g[y][x",
  "g[y][x+1",
  "g[y][x-1",
  "g[yy][xx",
  "g\\n",
  "g_x",
  "g_y",
  "ga",
  "ga.",
  "gal",
  "gallery",
  "game",
  "games",
  "gap",
  "gcd",
  "gcd(a",
  "gcd(a[i],a[j])==1",
  "gcd(g",
  "gcd(gcd_value",
  "gcd(i",
  "gcd(number1",
  "gcd(x",
  "gcdValue",
  "gcd_value",
  "gcdvalue",
  "ge2",
  "gear_a",
  "gear_b",
  "gear_number",
  "ged",
  "gen",
  "gen.",
  "general",
  "generate",
  "generate(int",
  "generate(l[tc",
  "generated",
  "generator",
  "generator.seed(atoi(argv[2",
  "generator.seed(chrono::steady_clock::now().time_since_epoch().count",
  "ger",
  "ges",
  "get",
  "get<0>(*it",
  "get<0>(*t.rbegin",
  "get<0>(*temp_values.rbegin",
  "get<0>(a",
  "get<0>(a[0",
  "get<0>(a[i",
  "get<0>(a[i][j",
  "get<0>(a[i][j])+1",
  "get<0>(a[j",
  "get<0>(b",
  "get<0>(b.back",
  "get<0>(b[0",
  "get<0>(b[i",
  "get<0>(b[j",
  "get<0>(currentState",
  "get<0>(currentstate",
  "get<0>(i",
  "get<0>(j",
  "get<0>(l[i",
  "get<0>(numbers[left",
  "get<0>(numbers[right",
  "get<0>(p",
  "get<0>(p1",
  "get<0>(p2",
  "get<0>(points[i",
  "get<0>(priorityQueue.top",
  "get<0>(priorityqueue.top",
  "get<0>(q.back",
  "get<0>(q.front",
  "get<0>(q.top",
  "get<0>(queue.back",
  "get<0>(queue.front",
  "get<0>(s.find_by_order(p",
  "get<0>(t[i",
  "get<0>(x",
  "get<0>(x)/k",
  "get<0>(y",
  "get<0>(y)/k",
  "get<1>(*it",
  "get<1>(a[i",
  "get<1>(a[i][j",
  "get<1>(a[j",
  "get<1>(b.back",
  "get<1>(b[0",
  "get<1>(b[i",
  "get<1>(cups[i",
  "get<1>(currentState",
  "get<1>(currentstate",
  "get<1>(f(0",
  "get<1>(i",
  "get<1>(invs[i",
  "get<1>(j",
  "get<1>(l[i",
  "get<1>(min(t[i][a",
  "get<1>(numbers[left",
  "get<1>(numbers[right",
  "get<1>(p",
  "get<1>(q.front",
  "get<1>(q.top",
  "get<1>(q.top()),v=-1",
  "get<1>(v[i",
  "get<1>(x",
  "get<1>(y",
  "get<2>(*it",
  "get<2>(a[0",
  "get<2>(b[i",
  "get<2>(b[n",
  "get<2>(currentState",
  "get<2>(currentstate",
  "get<2>(q.top",
  "get<2>(q.top()),v=-1",
  "get<3>(t[1",
  "getArea(const",
  "getArea(polygon",
  "getDirectionString(direction",
  "getDirectionString(int",
  "getEdge(i",
  "getEdge(int",
  "getEdges",
  "getPrimes(primes",
  "getPrimes(vi",
  "getSum(0",
  "getSum(SegmentTreeNode",
  "getSum(node->left",
  "getSum(node->right",
  "getSum(segmentTree[index",
  "getSum(size_t",
  "get_edge(edge.reverseEdgeId).capacity",
  "get_edge(edge.reverseedgeid).capacity",
  "get_edge(i",
  "get_edge(int",
  "get_index(cur_perm",
  "get_index(vi",
  "get_index(vi(begin(input",
  "get_permutation(int",
  "get_sum(a",
  "get_sum(b",
  "get_sum(int",
  "get_sum(vertex_id",
  "getarea(const",
  "getarea(polygon",
  "getdirectionstring(direction",
  "getdirectionstring(int",
  "getedge(i",
  "getedge(int",
  "getedges",
  "getline(cin",
  "getline(iss",
  "getnode(head->next",
  "getnode(node",
  "getprimes(primes",
  "getprimes(vi",
  "getshorty",
  "getsum(0",
  "getsum(node->left",
  "getsum(node->right",
  "getsum(segmenttree[index",
  "getsum(segmenttreenode",
  "getsum(size_t",
  "getvaluefromtailposition(head->next",
  "getvaluefromtailposition(node",
  "ghs",
  "ght",
  "gic",
  "gin",
  "git",
  "given",
  "givenString",
  "givenString.length",
  "givenString.substr(i",
  "given_string",
  "givenstring",
  "givenstring.length",
  "givenstring.substr(i",
  "gle",
  "global",
  "gly",
  "gne",
  "gnome",
  "gnomes",
  "gnu_pbds",
  "gnu_pbds::rb_tree_tag",
  "gnu_pbds::tree",
  "gnu_pbds::tree_order_statistics_node_update",
  "go",
  "go[N",
  "go[n",
  "go[u][v",
  "go[u][v]++",
  "goal",
  "godzilla\\n",
  "godzilla_games",
  "godzilla_score",
  "godzilla_wins",
  "goin",
  "goin'",
  "going",
  "goin\u2019",
  "gon",
  "gonna",
  "good",
  "good\\n",
  "got",
  "gov",
  "gov.",
  "gp/",
  "grams",
  "graph",
  "graph(26",
  "graph(N",
  "graph(countNodes",
  "graph(countnodes",
  "graph(countries",
  "graph(n",
  "graph(nodes",
  "graph(nodesCount",
  "graph(nodescount",
  "graph(numberOfPeople",
  "graph(number_of_nodes",
  "graph(numberofpeople",
  "graph(numbers.size",
  "graph.addEdge(u",
  "graph.add_edge(N",
  "graph.add_edge(i",
  "graph.add_edge(n",
  "graph.add_edge(t",
  "graph.addedge(u",
  "graph.computeFlow(0",
  "graph.computeflow(0",
  "graph.end",
  "graph.flow(N",
  "graph.flow(n",
  "graph.num_nodes",
  "graph.resize(n",
  "graph1(nodes",
  "graph1[node",
  "graph1[root",
  "graph1[u].push_back(v",
  "graph2(nodes",
  "graph2[node",
  "graph2[v].push_back(u",
  "graphMap",
  "graphMap.end",
  "graphMap.find(variable1",
  "graphMap.find(variable2",
  "graphMap[variable1",
  "graphMap[variable2",
  "graph[0][i",
  "graph[MAXN][MAXN",
  "graph[MAX_NODES",
  "graph[N][N",
  "graph[a].push_back(b",
  "graph[adjacentNode].push_back(currentNode",
  "graph[adjacentnode].push_back(currentnode",
  "graph[b].push_back(a",
  "graph[current",
  "graph[currentNode",
  "graph[currentNode].push_back(adjacentNode",
  "graph[currentVertex",
  "graph[currentVertex][edge._reverseEdgeId].capacity",
  "graph[current][neighbor",
  "graph[current_node",
  "graph[current_stop][i",
  "graph[current_vertex",
  "graph[currentnode",
  "graph[currentnode].push_back(adjacentnode",
  "graph[currentvertex",
  "graph[currentvertex][edge._reverseedgeid].capacity",
  "graph[edge].push_back(start_vertex",
  "graph[edges[i].v].push_back(i",
  "graph[endNode].push_back({startNode",
  "graph[end][start",
  "graph[endnode].push_back({startnode",
  "graph[graph[i][0].first][0",
  "graph[i",
  "graph[i].empty",
  "graph[i].push_back(j",
  "graph[i].size",
  "graph[i][0].first",
  "graph[i][0].second",
  "graph[i][0].third",
  "graph[i][j",
  "graph[i][n",
  "graph[j].push_back(i",
  "graph[max_nodes",
  "graph[maxn][maxn",
  "graph[miner][i",
  "graph[n][n",
  "graph[neighbor].erase(current",
  "graph[neighbor][node]++",
  "graph[neighbor][node]--",
  "graph[node",
  "graph[node1].push_back(node2",
  "graph[node2].push_back(node1",
  "graph[node].size",
  "graph[node][i",
  "graph[node][neighbor",
  "graph[node][neighbor]++",
  "graph[node][neighbor]--",
  "graph[numbers[digits[a[j]]]].push_back(numbers[digits[b[j",
  "graph[previousVertices[currentVertex]][parentEdges[currentVertex",
  "graph[previousVertices[currentVertex]][parentEdges[currentVertex]].capacity",
  "graph[previousVertices[i]].begin",
  "graph[previousVertices[i]].end",
  "graph[previousvertices[currentvertex]][parentedges[currentvertex",
  "graph[previousvertices[currentvertex]][parentedges[currentvertex]].capacity",
  "graph[previousvertices[i]].begin",
  "graph[previousvertices[i]].end",
  "graph[startNode].push_back({endNode",
  "graph[start][end",
  "graph[start_vertex].push_back(edge",
  "graph[startnode].push_back({endnode",
  "graph[stop_index[a]][stop_index[b",
  "graph[stop_index[b]][stop_index[a",
  "graph[u",
  "graph[u].insert(v",
  "graph[u].push_back(v",
  "graph[u_name].push_back(v_index",
  "graph[v].insert(u",
  "graph[v].push_back(u",
  "graph_(nodes",
  "graph_edges",
  "graph_map",
  "graph_map.clear",
  "graph_map.end",
  "graph_map.find(r",
  "graph_map.find(s",
  "graph_map[r",
  "graph_map[s",
  "graphmap",
  "graphmap.end",
  "graphmap.find(variable1",
  "graphmap.find(variable2",
  "graphmap[variable1",
  "graphmap[variable2",
  "graphs",
  "grass",
  "gray",
  "greater",
  "greatestCommonDivisor",
  "greatestcommondivisor",
  "green",
  "greenSize",
  "greenSoldier",
  "greenTeam",
  "greenTeam.empty",
  "greenTeam.pop",
  "greenTeam.push(-battlefield[i",
  "greenTeam.push(soldier",
  "greenTeam.size",
  "greenTeam.top",
  "greensize",
  "greensoldier",
  "greenteam",
  "greenteam.empty",
  "greenteam.pop",
  "greenteam.push(-battlefield[i",
  "greenteam.push(soldier",
  "greenteam.size",
  "greenteam.top",
  "greska\\n",
  "grid",
  "grid(3",
  "grid(81",
  "grid(X",
  "grid(gridSize",
  "grid(grid_rows",
  "grid(gridsize",
  "grid(height",
  "grid(m",
  "grid(n",
  "grid(rows",
  "grid(x",
  "grid.end",
  "grid.push_back(line",
  "grid.size",
  "gridSize",
  "grid[0][0",
  "grid[1",
  "grid[1001][1001",
  "grid[8",
  "grid[N][N",
  "grid[currentX][currentY",
  "grid[current_y][current_x",
  "grid[currentx][currenty",
  "grid[endY][endX",
  "grid[endY][startX",
  "grid[endy][endx",
  "grid[endy][startx",
  "grid[i",
  "grid[i].size",
  "grid[i][j",
  "grid[n",
  "grid[n][n",
  "grid[nextRow][nextCol",
  "grid[next_y][next_x",
  "grid[nextrow][nextcol",
  "grid[ny].size",
  "grid[ny][nx",
  "grid[pos][count_of_ones",
  "grid[row][col",
  "grid[startY",
  "grid[starty",
  "grid[x][y",
  "grid[y",
  "grid[y].end",
  "grid[y][x",
  "grid_cols",
  "grid_rows",
  "grid_size",
  "gridsize",
  "group",
  "group.begin",
  "group.end",
  "group.erase(element",
  "group.find(element",
  "group.insert(element",
  "groupA",
  "groupB",
  "group[i",
  "group[node",
  "group_count",
  "group_count++",
  "group_size",
  "group_sizes",
  "group_sizes(group_count",
  "group_sizes[component[i",
  "group_x",
  "group_y",
  "groupa",
  "groupb",
  "grouped",
  "groups",
  "growing",
  "gth",
  "guess",
  "guessing",
  "gunnar\\n",
  "h",
  "h(0",
  "h(1",
  "h(N",
  "h(a",
  "h(b",
  "h(c",
  "h(g",
  "h(i",
  "h(j",
  "h(k",
  "h(n",
  "h(s",
  "h(u",
  "h(v",
  "h(x",
  "h(y",
  "h++",
  "h--",
  "h.",
  "h.end",
  "h.erase(it",
  "h.insert(x",
  "h.lower_bound(x",
  "h1",
  "h2",
  "h[0",
  "h[100",
  "h[1001",
  "h[2",
  "h[2*N],p[2*N",
  "h[2*n],p[2*n",
  "h[N",
  "h[b].push_back({a",
  "h[i",
  "h[i+k+b]-h[i-1]*p[k+b+1])%B",
  "h[i+k+b]-h[i-1]*p[k+b+1])%b",
  "h[i-1]*A+s[i])%B",
  "h[i-1]*a+s[i])%b",
  "h[i]*j",
  "h[i]*t",
  "h[i].push_back(t[i",
  "h[index",
  "h[j",
  "h[j+k+b]-(j?h[j-1]*p[k+b+1]:0))%B",
  "h[j+k+b]-(j?h[j-1]*p[k+b+1]:0))%b",
  "h[n",
  "h[node",
  "h[node].empty",
  "h[t[i",
  "h[u",
  "h[u].begin",
  "h[u].count(v",
  "h[u].empty",
  "h[u].insert(v",
  "h[u].push_back(i",
  "h[u].size(),u",
  "h[v",
  "h[v].erase(u",
  "h[v].insert(u",
  "h[v].push_back(i",
  "h[v].push_back(u",
  "h[v].size",
  "h\\n",
  "ha",
  "had",
  "half",
  "halfDiagonalSum",
  "halfPower",
  "halfTriangleArea",
  "halfdiagonalsum",
  "halfpower",
  "halftrianglearea",
  "halloween.\\n",
  "halved",
  "halves",
  "han",
  "handle",
  "handling",
  "happy\\n",
  "har",
  "has",
  "hasCycle(Node",
  "hasEdge",
  "hasFat",
  "hasMaxDigit",
  "has_cycle(Node",
  "has_cycle(node",
  "has_max",
  "has_min",
  "hascycle(node",
  "hasedge",
  "hasfat",
  "hash",
  "hash(ll",
  "hash(x",
  "hashValue",
  "hashes",
  "hashes(numFiles",
  "hashes(numfiles",
  "hashes.end",
  "hashes.erase(unique(hashes.begin",
  "hashes[i",
  "hashvalue",
  "hasmaxdigit",
  "hat",
  "have",
  "havin",
  "havin'",
  "having",
  "havin\u2019",
  "hay",
  "hayPointMap",
  "hayPointMap.end",
  "hayPointMap.find(currentPosition",
  "hayPointMap[currentPosition",
  "hayPointMap[position",
  "haypointmap",
  "haypointmap.end",
  "haypointmap.find(currentposition",
  "haypointmap[currentposition",
  "haypointmap[position",
  "haz",
  "hb",
  "he",
  "he's",
  "head",
  "head->data",
  "head->next",
  "head->next->data",
  "head->next->next",
  "head->prev",
  "headA",
  "headA->data",
  "headA->next",
  "headB",
  "headB->data",
  "headB->next",
  "heada",
  "heada->data",
  "heada->next",
  "headb",
  "headb->data",
  "headb->next",
  "header",
  "heads",
  "heads[node",
  "heads[parent].push_back(i",
  "heap",
  "heap(s",
  "heap[0",
  "heap[0].second",
  "heap[child",
  "heap[child].first",
  "heap[current",
  "heap[current].first",
  "heap[i",
  "heap[parent].first",
  "heap[s",
  "heapify",
  "heartbeats",
  "hed",
  "height",
  "height*j",
  "height*remainingKnickpoints",
  "height*remainingknickpoints",
  "height_final",
  "height_initial",
  "height_max",
  "height_min",
  "heights",
  "heights(n",
  "heights[1001",
  "heights[i",
  "heights[stack.top",
  "hello",
  "helper",
  "hem",
  "hen",
  "her",
  "here",
  "herman",
  "hes",
  "hev",
  "hexadecimal",
  "hey",
  "he\u2019s",
  "hh",
  "hic",
  "hidden",
  "high",
  "high_value",
  "higher",
  "highest",
  "hills(N",
  "hills(n",
  "hills[i",
  "hills[i].x",
  "hills[i].y",
  "hills[i].z",
  "hills[j",
  "hin",
  "hip",
  "his",
  "hiss\\n",
  "hit",
  "hmax",
  "hmin",
  "hmin+2*hmax)/3",
  "hms",
  "hod",
  "hold",
  "holds",
  "honest.\\n",
  "honest\\n",
  "hor",
  "horizontalAngle",
  "horizontal_distance",
  "horizontalangle",
  "horizontally",
  "hour",
  "hours",
  "hours_diff",
  "house",
  "houses",
  "how",
  "how's",
  "how\u2019s",
  "hpp",
  "htX",
  "hts",
  "http://uva.onlinejudge.org/external/102/10226.pdf",
  "http://uva.onlinejudge.org/external/111/11136.pdf",
  "http://uva.onlinejudge.org/external/112/11286.pdf",
  "http://uva.onlinejudge.org/external/8/893.pdf",
  "http://uva.onlinejudge.org/external/9/978.pdf",
  "https://atcoder.jp/contests/dp/tasks/dp_g",
  "https://atcoder.jp/contests/dp/tasks/dp_j",
  "https://atcoder.jp/contests/dp/tasks/dp_l",
  "https://atcoder.jp/contests/dp/tasks/dp_m",
  "https://atcoder.jp/contests/dp/tasks/dp_n",
  "https://atcoder.jp/contests/dp/tasks/dp_o",
  "https://codeforces.com/contest/1204/problem/D2",
  "https://codeforces.com/contest/1204/problem/d2",
  "https://codeforces.com/contest/1227/problem/D1",
  "https://codeforces.com/contest/1227/problem/d1",
  "https://codeforces.com/contest/1228/problem/A",
  "https://codeforces.com/contest/1228/problem/a",
  "https://codeforces.com/contest/1304/problem/F1",
  "https://codeforces.com/contest/1304/problem/f1",
  "https://codeforces.com/contest/1313/problem/C1",
  "https://codeforces.com/contest/1313/problem/C2",
  "https://codeforces.com/contest/1313/problem/c1",
  "https://codeforces.com/contest/1313/problem/c2",
  "https://codeforces.com/contest/1407/problem/E",
  "https://codeforces.com/contest/1407/problem/e",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/100",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/102",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/105",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/116",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/117",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/123",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/174",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/275",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/403",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/404",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/460",
  "https://codeforces.com/problemsets/acmsguru/problem/99999/486",
  "https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd27",
  "https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd27/000000000020993c",
  "https://codingcompetitions.withgoogle.com/codejam/round/0000000000876ff1/0000000000a45ef7",
  "https://codingcompetitions.withgoogle.com/codejam/round/0000000000876ff1/0000000000a46471",
  "https://cses.fi/problemset/info/1145/",
  "https://cses.fi/problemset/stats/1136/",
  "https://cses.fi/problemset/stats/1624/",
  "https://cses.fi/problemset/stats/1636/",
  "https://cses.fi/problemset/stats/1661/",
  "https://cses.fi/problemset/stats/1662/",
  "https://cses.fi/problemset/stats/1672",
  "https://cses.fi/problemset/task/1068/",
  "https://cses.fi/problemset/task/1069/",
  "https://cses.fi/problemset/task/1070/",
  "https://cses.fi/problemset/task/1071/",
  "https://cses.fi/problemset/task/1072/",
  "https://cses.fi/problemset/task/1073/",
  "https://cses.fi/problemset/task/1074/",
  "https://cses.fi/problemset/task/1075/",
  "https://cses.fi/problemset/task/1076/",
  "https://cses.fi/problemset/task/1077/",
  "https://cses.fi/problemset/task/1078/",
  "https://cses.fi/problemset/task/1079/",
  "https://cses.fi/problemset/task/1081/",
  "https://cses.fi/problemset/task/1082/",
  "https://cses.fi/problemset/task/1083/",
  "https://cses.fi/problemset/task/1084/",
  "https://cses.fi/problemset/task/1085/",
  "https://cses.fi/problemset/task/1086/",
  "https://cses.fi/problemset/task/1087/",
  "https://cses.fi/problemset/task/1090/",
  "https://cses.fi/problemset/task/1091/",
  "https://cses.fi/problemset/task/1092/",
  "https://cses.fi/problemset/task/1093/",
  "https://cses.fi/problemset/task/1094/",
  "https://cses.fi/problemset/task/1095/",
  "https://cses.fi/problemset/task/1096",
  "https://cses.fi/problemset/task/1097/",
  "https://cses.fi/problemset/task/1098/",
  "https://cses.fi/problemset/task/1099/",
  "https://cses.fi/problemset/task/1109/",
  "https://cses.fi/problemset/task/1110",
  "https://cses.fi/problemset/task/1113",
  "https://cses.fi/problemset/task/1130",
  "https://cses.fi/problemset/task/1131/",
  "https://cses.fi/problemset/task/1132",
  "https://cses.fi/problemset/task/1133",
  "https://cses.fi/problemset/task/1134",
  "https://cses.fi/problemset/task/1135",
  "https://cses.fi/problemset/task/1137/",
  "https://cses.fi/problemset/task/1138",
  "https://cses.fi/problemset/task/1139",
  "https://cses.fi/problemset/task/1140/",
  "https://cses.fi/problemset/task/1141/",
  "https://cses.fi/problemset/task/1142/",
  "https://cses.fi/problemset/task/1143/",
  "https://cses.fi/problemset/task/1144/",
  "https://cses.fi/problemset/task/1146/",
  "https://cses.fi/problemset/task/1147/",
  "https://cses.fi/problemset/task/1149/",
  "https://cses.fi/problemset/task/1157",
  "https://cses.fi/problemset/task/1158/",
  "https://cses.fi/problemset/task/1159/",
  "https://cses.fi/problemset/task/1160/",
  "https://cses.fi/problemset/task/1161",
  "https://cses.fi/problemset/task/1162",
  "https://cses.fi/problemset/task/1163/",
  "https://cses.fi/problemset/task/1164/",
  "https://cses.fi/problemset/task/1188/",
  "https://cses.fi/problemset/task/1190/",
  "https://cses.fi/problemset/task/1191",
  "https://cses.fi/problemset/task/1192/",
  "https://cses.fi/problemset/task/1193/",
  "https://cses.fi/problemset/task/1194/",
  "https://cses.fi/problemset/task/1195",
  "https://cses.fi/problemset/task/1196/",
  "https://cses.fi/problemset/task/1197",
  "https://cses.fi/problemset/task/1202/",
  "https://cses.fi/problemset/task/1203/",
  "https://cses.fi/problemset/task/1617",
  "https://cses.fi/problemset/task/1618",
  "https://cses.fi/problemset/task/1619/",
  "https://cses.fi/problemset/task/1620",
  "https://cses.fi/problemset/task/1621/",
  "https://cses.fi/problemset/task/1622/",
  "https://cses.fi/problemset/task/1623/",
  "https://cses.fi/problemset/task/1625",
  "https://cses.fi/problemset/task/1628",
  "https://cses.fi/problemset/task/1629/",
  "https://cses.fi/problemset/task/1630",
  "https://cses.fi/problemset/task/1631/",
  "https://cses.fi/problemset/task/1632",
  "https://cses.fi/problemset/task/1633/",
  "https://cses.fi/problemset/task/1634",
  "https://cses.fi/problemset/task/1637",
  "https://cses.fi/problemset/task/1638",
  "https://cses.fi/problemset/task/1639",
  "https://cses.fi/problemset/task/1640/",
  "https://cses.fi/problemset/task/1641",
  "https://cses.fi/problemset/task/1642",
  "https://cses.fi/problemset/task/1643/",
  "https://cses.fi/problemset/task/1644/",
  "https://cses.fi/problemset/task/1645",
  "https://cses.fi/problemset/task/1646",
  "https://cses.fi/problemset/task/1647",
  "https://cses.fi/problemset/task/1649/",
  "https://cses.fi/problemset/task/1650",
  "https://cses.fi/problemset/task/1651",
  "https://cses.fi/problemset/task/1652/",
  "https://cses.fi/problemset/task/1653",
  "https://cses.fi/problemset/task/1654/",
  "https://cses.fi/problemset/task/1660/",
  "https://cses.fi/problemset/task/1666",
  "https://cses.fi/problemset/task/1667",
  "https://cses.fi/problemset/task/1668/",
  "https://cses.fi/problemset/task/1669",
  "https://cses.fi/problemset/task/1670",
  "https://cses.fi/problemset/task/1671",
  "https://cses.fi/problemset/task/1673/",
  "https://cses.fi/problemset/task/1674/",
  "https://cses.fi/problemset/task/1675",
  "https://cses.fi/problemset/task/1676",
  "https://cses.fi/problemset/task/1677",
  "https://cses.fi/problemset/task/1678",
  "https://cses.fi/problemset/task/1679",
  "https://cses.fi/problemset/task/1680",
  "https://cses.fi/problemset/task/1681",
  "https://cses.fi/problemset/task/1682",
  "https://cses.fi/problemset/task/1683",
  "https://cses.fi/problemset/task/1684",
  "https://cses.fi/problemset/task/1686",
  "https://cses.fi/problemset/task/1687",
  "https://cses.fi/problemset/task/1688",
  "https://cses.fi/problemset/task/1689",
  "https://cses.fi/problemset/task/1690",
  "https://cses.fi/problemset/task/1691",
  "https://cses.fi/problemset/task/1692",
  "https://cses.fi/problemset/task/1693",
  "https://cses.fi/problemset/task/1694/",
  "https://cses.fi/problemset/task/1695/",
  "https://cses.fi/problemset/task/1696",
  "https://cses.fi/problemset/task/1711/",
  "https://cses.fi/problemset/task/1712/",
  "https://cses.fi/problemset/task/1713/",
  "https://cses.fi/problemset/task/1715",
  "https://cses.fi/problemset/task/1716",
  "https://cses.fi/problemset/task/1717",
  "https://cses.fi/problemset/task/1722",
  "https://cses.fi/problemset/task/1732/",
  "https://cses.fi/problemset/task/1734/",
  "https://cses.fi/problemset/task/1735",
  "https://cses.fi/problemset/task/1736",
  "https://cses.fi/problemset/task/1737",
  "https://cses.fi/problemset/task/1739",
  "https://cses.fi/problemset/task/1744",
  "https://cses.fi/problemset/task/1745/",
  "https://cses.fi/problemset/task/1746",
  "https://cses.fi/problemset/task/1749",
  "https://cses.fi/problemset/task/1750",
  "https://cses.fi/problemset/task/1751",
  "https://cses.fi/problemset/task/1753/",
  "https://cses.fi/problemset/task/1754/",
  "https://cses.fi/problemset/task/1755/",
  "https://cses.fi/problemset/task/1756",
  "https://cses.fi/problemset/task/2064",
  "https://cses.fi/problemset/task/2079",
  "https://cses.fi/problemset/task/2081",
  "https://cses.fi/problemset/task/2106",
  "https://cses.fi/problemset/task/2134",
  "https://cses.fi/problemset/task/2136",
  "https://cses.fi/problemset/task/2137",
  "https://cses.fi/problemset/task/2162",
  "https://cses.fi/problemset/task/2163/",
  "https://cses.fi/problemset/task/2164",
  "https://cses.fi/problemset/task/2165",
  "https://cses.fi/problemset/task/2166/",
  "https://cses.fi/problemset/task/2168/",
  "https://cses.fi/problemset/task/2169/",
  "https://cses.fi/problemset/task/2181",
  "https://cses.fi/problemset/task/2182",
  "https://cses.fi/problemset/task/2183",
  "https://cses.fi/problemset/task/2185",
  "https://cses.fi/problemset/task/2187",
  "https://cses.fi/problemset/task/2205",
  "https://cses.fi/problemset/task/2206",
  "https://cses.fi/problemset/task/2216",
  "https://cses.fi/problemset/task/2217/",
  "https://cses.fi/problemset/task/2220/",
  "https://cses.fi/problemset/task/2413/",
  "https://cses.fi/problemset/task/2416",
  "https://cses.fi/problemset/task/2417",
  "https://cses.fi/problemset/task/2419/",
  "https://cses.fi/problemset/task/2428",
  "https://cses.fi/problemset/task/2431",
  "https://github.com/atcoder/ac-library/blob/master/atcoder/mincostflow.hpp",
  "https://icpcarchive.ecs.baylor.edu/external/23/p2362.pdf",
  "https://icpcarchive.ecs.baylor.edu/external/28/2817.pdf",
  "https://open.kattis.com/problems/10kindsofpeople",
  "https://open.kattis.com/problems/2048",
  "https://open.kattis.com/problems/3dprinter",
  "https://open.kattis.com/problems/4thought",
  "https://open.kattis.com/problems/abandonedanimal",
  "https://open.kattis.com/problems/abc",
  "https://open.kattis.com/problems/aboveaverage",
  "https://open.kattis.com/problems/acm",
  "https://open.kattis.com/problems/acm2",
  "https://open.kattis.com/problems/addingwords",
  "https://open.kattis.com/problems/addtwonumbers",
  "https://open.kattis.com/problems/airconditioned",
  "https://open.kattis.com/problems/akcija",
  "https://open.kattis.com/problems/alicedigital",
  "https://open.kattis.com/problems/aliennumbers",
  "https://open.kattis.com/problems/aliens",
  "https://open.kattis.com/problems/almostperfect",
  "https://open.kattis.com/problems/almostsorted2",
  "https://open.kattis.com/problems/alphabet",
  "https://open.kattis.com/problems/alphabetspam",
  "https://open.kattis.com/problems/anewalphabet",
  "https://open.kattis.com/problems/anothercandies",
  "https://open.kattis.com/problems/apaxiaaans",
  "https://open.kattis.com/problems/applesack",
  "https://open.kattis.com/problems/aprizenoonecanwin",
  "https://open.kattis.com/problems/aqueducts",
  "https://open.kattis.com/problems/arbitrage",
  "https://open.kattis.com/problems/arcticnetwork",
  "https://open.kattis.com/problems/areal",
  "https://open.kattis.com/problems/arithmeticfunctions",
  "https://open.kattis.com/problems/armystrengtheasy",
  "https://open.kattis.com/problems/arrivingontime",
  "https://open.kattis.com/problems/artichoke",
  "https://open.kattis.com/problems/autori",
  "https://open.kattis.com/problems/averageseasy",
  "https://open.kattis.com/problems/averageshard",
  "https://open.kattis.com/problems/averagespeed",
  "https://open.kattis.com/problems/babelfish",
  "https://open.kattis.com/problems/bachetsgame",
  "https://open.kattis.com/problems/backspace",
  "https://open.kattis.com/problems/ballotboxes",
  "https://open.kattis.com/problems/bank",
  "https://open.kattis.com/problems/basketballoneonone",
  "https://open.kattis.com/problems/batmanacci",
  "https://open.kattis.com/problems/batterup",
  "https://open.kattis.com/problems/bela",
  "https://open.kattis.com/problems/bijele",
  "https://open.kattis.com/problems/bing",
  "https://open.kattis.com/problems/blackfriday",
  "https://open.kattis.com/problems/blockcrusher",
  "https://open.kattis.com/problems/blockgame2",
  "https://open.kattis.com/problems/boatparts",
  "https://open.kattis.com/problems/booking",
  "https://open.kattis.com/problems/bookingaroom",
  "https://open.kattis.com/problems/bossbattle",
  "https://open.kattis.com/problems/breakingbad",
  "https://open.kattis.com/problems/brexit",
  "https://open.kattis.com/problems/bubbletea",
  "https://open.kattis.com/problems/builddeps",
  "https://open.kattis.com/problems/bus",
  "https://open.kattis.com/problems/busplanning",
  "https://open.kattis.com/problems/busyschedule",
  "https://open.kattis.com/problems/buttonbashing",
  "https://open.kattis.com/problems/cakeymccakeface",
  "https://open.kattis.com/problems/calories",
  "https://open.kattis.com/problems/candydivision",
  "https://open.kattis.com/problems/catcoat",
  "https://open.kattis.com/problems/cd",
  "https://open.kattis.com/problems/ceremony",
  "https://open.kattis.com/problems/cetvrta",
  "https://open.kattis.com/problems/chanukah",
  "https://open.kattis.com/problems/cheatingatwar",
  "https://open.kattis.com/problems/chess",
  "https://open.kattis.com/problems/closestsums",
  "https://open.kattis.com/problems/closingtheloop",
  "https://open.kattis.com/problems/coast",
  "https://open.kattis.com/problems/collapse",
  "https://open.kattis.com/problems/color",
  "https://open.kattis.com/problems/compass",
  "https://open.kattis.com/problems/conundrum",
  "https://open.kattis.com/problems/convexpolygonarea",
  "https://open.kattis.com/problems/cookieselection",
  "https://open.kattis.com/problems/countingstars",
  "https://open.kattis.com/problems/courseplanning",
  "https://open.kattis.com/problems/cowcrane",
  "https://open.kattis.com/problems/cups",
  "https://open.kattis.com/problems/datum",
  "https://open.kattis.com/problems/deathknight",
  "https://open.kattis.com/problems/debugging",
  "https://open.kattis.com/problems/deduplicatingfiles",
  "https://open.kattis.com/problems/dejavu",
  "https://open.kattis.com/problems/detaileddifferences",
  "https://open.kattis.com/problems/dicecup",
  "https://open.kattis.com/problems/dicegame",
  "https://open.kattis.com/problems/differentdistances",
  "https://open.kattis.com/problems/digits",
  "https://open.kattis.com/problems/dominoes2",
  "https://open.kattis.com/problems/dominos",
  "https://open.kattis.com/problems/doorman",
  "https://open.kattis.com/problems/downtime",
  "https://open.kattis.com/problems/dream",
  "https://open.kattis.com/problems/drmmessages",
  "https://open.kattis.com/problems/dst",
  "https://open.kattis.com/problems/dvaput",
  "https://open.kattis.com/problems/easiest",
  "https://open.kattis.com/problems/echoechoecho",
  "https://open.kattis.com/problems/ecoins",
  "https://open.kattis.com/problems/election",
  "https://open.kattis.com/problems/eligibility",
  "https://open.kattis.com/problems/encodedmessage",
  "https://open.kattis.com/problems/engineeringenglish",
  "https://open.kattis.com/problems/equalsumseasy",
  "https://open.kattis.com/problems/equivalences",
  "https://open.kattis.com/problems/erase",
  "https://open.kattis.com/problems/erraticants",
  "https://open.kattis.com/problems/estimatingtheareaofacircle",
  "https://open.kattis.com/problems/evenup",
  "https://open.kattis.com/problems/everywhere",
  "https://open.kattis.com/problems/exactchange2",
  "https://open.kattis.com/problems/excursion",
  "https://open.kattis.com/problems/faktor",
  "https://open.kattis.com/problems/falling",
  "https://open.kattis.com/problems/favourable",
  "https://open.kattis.com/problems/fence2",
  "https://open.kattis.com/problems/filip",
  "https://open.kattis.com/problems/fizzbuzz",
  "https://open.kattis.com/problems/flipfive",
  "https://open.kattis.com/problems/flowlayout",
  "https://open.kattis.com/problems/flyingsafely",
  "https://open.kattis.com/problems/freefood",
  "https://open.kattis.com/problems/friday",
  "https://open.kattis.com/problems/fridge",
  "https://open.kattis.com/problems/froshweek",
  "https://open.kattis.com/problems/fruitbaskets",
  "https://open.kattis.com/problems/getshorty",
  "https://open.kattis.com/problems/goldbach2",
  "https://open.kattis.com/problems/grandpabernie",
  "https://open.kattis.com/problems/granica",
  "https://open.kattis.com/problems/grass",
  "https://open.kattis.com/problems/grassseed",
  "https://open.kattis.com/problems/greedilyincreasing",
  "https://open.kattis.com/problems/greetingcard",
  "https://open.kattis.com/problems/growlinggears",
  "https://open.kattis.com/problems/guess",
  "https://open.kattis.com/problems/guessinggame",
  "https://open.kattis.com/problems/guessthedatastructure",
  "https://open.kattis.com/problems/hangingout",
  "https://open.kattis.com/problems/haypoints",
  "https://open.kattis.com/problems/heartrate",
  "https://open.kattis.com/problems/heliocentric",
  "https://open.kattis.com/problems/heritage",
  "https://open.kattis.com/problems/herman",
  "https://open.kattis.com/problems/hermits",
  "https://open.kattis.com/problems/hidden",
  "https://open.kattis.com/problems/hissingmicrophone",
  "https://open.kattis.com/problems/howmanydigits",
  "https://open.kattis.com/problems/humancannonball2",
  "https://open.kattis.com/problems/iboard",
  "https://open.kattis.com/problems/icpcawards",
  "https://open.kattis.com/problems/incognito",
  "https://open.kattis.com/problems/inversefactorial",
  "https://open.kattis.com/problems/isithalloween",
  "https://open.kattis.com/problems/jabuke",
  "https://open.kattis.com/problems/jackolanternjuxtaposition",
  "https://open.kattis.com/problems/jewelrybox",
  "https://open.kattis.com/problems/joinstrings",
  "https://open.kattis.com/problems/jollyjumpers",
  "https://open.kattis.com/problems/judging",
  "https://open.kattis.com/problems/judgingmoose",
  "https://open.kattis.com/problems/justaminute",
  "https://open.kattis.com/problems/karte",
  "https://open.kattis.com/problems/kastenlauf",
  "https://open.kattis.com/problems/kemija08",
  "https://open.kattis.com/problems/kinversions",
  "https://open.kattis.com/problems/knapsack",
  "https://open.kattis.com/problems/kolone",
  "https://open.kattis.com/problems/kornislav",
  "https://open.kattis.com/problems/kutevi",
  "https://open.kattis.com/problems/ladder",
  "https://open.kattis.com/problems/lastfactorialdigit",
  "https://open.kattis.com/problems/lawnmower",
  "https://open.kattis.com/problems/leftbeehind",
  "https://open.kattis.com/problems/licensetolaunch",
  "https://open.kattis.com/problems/lineup",
  "https://open.kattis.com/problems/listgame",
  "https://open.kattis.com/problems/logicfunctions",
  "https://open.kattis.com/problems/loowater",
  "https://open.kattis.com/problems/lyklagangriti",
  "https://open.kattis.com/problems/martiandna",
  "https://open.kattis.com/problems/maxcolinear",
  "https://open.kattis.com/problems/maxflow",
  "https://open.kattis.com/problems/mincostmaxflow",
  "https://open.kattis.com/problems/mincut",
  "https://open.kattis.com/problems/minimumscalar",
  "https://open.kattis.com/problems/minspantree",
  "https://open.kattis.com/problems/mirror",
  "https://open.kattis.com/problems/mixedfractions",
  "https://open.kattis.com/problems/modulo",
  "https://open.kattis.com/problems/moneymatters",
  "https://open.kattis.com/problems/moogle",
  "https://open.kattis.com/problems/moviecollection",
  "https://open.kattis.com/problems/muzicari",
  "https://open.kattis.com/problems/narrowartgallery",
  "https://open.kattis.com/problems/nastyhacks",
  "https://open.kattis.com/problems/natjecanje",
  "https://open.kattis.com/problems/nodup",
  "https://open.kattis.com/problems/nsum",
  "https://open.kattis.com/problems/nullarycomputer",
  "https://open.kattis.com/problems/numberfun",
  "https://open.kattis.com/problems/numbertree",
  "https://open.kattis.com/problems/oceancurrents",
  "https://open.kattis.com/problems/oddaevenb",
  "https://open.kattis.com/problems/oddgnome",
  "https://open.kattis.com/problems/oddmanout",
  "https://open.kattis.com/problems/ofugsnuid",
  "https://open.kattis.com/problems/onechicken",
  "https://open.kattis.com/problems/openpitmining",
  "https://open.kattis.com/problems/opensource",
  "https://uva.onlinejudge.org/external/1/100.pdf",
  "https://uva.onlinejudge.org/external/1/108.pdf",
  "https://uva.onlinejudge.org/external/1/118.pdf",
  "https://uva.onlinejudge.org/external/1/124.pdf",
  "https://uva.onlinejudge.org/external/1/168.pdf",
  "https://uva.onlinejudge.org/external/100/10004.pdf",
  "https://uva.onlinejudge.org/external/100/10038.pdf",
  "https://uva.onlinejudge.org/external/101/10113.pdf",
  "https://uva.onlinejudge.org/external/101/10116.pdf",
  "https://uva.onlinejudge.org/external/101/10158.pdf",
  "https://uva.onlinejudge.org/external/101/10178.pdf",
  "https://uva.onlinejudge.org/external/101/10199.pdf",
  "https://uva.onlinejudge.org/external/103/10301.pdf",
  "https://uva.onlinejudge.org/external/103/10305.pdf",
  "https://uva.onlinejudge.org/external/103/10336.pdf",
  "https://uva.onlinejudge.org/external/103/10369.pdf",
  "https://uva.onlinejudge.org/external/103/10377.pdf",
  "https://uva.onlinejudge.org/external/103/10382.pdf",
  "https://uva.onlinejudge.org/external/105/10507.pdf",
  "https://uva.onlinejudge.org/external/105/10583.pdf",
  "https://uva.onlinejudge.org/external/106/10608.pdf",
  "https://uva.onlinejudge.org/external/106/10685.pdf",
  "https://uva.onlinejudge.org/external/107/10720.pdf",
  "https://uva.onlinejudge.org/external/107/10731.pdf",
  "https://uva.onlinejudge.org/external/107/10783.pdf",
  "https://uva.onlinejudge.org/external/108/10895.pdf",
  "https://uva.onlinejudge.org/external/109/10926.pdf",
  "https://uva.onlinejudge.org/external/109/10928.pdf",
  "https://uva.onlinejudge.org/external/109/10946.pdf",
  "https://uva.onlinejudge.org/external/11/1197.pdf",
  "https://uva.onlinejudge.org/external/111/11110.pdf",
  "https://uva.onlinejudge.org/external/114/11414.pdf",
  "https://uva.onlinejudge.org/external/115/11503.pdf",
  "https://uva.onlinejudge.org/external/115/11504.pdf",
  "https://uva.onlinejudge.org/external/115/11518.pdf",
  "https://uva.onlinejudge.org/external/115/11550.pdf",
  "https://uva.onlinejudge.org/external/116/11679.pdf",
  "https://uva.onlinejudge.org/external/116/11690.pdf",
  "https://uva.onlinejudge.org/external/117/11709.pdf",
  "https://uva.onlinejudge.org/external/117/11749.pdf",
  "https://uva.onlinejudge.org/external/117/11770.pdf",
  "https://uva.onlinejudge.org/external/118/11838.pdf",
  "https://uva.onlinejudge.org/external/119/11966.pdf",
  "https://uva.onlinejudge.org/external/119/11991.pdf",
  "https://uva.onlinejudge.org/external/2/200.pdf",
  "https://uva.onlinejudge.org/external/2/230.pdf",
  "https://uva.onlinejudge.org/external/2/260.pdf",
  "https://uva.onlinejudge.org/external/2/280.pdf",
  "https://uva.onlinejudge.org/external/2/291.pdf",
  "https://uva.onlinejudge.org/external/3/315.pdf",
  "https://uva.onlinejudge.org/external/3/336.pdf",
  "https://uva.onlinejudge.org/external/3/352.pdf",
  "https://uva.onlinejudge.org/external/3/394.pdf",
  "https://uva.onlinejudge.org/external/4/424.pdf",
  "https://uva.onlinejudge.org/external/4/439.pdf",
  "https://uva.onlinejudge.org/external/4/458.pdf",
  "https://uva.onlinejudge.org/external/4/459.pdf",
  "https://uva.onlinejudge.org/external/4/469.pdf",
  "https://uva.onlinejudge.org/external/5/572.pdf",
  "https://uva.onlinejudge.org/external/5/579.pdf",
  "https://uva.onlinejudge.org/external/5/599.pdf",
  "https://uva.onlinejudge.org/external/6/610.pdf",
  "https://uva.onlinejudge.org/external/6/614.pdf",
  "https://uva.onlinejudge.org/external/6/657.pdf",
  "https://uva.onlinejudge.org/external/7/782.pdf",
  "https://uva.onlinejudge.org/external/7/784.pdf",
  "https://uva.onlinejudge.org/external/7/785.pdf",
  "https://uva.onlinejudge.org/external/7/793.pdf",
  "https://uva.onlinejudge.org/external/7/796.pdf",
  "https://uva.onlinejudge.org/external/8/824.pdf",
  "https://uva.onlinejudge.org/external/8/852.pdf",
  "https://uva.onlinejudge.org/external/8/872.pdf",
  "https://www.aceptaelreto.com/problem/statement.php?id=101",
  "https://www.aceptaelreto.com/problem/statement.php?id=103",
  "https://www.aceptaelreto.com/problem/statement.php?id=104",
  "https://www.aceptaelreto.com/problem/statement.php?id=106",
  "https://www.aceptaelreto.com/problem/statement.php?id=108",
  "https://www.aceptaelreto.com/problem/statement.php?id=109",
  "https://www.aceptaelreto.com/problem/statement.php?id=114",
  "https://www.aceptaelreto.com/problem/statement.php?id=192",
  "https://www.aceptaelreto.com/problem/statement.php?id=326",
  "https://www.aceptaelreto.com/problem/statement.php?id=368",
  "https://www.aceptaelreto.com/problem/statement.php?id=369",
  "https://www.aceptaelreto.com/problem/statement.php?id=370",
  "https://www.aceptaelreto.com/problem/statement.php?id=371",
  "https://www.aceptaelreto.com/problem/statement.php?id=372",
  "https://www.aceptaelreto.com/problem/statement.php?id=373",
  "https://www.aceptaelreto.com/problem/statement.php?id=374",
  "https://www.aceptaelreto.com/problem/statement.php?id=375",
  "https://www.aceptaelreto.com/problem/statement.php?id=376",
  "https://www.aceptaelreto.com/problem/statement.php?id=377",
  "https://www.aceptaelreto.com/problem/statement.php?id=378",
  "https://www.aceptaelreto.com/problem/statement.php?id=379",
  "https://www.aceptaelreto.com/problem/statement.php?id=433",
  "https://www.aceptaelreto.com/problem/statement.php?id=434",
  "https://www.aceptaelreto.com/problem/statement.php?id=435",
  "https://www.aceptaelreto.com/problem/statement.php?id=436",
  "https://www.aceptaelreto.com/problem/statement.php?id=437",
  "https://www.aceptaelreto.com/problem/statement.php?id=438",
  "https://www.aceptaelreto.com/problem/statement.php?id=439",
  "https://www.aceptaelreto.com/problem/statement.php?id=440",
  "https://www.aceptaelreto.com/problem/statement.php?id=441",
  "https://www.aceptaelreto.com/problem/statement.php?id=442",
  "https://www.aceptaelreto.com/problem/statement.php?id=443",
  "https://www.aceptaelreto.com/problem/statement.php?id=444",
  "https://www.aceptaelreto.com/problem/statement.php?id=706",
  "https://www.codechef.com/APRIL09/problems/B5",
  "https://www.codechef.com/APRIL21A/problems/BOOLGAME",
  "https://www.codechef.com/APRIL21A/problems/KAVGMAT",
  "https://www.codechef.com/APRIL21A/problems/MEXSTR",
  "https://www.codechef.com/AUG18A/problems/INMAT",
  "https://www.codechef.com/AUG18A/problems/KCOMPRES",
  "https://www.codechef.com/COOK17/problems/CIELAB",
  "https://www.codechef.com/COOK87/problems/CK87GSUB",
  "https://www.codechef.com/COOK87/problems/CK87MEDI",
  "https://www.codechef.com/COOK87/problems/CK87QUER",
  "https://www.codechef.com/COOK89/problems/BTAR",
  "https://www.codechef.com/COOK89/problems/FBMT",
  "https://www.codechef.com/DEC18A/problems/DLDAG",
  "https://www.codechef.com/DEC19A/problems/BINADD",
  "https://www.codechef.com/DEC19A/problems/BINXOR/",
  "https://www.codechef.com/DEC19A/problems/CHFRAN",
  "https://www.codechef.com/DEC20A/problems/EVENPSUM",
  "https://www.codechef.com/FEB18/problems/BIAS",
  "https://www.codechef.com/FEB18/problems/BROCLK",
  "https://www.codechef.com/FEB18/problems/CARPTUN",
  "https://www.codechef.com/FEB18/problems/CHANOQ",
  "https://www.codechef.com/FEB18/problems/CHEFCHR",
  "https://www.codechef.com/FEB18/problems/CHEFPTNT",
  "https://www.codechef.com/FEB18/problems/LUCASTH",
  "https://www.codechef.com/FEB20A/problems/LONGCOOK",
  "https://www.codechef.com/JAN18/problems/KCON",
  "https://www.codechef.com/JAN18/problems/MAXSC",
  "https://www.codechef.com/JAN18/problems/MONSTER",
  "https://www.codechef.com/JULY18A/problems/EQUILIBR",
  "https://www.codechef.com/JULY18A/problems/NMNMX",
  "https://www.codechef.com/MARCH09/problems/A1",
  "https://www.codechef.com/MARCH09/problems/A2",
  "https://www.codechef.com/MARCH18A/problems/CHEFKNN",
  "https://www.codechef.com/MARCH18A/problems/GCDCNT",
  "https://www.codechef.com/MARCH18A/problems/MINVOTE",
  "https://www.codechef.com/MARCH18A/problems/MIXCOLOR",
  "https://www.codechef.com/MARCH20A/problems/EGGFREE",
  "https://www.codechef.com/MARCH20A/problems/LAZERTST",
  "https://www.codechef.com/MAY20A/problems/NBOTS",
  "https://www.codechef.com/OCT17/problems/CHEFCCYL/",
  "https://www.codechef.com/OCT17/problems/CHEFCOUN/",
  "https://www.codechef.com/OCT17/problems/CHEFGP/",
  "https://www.codechef.com/OCT17/problems/MEX/",
  "https://www.codechef.com/OCT18A/problems/BBRICKS",
  "https://www.codechef.com/OCT18A/problems/MINDSUM",
  "https://www.codechef.com/OCT19A/problems/JIIT",
  "https://www.codechef.com/OCT19A/problems/MARM",
  "https://www.codechef.com/OCT19A/problems/MSV",
  "https://www.codechef.com/SEPT17/problems/CHEFSUM/",
  "https://www.codechef.com/SEPT18A/problems/BSHUFFLE",
  "https://www.codechef.com/SEPT18A/problems/CHEFADV",
  "https://www.codechef.com/SEPT18A/problems/MAGICHF",
  "https://www.codechef.com/SNCK1A19/problems/ARRGRAPH",
  "https://www.codechef.com/april09/problems/b5",
  "https://www.codechef.com/april21a/problems/boolgame",
  "https://www.codechef.com/april21a/problems/kavgmat",
  "https://www.codechef.com/april21a/problems/mexstr",
  "https://www.codechef.com/aug18a/problems/inmat",
  "https://www.codechef.com/aug18a/problems/kcompres",
  "https://www.codechef.com/cook17/problems/cielab",
  "https://www.codechef.com/cook87/problems/ck87gsub",
  "https://www.codechef.com/cook87/problems/ck87medi",
  "https://www.codechef.com/cook87/problems/ck87quer",
  "https://www.codechef.com/cook89/problems/btar",
  "https://www.codechef.com/cook89/problems/fbmt",
  "https://www.codechef.com/dec18a/problems/dldag",
  "https://www.codechef.com/dec19a/problems/binadd",
  "https://www.codechef.com/dec19a/problems/binxor/",
  "https://www.codechef.com/dec19a/problems/chfran",
  "https://www.codechef.com/dec20a/problems/evenpsum",
  "https://www.codechef.com/feb18/problems/bias",
  "https://www.codechef.com/feb18/problems/broclk",
  "https://www.codechef.com/feb18/problems/carptun",
  "https://www.codechef.com/feb18/problems/chanoq",
  "https://www.codechef.com/feb18/problems/chefchr",
  "https://www.codechef.com/feb18/problems/chefptnt",
  "https://www.codechef.com/feb18/problems/lucasth",
  "https://www.codechef.com/feb20a/problems/longcook",
  "https://www.codechef.com/jan18/problems/kcon",
  "https://www.codechef.com/jan18/problems/maxsc",
  "https://www.codechef.com/jan18/problems/monster",
  "https://www.codechef.com/july18a/problems/equilibr",
  "https://www.codechef.com/july18a/problems/nmnmx",
  "https://www.codechef.com/march09/problems/a1",
  "https://www.codechef.com/march09/problems/a2",
  "https://www.codechef.com/march18a/problems/chefknn",
  "https://www.codechef.com/march18a/problems/gcdcnt",
  "https://www.codechef.com/march18a/problems/minvote",
  "https://www.codechef.com/march18a/problems/mixcolor",
  "https://www.codechef.com/march20a/problems/eggfree",
  "https://www.codechef.com/march20a/problems/lazertst",
  "https://www.codechef.com/may20a/problems/nbots",
  "https://www.codechef.com/oct17/problems/chefccyl/",
  "https://www.codechef.com/oct17/problems/chefcoun/",
  "https://www.codechef.com/oct17/problems/chefgp/",
  "https://www.codechef.com/oct17/problems/mex/",
  "https://www.codechef.com/oct18a/problems/bbricks",
  "https://www.codechef.com/oct18a/problems/mindsum",
  "https://www.codechef.com/oct19a/problems/jiit",
  "https://www.codechef.com/oct19a/problems/marm",
  "https://www.codechef.com/oct19a/problems/msv",
  "https://www.codechef.com/sept17/problems/chefsum/",
  "https://www.codechef.com/sept18a/problems/bshuffle",
  "https://www.codechef.com/sept18a/problems/chefadv",
  "https://www.codechef.com/sept18a/problems/magichf",
  "https://www.codechef.com/snck1a19/problems/arrgraph",
  "https://www.hackerearth.com/challenge/competitive/january-circuits-18/algorithm/array-and-queries-d544bfb2/",
  "https://www.hackerearth.com/challenge/competitive/january-circuits-18/algorithm/buying-items-d552af6f/",
  "https://www.hackerearth.com/challenge/competitive/january-circuits-18/algorithm/classic-task-39656dbf/",
  "https://www.hackerearth.com/challenge/competitive/january-circuits-18/algorithm/congruence-relation-ddd2b5cc/",
  "https://www.hackerearth.com/challenge/competitive/january-circuits-18/algorithm/min-difference-queries-f5b9c199/",
  "https://www.hackerearth.com/challenge/competitive/january-circuits-18/algorithm/theatre-830bdbff/",
  "https://www.hackerearth.com/challenge/competitive/january-circuits-18/approximate/array-construction-410b758b/",
  "https://www.hackerrank.com/challenges/and-xor-or",
  "https://www.hackerrank.com/challenges/balanced-brackets",
  "https://www.hackerrank.com/challenges/coin-change",
  "https://www.hackerrank.com/challenges/compare-two-linked-lists",
  "https://www.hackerrank.com/challenges/components-in-graph",
  "https://www.hackerrank.com/challenges/correctness-invariant/submissions/code/1178010",
  "https://www.hackerrank.com/challenges/cpp-hello-world",
  "https://www.hackerrank.com/challenges/crush",
  "https://www.hackerrank.com/challenges/delete-a-node-from-a-linked-list",
  "https://www.hackerrank.com/challenges/delete-duplicate-value-nodes-from-a-sorted-linked-list",
  "https://www.hackerrank.com/challenges/detect-whether-a-linked-list-contains-a-cycle",
  "https://www.hackerrank.com/challenges/equal-stacks",
  "https://www.hackerrank.com/challenges/find-the-merge-point-of-two-joined-linked-lists",
  "https://www.hackerrank.com/challenges/game-of-two-stacks",
  "https://www.hackerrank.com/challenges/get-the-value-of-the-node-at-a-specific-position-from-the-tail",
  "https://www.hackerrank.com/challenges/insert-a-node-at-a-specific-position-in-a-linked-list",
  "https://www.hackerrank.com/challenges/insert-a-node-at-the-head-of-a-linked-list",
  "https://www.hackerrank.com/challenges/insert-a-node-at-the-tail-of-a-linked-list",
  "https://www.hackerrank.com/challenges/insert-a-node-into-a-sorted-doubly-linked-list",
  "https://www.hackerrank.com/challenges/largest-rectangle",
  "https://www.hackerrank.com/challenges/maximum-element",
  "https://www.hackerrank.com/challenges/maxsubarray",
  "https://www.hackerrank.com/challenges/merge-two-sorted-linked-lists",
  "https://www.hackerrank.com/challenges/merging-communities",
  "htx",
  "i",
  "i%M",
  "i%m",
  "i&-i",
  "i&x",
  "i(1",
  "i(2",
  "i(3",
  "i(6",
  "i(8",
  "i(N",
  "i(b",
  "i(c",
  "i(k",
  "i(m",
  "i(n",
  "i(q",
  "i(w",
  "i)%m",
  "i)*a[l",
  "i)*inv[M%i]%M",
  "i)*inv[m%i]%m",
  "i)+1",
  "i*2",
  "i*2;j<=n;j+=i",
  "i*i",
  "i*i)%M",
  "i*i)%m",
  "i*x",
  "i++",
  "i+1",
  "i+1;j",
  "i+1],r",
  "i+2",
  "i+b",
  "i+j",
  "i+k",
  "i+r[k],v",
  "i+sentence_length",
  "i+y[l],v",
  "i,0",
  "i--",
  "i-1",
  "i-1,j-1",
  "i-1]=s2[n",
  "i-2",
  "i-3",
  "i-4",
  "i-5",
  "i.",
  "i.e",
  "i.e.",
  "i1",
  "i2",
  "i2n",
  "i2n.push_back(s",
  "i2n[a1",
  "i2n[b1",
  "i2n](ii",
  "i;j",
  "i;j++",
  "i;l",
  "i;x",
  "i<=m+n",
  "i='A';i<='Z';i++",
  "i='a';i<='z';i++",
  "i=0",
  "i=0,j=0",
  "i=0,j=0,c=0",
  "i=0,j=0;i",
  "i=0,j=1;i<=n;i++",
  "i=0,k=1;i",
  "i=0,l=0,r=-1;i",
  "i=0;(i+1)*(i+1)-i*i<=d;i++",
  "i=0;;i++",
  "i=0;i",
  "i=0;i<105;i++",
  "i=0;i<128;i++",
  "i=0;i<12;i++",
  "i=0;i<26;i++",
  "i=0;i<27;i++",
  "i=0;i<3;i++",
  "i=0;i<3;i++)cin>>a[i",
  "i=0;i<4;i++",
  "i=0;i<8;i++",
  "i=0;i<=(n-1)%m;i++)cin>>s",
  "i=0;i<=T;i++",
  "i=0;i<=m;i++)p[i]=i",
  "i=0;i<=t;i++",
  "i=1",
  "i=1,j=1;i",
  "i=1;i",
  "i=1;i*x<=n;i++",
  "i=1;i<=m;i++",
  "i=1;i<=n;i++",
  "i=1;i<=t;i++",
  "i=1LL<<60,j=0;i>0;i/=2",
  "i=1ll<<60,j=0;i>0;i/=2",
  "i=2*n;i>0;i--",
  "i=2;i",
  "i=2;i<=n;i++",
  "i=80",
  "i>=",
  "i>=k&&i+k",
  "i>=k+1&&i+k",
  "iQ",
  "iQ++",
  "i[0",
  "i[N",
  "i[]={-1,0,0,1",
  "i[a",
  "i[b",
  "i[i",
  "i[l",
  "i[n",
  "i[p",
  "i[s",
  "i[u",
  "i[v",
  "i[x",
  "i\\n",
  "i],r",
  "i].first",
  "i][0",
  "i][1",
  "i][j",
  "i][y1",
  "i][y2",
  "ia",
  "ia.",
  "ial",
  "ian",
  "ias",
  "ibi",
  "ibr",
  "ica",
  "ice",
  "ich",
  "ici",
  "ics",
  "ict",
  "id",
  "id++",
  "id.",
  "id.push_back(u",
  "id[21",
  "id_map",
  "id_map.size",
  "id_map[i",
  "id_map[it",
  "id_map[k",
  "ide",
  "identical",
  "identifier",
  "identifiers",
  "identifiers.count(input",
  "identifiers[input",
  "identity",
  "ido",
  "ids",
  "idx",
  "idx(1",
  "idx++",
  "idx.push_back(k",
  "idx.size",
  "idx1",
  "idx2",
  "idx[j",
  "idx[ns[i",
  "ie1",
  "ie2",
  "ied",
  "ien",
  "ier",
  "ies",
  "ies\\n",
  "if",
  "if(!(x%q))c++",
  "if(!a[i",
  "if(!a[i]&&!r[i])f(i",
  "if(!a[v",
  "if(!a[v]||(v!=p&&a[v]<a[u]))e.emplace_back(u",
  "if(!a[x][y",
  "if(!b[i",
  "if(!b[u][v]&&a[u][v]==",
  "if(!c)break",
  "if(!c[i",
  "if(!c[i][j]&&a[i][j]=='W",
  "if(!c[i][j]&&a[i][j]=='w",
  "if(!c[k",
  "if(!c[v",
  "if(!h)break",
  "if(!i||(e[i-1][j]&2))cout<<\"+---",
  "if(!j||e[i][j-1]&1)cout<<\"|",
  "if(!l)break",
  "if(!m)break",
  "if(!m)m",
  "if(!m[c])m[c]=++n",
  "if(!m[x])m[x]=++n",
  "if(!m[y])m[y]=++n",
  "if(!n)break",
  "if(!n)continue",
  "if(!o)cout<<\"NO\\n",
  "if(!o)cout<<\"no",
  "if(!o)cout<<\"no\\n",
  "if(!ok",
  "if(!ok)break",
  "if(!ok)l--",
  "if(!p)cout<<\"im",
  "if(!r[i][j]&&a[i][j]=='X",
  "if(!r[i][j]&&a[i][j]=='x",
  "if(!r[j])dfs3(j",
  "if(!r[x[0",
  "if(!s[i",
  "if(!s[i])a.push_back(i",
  "if(!s[i])dfs1(i",
  "if(!s[i][0]&&a[i][0]=='w",
  "if(!s[i][j",
  "if(!s[i][j]&&(a[i][j]=='*'||a[i][j]=='X",
  "if(!s[i][j]&&(a[i][j]=='*'||a[i][j]=='x",
  "if(!s[i][j]&&a[i][j]!=",
  "if(!s[i][j]&&a[i][j]=='1",
  "if(!s[j",
  "if(!s[j])dfs(j",
  "if(!s[j])dfs1(j",
  "if(!s[u",
  "if(!s[u])q.push({d[u],u",
  "if(!s[u])q.push({k",
  "if(!s[u][v])dfs(u",
  "if(!s[v",
  "if(!s[w])q.push({d[w],h[w].size(),w",
  "if(!s[w])q.push({d[w],w",
  "if(!t.count({a",
  "if(!t[a[i",
  "if(!t[i",
  "if(!t[j])dfs2(j",
  "if(!t[k][c-'a",
  "if(!t[v",
  "if(!u)break",
  "if(!v)break",
  "if(!visited[i",
  "if(!visited[neighbor",
  "if(!w&&b)y+=c",
  "if(!w)break",
  "if(!w[i",
  "if(!w[v",
  "if(!x",
  "if(!x)break",
  "if(!x.count(r))x[r]=n++",
  "if(!x.count(s))x[s]=n++",
  "if(!x[i][j",
  "if(!x[u])x[u]=++n",
  "if(!x[v])x[v]=++n",
  "if(!z)M",
  "if(!z)m",
  "if((c>='A'&&c<='Z')||(c>='a'&&c<='z'))b++",
  "if((c>='a'&&c<='z')||(c>='a'&&c<='z'))b++",
  "if(T)cout<<\"\\n",
  "if(T>1)cout<<\"\\n",
  "if(a",
  "if(a&&b",
  "if(a==b",
  "if(a==b)continue",
  "if(a[0]>a[1]&&a[0]>a[n-1])c++",
  "if(a[i-1]>k)break",
  "if(a[i]!=a[j])continue",
  "if(a[i].empty",
  "if(a[i].size()>M",
  "if(a[i].size()>m",
  "if(a[i]==a[i-1",
  "if(a[i]==b[j])j++",
  "if(a[i]>=13&&(s+13)%7==6)c++",
  "if(a[i]>a[i-1]&&a[i]>a[i+1",
  "if(a[i]>m",
  "if(a[i][j",
  "if(a[i][j]!=",
  "if(a[i][j]!=m)dfs(i",
  "if(a[i][j]==",
  "if(a[i][j]=='O')x++",
  "if(a[i][j]=='X')y++",
  "if(a[i][j]=='o')x++",
  "if(a[i][j]=='x')y++",
  "if(a[j]!=b[j",
  "if(a[k]&i&&j!=k)a[k]^=a[j",
  "if(a[n-1]>a[0]&&a[n-1]>a[n-2])c++",
  "if(a[p]>300",
  "if(a[u]&&b[u]<w",
  "if(a[u])return",
  "if(a[u][v]==",
  "if(a[u][v]=='O')w=1",
  "if(a[u][v]=='X')a[y][x]=",
  "if(a[u][v]=='X')b=1",
  "if(a[u][v]=='o')w=1",
  "if(a[u][v]=='x')a[y][x]=",
  "if(a[u][v]=='x')b=1",
  "if(a[v])continue",
  "if(a[v].empty())dfs(v",
  "if(a[y+dy[o]][x+dx[o]]!='*'){y+=dy[o];x+=dx[o",
  "if(abs(a[i]-a[j])<=d",
  "if(accumulate(&a[0],&a[k],0)>k*(k-1)+s)o=0",
  "if(accumulate(&a[0],&a[n],0)%2)o=0",
  "if(adjustedTotalMinutes",
  "if(adjustedtotalminutes",
  "if(arr[i].first",
  "if(b",
  "if(b.size()>i)c+=b[i",
  "if(b[i].size()!=2||a[b[i][0]][b[i][1",
  "if(b[i]==b[j])ok",
  "if(b[i]>=m",
  "if(b[i][j])return",
  "if(b[j]<a[i]-1)j++",
  "if(b[j]>=a[i]||j==r-1||b[j+1]>a[i",
  "if(b[j]>a[i]+1)i++",
  "if(b[u]>k)continue",
  "if(b[v]>=a[u])d[u]=1",
  "if(b[v]>a[u])e.emplace_back(min(u",
  "if(b[v]>a[u])e.emplace_back(v",
  "if(c",
  "if(c%2==0&&d==c+1)cout<<\"SI\\n",
  "if(c%2==0&&d==c+1)cout<<\"si\\n",
  "if(c)q*=((c-1)/m+1)*i",
  "if(c.empty())break",
  "if(c=='!')a++",
  "if(c=='F",
  "if(c=='L",
  "if(c=='L')o=!o?3",
  "if(c=='Q'){q=1;break",
  "if(c=='R",
  "if(c=='R')o",
  "if(c=='f",
  "if(c=='l",
  "if(c=='l')o=!o?3",
  "if(c=='q'){q=1;break",
  "if(c=='r",
  "if(c=='r')o",
  "if(c==1",
  "if(c==2",
  "if(c==3)cout<<(find(u)==find(v))<<\"\\n",
  "if(c==k)break",
  "if(c>0)for(int",
  "if(c[i]!=n)o=0",
  "if(c[i][j",
  "if(c[u]&&d[u]<w",
  "if(c[v])cout<<c[v",
  "if(cin.eof())return",
  "if(cin.peek",
  "if(count1",
  "if(count2",
  "if(current_sum",
  "if(d1<=tl&&d1+d2<=tm)p",
  "if(d1<=tm&&d1+d2<=tl)p",
  "if(d[c]==-1)d[c]=e++",
  "if(d[i",
  "if(d[k]>=0",
  "if(d[s[0]]==-1)d[s[0]]=e++",
  "if(d[s[1]]==-1)d[s[1]]=e++",
  "if(d[u]!=-1)return",
  "if(d[u]!=-10000000)return",
  "if(d[u]>=0)continue",
  "if(d[v]*2>=b[v])f.push_back(v",
  "if(d[v]==-1",
  "if(d[v]==-10000000",
  "if(d[v]>=0)continue",
  "if(dfs(u",
  "if(duration_type",
  "if(e<0)e+=8",
  "if(e[a]!=-1",
  "if(e[a]!=-1&&e[b]!=-1",
  "if(e[a]!=-1)unite(e[a],b",
  "if(e[a]!=e[b",
  "if(e[a]==b",
  "if(e[a]==b)continue",
  "if(e[b]!=-1",
  "if(e[b]!=-1)unite(e[b],a",
  "if(e[u])continue",
  "if(end_pos",
  "if(f[i][j]<0)printf",
  "if(f[i][j]>0)printf(\"%",
  "if(fabs(y",
  "if(find(i)==find(j))continue",
  "if(find(u)==find(v))a++",
  "if(g[i].empty())a++",
  "if(h[i].empty",
  "if(i",
  "if(i%k==k-1",
  "if(i)a[i]+=a[i-1",
  "if(i*(i+1)/2>=n",
  "if(i+k",
  "if(i<0||i>=n)return",
  "if(i<2)b[i+1][j].flip",
  "if(i==3",
  "if(i==c&&j==d)return",
  "if(i==j)return",
  "if(i==n",
  "if(i==p[i])return",
  "if(i==z",
  "if(i>0&&b[i-1][j])e.push_back(make_tuple(b[i-1][j],b[i][j",
  "if(i>0&&j",
  "if(i>0&&j>0&&b[i-1][j-1])e.push_back(make_tuple(b[i-1][j-1],b[i][j",
  "if(i>0)b[i-1][j].flip",
  "if(i>0)c+=!a[i-1][j",
  "if(index",
  "if(isValidString(currentString",
  "if(isvalidstring(currentstring",
  "if(it->second",
  "if(j",
  "if(j%2)s+=j",
  "if(j<0||j>=m)return",
  "if(j<2)b[i][j+1].flip",
  "if(j>0&&b[i][j-1])e.push_back(make_tuple(b[i][j-1],b[i][j",
  "if(j>0)b[i][j-1].flip",
  "if(j>0)c+=!a[i][j-1",
  "if(k",
  "if(k*k==s.size())break",
  "if(k1",
  "if(k1==k2||t.count({k2,k1})||t.count({k1,k2",
  "if(k<0)k=0",
  "if(k==c&&l++<2",
  "if(k==m)r.push_back(i+1",
  "if(k==n",
  "if(k==n)continue",
  "if(k>0",
  "if(l",
  "if(l.empty())break",
  "if(l==0&&(!j||e[i][j-1]&1))continue",
  "if(l==1&&(!i||e[i-1][j]&2))continue",
  "if(l==2&&(e[i][j]&1))continue",
  "if(l==3&&(e[i][j]&2))continue",
  "if(l>=3)c.push_back(i",
  "if(m[i",
  "if(m[x]&&m[y",
  "if(myStack.empty",
  "if(mystack.empty",
  "if(n*n==n2",
  "if(n==-1)break",
  "if(n==3)cout<<6<<endl",
  "if(n>=5)cout<<0<<endl",
  "if(n[i]&&!c[i",
  "if(o)cout<<\"WAKE",
  "if(o)cout<<\"wake",
  "if(o==",
  "if(o=='",
  "if(o=='E",
  "if(o=='E')o=",
  "if(o=='E')o='N",
  "if(o=='N",
  "if(o=='N')o='E",
  "if(o=='N')o='W",
  "if(o=='S')o='E",
  "if(o=='S')o='W",
  "if(o=='e",
  "if(o=='e')o=",
  "if(o=='e')o='n",
  "if(o=='n",
  "if(o=='n')o='e",
  "if(o=='n')o='w",
  "if(o=='s')o='e",
  "if(o=='s')o='w",
  "if(ok)cout<<\"BICOLORABLE.\\n",
  "if(ok)cout<<\"bicolorable.\\n",
  "if(p.size()==9",
  "if(p==-1)d[u]=c>1",
  "if(p==2",
  "if(p[i",
  "if(p[x",
  "if(p[x]==x)return",
  "if(q)break",
  "if(q=='M",
  "if(q=='c')unite(u",
  "if(q=='m",
  "if(r",
  "if(r2.size()<r.size",
  "if(r[i",
  "if(r[i])o=0",
  "if(r[i][j]&&!c[r[i][j",
  "if(radius",
  "if(s",
  "if(s.count(k))c",
  "if(s.empty())break",
  "if(s.size()==3",
  "if(s1[i]==s2[j",
  "if(s==\"0\")break",
  "if(s[0]!='L'&&s[0]!='W')break",
  "if(s[0]!='l'&&s[0]!='w')break",
  "if(s[0]=='#')break",
  "if(s[0]=='*')break",
  "if(s[0]=='D'&&t[0]=='T')cout<<\"V=\"<<a",
  "if(s[0]=='D'&&t[0]=='V')cout<<\"T=\"<<a",
  "if(s[0]=='T'&&t[0]=='D')cout<<\"V=\"<<b",
  "if(s[0]=='T'&&t[0]=='V')cout<<\"D=\"<<a*b<<\"\\n",
  "if(s[0]=='V'&&t[0]=='D')cout<<\"T=\"<<b",
  "if(s[0]=='V'&&t[0]=='T')cout<<\"D=\"<<a*b<<\"\\n",
  "if(s[0]=='_')break",
  "if(s[0]=='d'&&t[0]=='t')cout<<\"v=\"<<a",
  "if(s[0]=='d'&&t[0]=='v')cout<<\"t=\"<<a",
  "if(s[0]=='t'&&t[0]=='d')cout<<\"v=\"<<b",
  "if(s[0]=='t'&&t[0]=='v')cout<<\"d=\"<<a*b<<\"\\n",
  "if(s[0]=='v'&&t[0]=='d')cout<<\"t=\"<<b",
  "if(s[0]=='v'&&t[0]=='t')cout<<\"d=\"<<a*b<<\"\\n",
  "if(s[2]=='L')t=\"R",
  "if(s[2]=='R')t=\"L",
  "if(s[2]=='l')t=\"r",
  "if(s[2]=='r')t=\"l",
  "if(s[a]==-1)s[a]=c++",
  "if(s[b]==-1)s[b]=c++",
  "if(s[i",
  "if(s[i]<s[j])swap(i",
  "if(s[i]==':')continue",
  "if(s[i]==';')i++",
  "if(s[i]==-1",
  "if(s[i][j]=='@",
  "if(s[i][n-1",
  "if(s[l-1]=='e'&&s[l-2]=='f')cout<<s.substr(0,l-2)<<\"ves\\n",
  "if(s[l-1]=='f')cout<<s.substr(0,l-1)<<\"ves\\n",
  "if(s[l-1]=='x'||s[l-1]=='s'||s[l-1]=='o'||(s[l-1]=='h'&&s[l-2]=='c'))cout<<s<<\"es\\n",
  "if(s[l-1]=='y')cout<<s.substr(0,l-1)<<\"ies\\n",
  "if(s[s.size()-1]=='B')a.push_back(l",
  "if(s[s.size()-1]=='b')a.push_back(l",
  "if(s[u]!=-1)return",
  "if(s[u]<=k",
  "if(s[v",
  "if(s[v]==-1",
  "if(s[v]>s[u])swap(u",
  "if(start",
  "if(t)cout<<\"\\n",
  "if(t.size()==n",
  "if(t.size()==n)cout<<t<<\"\\n",
  "if(t>1)cout<<\"\\n",
  "if(t[v])continue",
  "if(timeChange",
  "if(timechange",
  "if(u",
  "if(u!=v)e.emplace_back(u",
  "if(u==n-1",
  "if(u==t)break",
  "if(u==v)return",
  "if(u==x)break",
  "if(u>=0",
  "if(u>=0&&u",
  "if(u>=0&&u<8&&v>=0&&v<8&&!t[u][v",
  "if(v!=-1",
  "if(v!=p)b[u]=min(b[u],a[v",
  "if(v!=w&&!t[v",
  "if(w&&!b)x+=c",
  "if(w==W",
  "if(w==u)break",
  "if(w==w",
  "if(w[j]<=i&&dp[i",
  "if(x",
  "if(x!=y",
  "if(x)b[j].push_back(i",
  "if(x==-1)break",
  "if(x==0",
  "if(x==X",
  "if(x==a)c++",
  "if(x==b)d++",
  "if(x==x",
  "if(x>0&&!c[y][x-1]&&a[y][x-1]=='W')dfs(y",
  "if(x>0&&!c[y][x-1]&&a[y][x-1]=='w')dfs(y",
  "if(x>0&&!s[y][x-1]&&a[y][x-1]=='1')dfs(y",
  "if(x>0&&!s[y][x-1]&&a[y][x-1]=='w')dfs(y",
  "if(x>1)N",
  "if(x>1)n",
  "if(y",
  "if(y<0||y>=n||x<0||x>=m)cout<<k",
  "if(y==0",
  "if(y==Y",
  "if(y==y",
  "if(y>0&&!c[y-1][x]&&a[y-1][x]=='W')dfs(y-1,x",
  "if(y>0&&!c[y-1][x]&&a[y-1][x]=='w')dfs(y-1,x",
  "if(y>0&&!s[y-1][x]&&a[y-1][x]=='1')dfs(y-1,x",
  "if(y>0&&!s[y-1][x]&&a[y-1][x]=='w')dfs(y-1,x",
  "if(y>0&&x",
  "if(y>0&&x>0&&!c[y-1][x-1]&&a[y-1][x-1]=='W')dfs(y-1,x-1,k",
  "if(y>0&&x>0&&!c[y-1][x-1]&&a[y-1][x-1]=='w')dfs(y-1,x-1,k",
  "if(y>0&&x>0&&!s[y-1][x-1]&&a[y-1][x-1]=='1')dfs(y-1,x-1",
  "if(y>0&&x>0&&!s[y-1][x-1]&&a[y-1][x-1]=='w')dfs(y-1,x-1",
  "if(z!=c[k",
  "if(z>=n",
  "if.",
  "iff",
  "ift",
  "ify",
  "igh",
  "ign",
  "ignore",
  "ignoring",
  "igual\\n",
  "ii",
  "ii>,greater",
  "iici",
  "iii",
  "iii>,greater",
  "iiii",
  "iit",
  "ija",
  "ike",
  "ild",
  "ile",
  "ill",
  "ill.",
  "ils",
  "ilt",
  "im",
  "image",
  "ime",
  "immediate",
  "implementation",
  "implies",
  "implies(bool",
  "imposible\\n",
  "impossible",
  "impossible\\n",
  "improve",
  "improves",
  "improving",
  "in",
  "in'",
  "in(b",
  "in(c",
  "in(l",
  "in(line",
  "in(n",
  "in(s",
  "in(s.substr(0,s.size()-1",
  "in(s.substr(i+1",
  "in(t",
  "in.end",
  "in>>l",
  "in>>q>>u>>v",
  "in>>s",
  "in>>u",
  "in>>u>>r",
  "in>>x>>y>>k",
  "in>>y>>x",
  "inDegree(n",
  "inDegree[i",
  "inDegree[u]--",
  "inDegree[v",
  "inDegree[v]++",
  "inQueue(limit",
  "inQueue(n",
  "inQueue[currentNode",
  "inQueue[e.u",
  "inQueue[peopleInQueue++",
  "in[0",
  "in[i",
  "in[n",
  "in[s[j",
  "in[v]++",
  "in_degree(n",
  "in_degree[i",
  "in_degree[v",
  "ina",
  "ina(s",
  "inb",
  "inb(t",
  "inc",
  "inc(a",
  "inc(ll",
  "inc.",
  "incident",
  "include",
  "included",
  "includes",
  "including",
  "inclusive",
  "incoming",
  "incoming_.find(it->second.to",
  "incoming_[to].emplace_back(from",
  "incoming_edges(components_count",
  "incoming_edges[i",
  "incoming_edges[strong_component_sizes[neighbor",
  "incr",
  "increase",
  "increase(a",
  "increase(int",
  "increase(l",
  "increased",
  "increases",
  "increasing",
  "increasing\\n",
  "increment",
  "incremented",
  "incrementing",
  "ind",
  "ind.",
  "indegree(n",
  "indegree[i",
  "indegree[u]--",
  "indegree[v",
  "indegree[v]++",
  "index",
  "index(1",
  "index(v",
  "index(vi",
  "index++",
  "index--",
  "index.push_back(new_index",
  "index.size",
  "index2names",
  "index2names.push_back(input",
  "index2names[a1",
  "index2names[b1",
  "index2names[nameIndex",
  "index2names[nameindex",
  "index2names](ii",
  "indexOfPrime",
  "indexOfPrime(MAX_PRIME",
  "indexOfPrime[factor",
  "indexOfPrime[primes[i",
  "index[j",
  "index_end",
  "index_start",
  "index_with_minimum_sum",
  "indexed",
  "indexed_multiset",
  "indexed_set",
  "indexed_set.erase(it",
  "indexed_set.find_by_order(indexed_set.order_of_key(data[x",
  "indexed_set.insert(data[i",
  "indexed_set.insert(y",
  "indexed_set.order_of_key(x",
  "indexed_set.order_of_key(y",
  "indexedset",
  "indexes",
  "indexes(n",
  "indexes[a[i",
  "indexes[a[j",
  "indexes[i",
  "indexing",
  "indexmatrix",
  "indexofprime",
  "indexofprime(max_prime",
  "indexofprime[factor",
  "indexofprime[primes[i",
  "indextoindexmap",
  "india",
  "indicate",
  "indicates",
  "indicating",
  "indicator",
  "indices",
  "individual",
  "ine",
  "ineligible",
  "inf",
  "inf=1000000000",
  "infinite",
  "infinitely",
  "infinity",
  "info",
  "information",
  "ing",
  "inglaterra",
  "initial",
  "initial(x",
  "initialState",
  "initial_direction",
  "initial_value",
  "initial_velocity",
  "initial_x",
  "initial_y",
  "initialization",
  "initialize",
  "initialize_ancestors",
  "initialized",
  "initializes",
  "initializing",
  "initially",
  "initials",
  "initials(length",
  "initials[i",
  "initialstate",
  "ink",
  "inline",
  "inn",
  "input",
  "input(choiceOrIndices.substr(2",
  "input(choiceorindices.substr(2",
  "input(cupName",
  "input(cupname",
  "input(line",
  "input(line.substr(current",
  "input(size[0",
  "input.empty",
  "input.length",
  "input.size",
  "input.substr(8",
  "input.substr(endPos",
  "input.substr(endpos",
  "input.substr(startPos",
  "input.substr(startpos",
  "inputArray",
  "inputArray[i",
  "inputChar",
  "inputData",
  "inputDeck",
  "inputDeck.length",
  "inputDeck[j",
  "inputIndex",
  "inputIndex++",
  "inputLine",
  "inputLine(line",
  "inputLine.empty",
  "inputN",
  "inputName",
  "inputName.length",
  "inputName[i",
  "inputNumber",
  "inputStr",
  "inputStream",
  "inputStream(inputLine",
  "inputString",
  "inputString.size",
  "inputString[i",
  "inputUppercaseChar",
  "input[0",
  "input[0][0",
  "input[0][1",
  "input[0][2",
  "input[1",
  "input[2",
  "input[3][3",
  "input[endPos++",
  "input[endpos++",
  "input[i",
  "input[i][j",
  "input[input.size",
  "input[newX][newY",
  "input[newx][newy",
  "input[x][y",
  "input_grid(rows",
  "input_grid[row][col",
  "input_line",
  "input_line.size",
  "input_line[0",
  "input_line[1",
  "input_line[3",
  "input_sequence[k",
  "input_sequence[n",
  "input_str",
  "input_str.length",
  "input_string",
  "input_string.empty",
  "input_string.end",
  "input_string.length",
  "input_string.pop_back",
  "input_string.size",
  "input_string[current_index",
  "input_string[i",
  "input_string[start_index",
  "inputarray",
  "inputarray[i",
  "inputchar",
  "inputdata",
  "inputdeck",
  "inputdeck.length",
  "inputdeck[j",
  "inputindex",
  "inputindex++",
  "inputline",
  "inputline(line",
  "inputline.empty",
  "inputn",
  "inputname",
  "inputname.length",
  "inputname[i",
  "inputnumber",
  "inputs",
  "inputs(101",
  "inputs.end",
  "inputs[0",
  "inputs[5",
  "inputs[i",
  "inputs[i].size",
  "inputs[i][j",
  "inputstr",
  "inputstream",
  "inputstream(inputline",
  "inputstring",
  "inputstring.size",
  "inputstring[i",
  "inputted",
  "inputting",
  "inputuppercasechar",
  "inqueue(limit",
  "inqueue(n",
  "inqueue[currentnode",
  "inqueue[e.u",
  "inqueue[peopleinqueue++",
  "ins",
  "insert",
  "insert(node",
  "insert(segments",
  "insert(tree",
  "insert(v",
  "insert(vn",
  "insertAtPosition(Node",
  "insertAtTail(Node",
  "insertSortedNode(Node",
  "insertathead(node",
  "insertatposition(node",
  "insertattail(node",
  "inserted",
  "inserting",
  "insertion",
  "insertionSort",
  "insertionSort(a",
  "insertionSort(vi",
  "insertionsort",
  "insertionsort(a",
  "insertionsort(vi",
  "insertnth(node",
  "insertsortednode(node",
  "inside",
  "instance",
  "instances",
  "instead",
  "instructionType",
  "instructions",
  "instructiontype",
  "int",
  "int(4",
  "int(a.size",
  "int(b.size",
  "int(digits",
  "int(g[from].size",
  "int(g[to].size",
  "int(g[v].size",
  "int(int",
  "int(int)>find=[&](int",
  "int(logs[n",
  "int(p[n",
  "int(pos.size",
  "int(result_fft[length",
  "int(x/2",
  "int)>dfs2=[&](int",
  "int)>dfs=[&](int",
  "int)>f=[&](int",
  "int)>unite=[&](int",
  "int128",
  "int32_min",
  "int64",
  "int64)(i",
  "int>((a",
  "int>((year",
  "int>(0",
  "int>(1",
  "int>(2",
  "int>(3",
  "int>(4",
  "int>(cols",
  "int>(current.remaining_cities.size",
  "int>(dists.size",
  "int>(grid.size",
  "int>(gridSize",
  "int>(grid[x].size",
  "int>(gridsize",
  "int>(log10Values[number",
  "int>(log10values[number",
  "int>(log2(numberOfIntervals",
  "int>(log2(numberofintervals",
  "int>(m",
  "int>(map[0].size",
  "int>(mice",
  "int>(n",
  "int>(outgoing_.size",
  "int>(outgoing_[from].size",
  "int>(s[i])]++",
  "int>(sqrt(n",
  "int>(sqrt(n))].push_back(i",
  "int>,rb_tree_tag",
  "int>::infinity",
  "int>::max",
  "int>>(k",
  "int>>(n",
  "int>>>(n",
  "int>{order[0",
  "intMatrix",
  "intVector",
  "int_max",
  "int_min",
  "int_point",
  "integer",
  "integer_stream_a",
  "integer_stream_a(string1",
  "integer_stream_b",
  "integer_stream_b(string2",
  "integermatrix",
  "integers",
  "integervector",
  "integervector(size[1",
  "integral",
  "interested",
  "intermediate",
  "internal",
  "intersection",
  "interval",
  "interval.get<0",
  "interval.get<1",
  "intervals",
  "intervals(N",
  "intervals(n",
  "intervals.end",
  "intmatrix",
  "into",
  "intset",
  "intvector",
  "inv",
  "inv++",
  "invF[N",
  "invF[a",
  "invF[b",
  "invFact(N",
  "invFact[MOD",
  "invFact[a[i",
  "invFact[i",
  "inv[0",
  "inv[1",
  "inv[1]=1",
  "inv[2",
  "inv[2*N",
  "inv[2*n",
  "inv[M",
  "inv[N",
  "inv[i",
  "inv[i]=M-(M",
  "inv[i]=m-(m",
  "inv[m",
  "inv[n",
  "inv[order[i]]=i",
  "inv[u",
  "inv[v",
  "invalid",
  "invalid.emplace_back(-cache[D][j",
  "invalid.emplace_back(-cache[D][y",
  "invalid.emplace_back(-cache[L][i",
  "invalid.emplace_back(-cache[L][y",
  "invalid.emplace_back(-cache[R][i",
  "invalid.emplace_back(-cache[R][y",
  "invalid.emplace_back(-cache[U][j",
  "invalid.emplace_back(-cache[U][y",
  "invalid.emplace_back(-cache[d][j",
  "invalid.emplace_back(-cache[d][y",
  "invalid.emplace_back(-cache[l][i",
  "invalid.emplace_back(-cache[l][y",
  "invalid.emplace_back(-cache[r][i",
  "invalid.emplace_back(-cache[r][y",
  "invalid.emplace_back(-cache[u][j",
  "invalid.emplace_back(-cache[u][y",
  "invalidInput",
  "invalidInput(-1",
  "invalid\\n",
  "invalid_argument(\"Invalid",
  "invalid_argument(\"invalid",
  "invalidinput",
  "invalidinput(-1",
  "inverse",
  "inverse_adjacency_list",
  "inverse_adjacency_list.resize(number_of_nodes",
  "inverse_adjacency_list[current_node",
  "inverse_adjacency_list[target].push_back(source",
  "inverse_base_power",
  "inverse_order",
  "inverse_order.resize(main_graph_size",
  "inverse_order[current_vertex",
  "inverse_order[edges[i][0",
  "inverse_order[edges[i][1",
  "inverse_order[order[i",
  "inverses",
  "inversion",
  "inversions",
  "inversions++",
  "invf[0",
  "invf[0]=1",
  "invf[1",
  "invf[2",
  "invf[2*N",
  "invf[2*n",
  "invf[N",
  "invf[a",
  "invf[b",
  "invf[freq[i",
  "invf[i",
  "invf[i]=invf[i-1]*inv[i]%M",
  "invf[i]=invf[i-1]*inv[i]%m",
  "invf[m",
  "invf[n",
  "invf[n-1",
  "invfact(n",
  "invfact[a[i",
  "invfact[i",
  "invfact[mod",
  "invpow2[0",
  "invpow2[N+1",
  "invpow2[i",
  "invpow2[n",
  "invpow2[n+1",
  "invs",
  "invs(m",
  "invs.end",
  "invs[i",
  "in\u2019",
  "iod",
  "iomanip",
  "ion",
  "ior",
  "ios",
  "ios::sync_with_stdio",
  "ios::sync_with_stdio(0",
  "ios::sync_with_stdio(false",
  "ios_base::sync_with_stdio(0",
  "ios_base::sync_with_stdio(false",
  "iostream",
  "iota(parent.begin",
  "ip[primes.back",
  "ip[primes[i",
  "ipow(2",
  "ipow(int",
  "ipq",
  "ips",
  "iq",
  "iq++",
  "ird",
  "ire",
  "ireland",
  "irl",
  "irlanda",
  "irs",
  "is",
  "is.",
  "isArbitragePresent",
  "isBalanced",
  "isConnected(i",
  "isConnected(int",
  "isConnected(neighbor",
  "isDecreasing",
  "isDestinationReached(int",
  "isDestinationReached(y",
  "isDiabolic",
  "isEnd",
  "isEsoteric",
  "isHidden",
  "isIncreasing",
  "isJolly",
  "isLeap(int",
  "isLeap(year",
  "isLeapYear(int",
  "isLeapYear(y",
  "isLeapYear(year",
  "isLost",
  "isMiner",
  "isMoose",
  "isMultipleOrDivisor(ll",
  "isMultipleOrDivisor(number1",
  "isPossible",
  "isPrime",
  "isPrime(MAX_PRIME",
  "isPrime(int",
  "isPrime[0",
  "isPrime[1",
  "isPrime[MAX",
  "isPrime[factor",
  "isPrime[i",
  "isPrime[j",
  "isSafe",
  "isSubnormal",
  "isValid",
  "isValidCalculation",
  "isValidMove(board",
  "isValidMove(const",
  "isValidMove(int",
  "isValidMove(newR",
  "isValidNeighbor(int",
  "isValidNeighbor(x",
  "isValidSequence(0",
  "isValidSequence(int",
  "isValidSequence(sum",
  "isValidString(const",
  "is[0",
  "is[1",
  "is[2",
  "is[changes",
  "is_biconnected(i",
  "is_biconnected(int",
  "is_biconnected(v",
  "is_black_win",
  "is_chordal",
  "is_eligible",
  "is_prime[32005",
  "is_prime[i",
  "is_prime[primes[i",
  "is_prime[x",
  "is_sum_odd",
  "is_valid",
  "isalpha(c",
  "isarbitragepresent",
  "isbalanced",
  "isconnected(i",
  "isconnected(int",
  "isconnected(neighbor",
  "isdecreasing",
  "isdestinationreached(int",
  "isdestinationreached(y",
  "isdiabolic",
  "isdigit(cupName[0",
  "isdigit(cupname[0",
  "ise",
  "isend",
  "isesoteric",
  "ish",
  "ishidden",
  "isi",
  "isincreasing",
  "isjolly",
  "island",
  "island_sizes",
  "island_sizes.end",
  "island_sizes.push_back({count(grid[y].begin",
  "isleap(i",
  "isleap(int",
  "isleap(y",
  "isleap(year",
  "isleapyear(int",
  "isleapyear(y",
  "isleapyear(year",
  "islost",
  "islower(a[end",
  "islower(c",
  "isminer",
  "ismoose",
  "ismultipleordivisor(ll",
  "ismultipleordivisor(number1",
  "isolated",
  "isolated_cells",
  "isolated_vertices",
  "isolated_vertices.push_back(j",
  "isolated_vertices.size",
  "ispossible",
  "isprime",
  "isprime(int",
  "isprime(max_prime",
  "isprime[0",
  "isprime[1",
  "isprime[factor",
  "isprime[i",
  "isprime[j",
  "isprime[max",
  "iss",
  "iss(line",
  "iss(s",
  "issafe",
  "isspace(input[endPos",
  "isspace(input[endpos",
  "isspace(s[i",
  "issubnormal",
  "ist",
  "istringstream",
  "isupper(a[0",
  "isupper(c",
  "isupper(inputName[i",
  "isupper(input[0",
  "isupper(inputname[i",
  "isupper(s[0",
  "isvalid",
  "isvalidcalculation",
  "isvalidmove(board",
  "isvalidmove(const",
  "isvalidmove(int",
  "isvalidmove(newr",
  "isvalidneighbor(int",
  "isvalidneighbor(x",
  "isvalidsequence(0",
  "isvalidsequence(int",
  "isvalidsequence(sum",
  "isvalidstring(const",
  "it",
  "it's",
  "it).first",
  "it++",
  "it++->second",
  "it--",
  "it->capacity",
  "it->first",
  "it->first.back",
  "it->i",
  "it->rbegin()->second",
  "it->second",
  "it->second++",
  "it->second.capacity",
  "it->second.cost",
  "it->second.end",
  "it->second.to",
  "it->vertices.begin",
  "it->vertices.insert(i",
  "it->vertices.insert(v",
  "it.first",
  "it.second",
  "it1",
  "it2",
  "it2++",
  "it2->first",
  "it2->second",
  "ite",
  "item",
  "item.find(color",
  "item.second.end",
  "itemIndex",
  "itemMap",
  "itemMap[item",
  "itemMap[s",
  "itemMap[t",
  "itemNumber",
  "itemSequence(numberOfItems",
  "itemSequence[i",
  "itemWeights(numberOfItems",
  "itemWeights[i",
  "itemWeights[itemIndex",
  "itemindex",
  "itemmap",
  "itemmap[item",
  "itemmap[s",
  "itemmap[t",
  "itemnumber",
  "items",
  "items(n",
  "items.push_back(item",
  "items[i",
  "items[neighbor",
  "items[node",
  "itemsequence(numberofitems",
  "itemsequence[i",
  "itemweights(numberofitems",
  "itemweights[i",
  "itemweights[itemindex",
  "iter",
  "iter--",
  "iter2",
  "iterate",
  "iterates",
  "iterating",
  "iteration",
  "iterations",
  "iterator",
  "iterator--",
  "ith",
  "iti",
  "ito",
  "its",
  "itself",
  "ity",
  "it\u2019s",
  "ius",
  "ive",
  "iz.",
  "ize",
  "izz",
  "j",
  "j),a[i][j",
  "j)=q.front",
  "j)=x",
  "j)swap(a[j],a[k",
  "j*2",
  "j++",
  "j+1",
  "j+c[k",
  "j+k",
  "j+k+1",
  "j+k-1",
  "j+x[l",
  "j,++k",
  "j--",
  "j-1",
  "j.",
  "j<<=1",
  "j=0",
  "j=0;j",
  "j=0;j<3;j++",
  "j=0;j<4;j++",
  "j=0;j<5;j++",
  "j=1,i=0",
  "j=1;j",
  "j=2*i;j",
  "jIt",
  "j[]={0,-1,1,0",
  "j[l",
  "j]++",
  "j]=",
  "jan",
  "jan.",
  "january",
  "jit",
  "jk",
  "join",
  "join(i",
  "join(pa",
  "join=[&](int",
  "joinstrings",
  "jolly",
  "jor",
  "jr",
  "jr.",
  "judge",
  "jul",
  "jul.",
  "jump",
  "jumper",
  "jumpers",
  "jumps",
  "jun",
  "jun.",
  "just",
  "justo\\n",
  "k",
  "k!=l||p[a[u]]>=-1",
  "k%i",
  "k%m",
  "k&-k",
  "k'th",
  "k(0",
  "k(1",
  "k(2",
  "k(3",
  "k(4",
  "k(9",
  "k(I",
  "k(K",
  "k(T",
  "k(a",
  "k(b",
  "k(c",
  "k(e",
  "k(f",
  "k(h",
  "k(i",
  "k(j",
  "k(k",
  "k(l",
  "k(n",
  "k(p",
  "k(s",
  "k(t",
  "k(u",
  "k(v",
  "k(x",
  "k(y",
  "k(z",
  "k)/2",
  "k)=q.front",
  "k*(k-1",
  "k*2",
  "k*k",
  "k++",
  "k+1",
  "k+1)/2",
  "k+1][j",
  "k+=b",
  "k+=dfs(u",
  "k+=find(i)==find(0",
  "k+=paths[c[u]-1].size",
  "k+=q.top();q.pop",
  "k+b",
  "k+i",
  "k,3",
  "k--",
  "k-1",
  "k-1;j>=0;j--",
  "k-1<<endl",
  "k-1]==s[i+k",
  "k-2",
  "k.",
  "k/2",
  "k/=i",
  "k1",
  "k1++",
  "k1={x1",
  "k1={x1,y1},k2={x2,y2",
  "k2",
  "k2++",
  "k2={x2",
  "k;i",
  "k;i++",
  "k;i++)cout<<b[i",
  "k;i++)r+=a[i]+b[i",
  "k;j++",
  "k;t++",
  "k<0",
  "k<<\".\\n",
  "k<<\"\\n",
  "k<<endl",
  "k=(s[0]<='Z')*32",
  "k=(s[0]<='z')*32",
  "k=0",
  "k=0,l",
  "k=0;k",
  "k=0;k<8;k++",
  "k=1",
  "k=1,t",
  "k=1;k<=n;k++",
  "k=2",
  "k==n",
  "k=__gcd(a",
  "k=__gcd(p",
  "k>0",
  "k[0",
  "k[100",
  "k[N",
  "k[i",
  "k[j",
  "k[n",
  "k[u",
  "k[v",
  "k\\n",
  "k].first",
  "k].second",
  "k]==s[i+k",
  "k][j",
  "k][t",
  "k_count",
  "k_count++",
  "k_max",
  "k_min",
  "ka",
  "kah",
  "kan",
  "kan.",
  "kans",
  "kans.",
  "kattis",
  "kb",
  "kcal",
  "kebab",
  "ked",
  "keep",
  "keeping",
  "keeps",
  "ken",
  "ker",
  "kes",
  "key",
  "keys",
  "king",
  "kip",
  "kk",
  "kk++",
  "kla",
  "km",
  "knapsack",
  "knickpoint",
  "knickpoints",
  "knight",
  "knightPath(0",
  "knightPath(int",
  "knightPath(y",
  "knightPath(yy",
  "knightpath(0",
  "knightpath(int",
  "knightpath(y",
  "knightpath(yy",
  "knn",
  "known",
  "ks1",
  "ks2",
  "ks3",
  "kth",
  "ky",
  "ky.",
  "l",
  "l%2",
  "l(a",
  "l(b",
  "l(c",
  "l(d",
  "l(f",
  "l(g",
  "l(h",
  "l(i",
  "l(k",
  "l(l",
  "l(m",
  "l(n",
  "l(q",
  "l(r",
  "l(s",
  "l(t",
  "l(u",
  "l(x",
  "l)*a[l",
  "l)+llabs(M",
  "l)+llabs(m",
  "l)=a[i",
  "l)n",
  "l)p",
  "l++",
  "l+1",
  "l+r",
  "l--",
  "l-1",
  "l->sum",
  "l.",
  "l.assign(n",
  "l.empty",
  "l.end",
  "l1",
  "l2",
  "l;i++",
  "l=0",
  "l=0;l<4;l++",
  "l=1",
  "l==k",
  "lXi",
  "l[0",
  "l[26",
  "l[N",
  "l[b",
  "l[c",
  "l[i",
  "l[j",
  "l[k",
  "l[n",
  "l[s",
  "l[t",
  "l[u",
  "l[v",
  "l[v].insert(u",
  "l[x",
  "l\\n",
  "l][c",
  "l^2",
  "l_a",
  "l_x",
  "l_y",
  "la",
  "la.",
  "lab",
  "label",
  "labeling",
  "labels",
  "lac",
  "ladder",
  "ladderLength",
  "ladderlength",
  "lag",
  "lambda",
  "land",
  "land(grid_rows",
  "land[i",
  "land[i][j",
  "land[row][col",
  "lands",
  "lap",
  "lar",
  "large",
  "larger",
  "largest",
  "largest_difference",
  "largest_index",
  "largest_tile",
  "largest_value",
  "laser",
  "laser_ends(Q",
  "laser_ends(q",
  "laser_ends[i",
  "laser_starts(Q",
  "laser_starts(q",
  "laser_starts[i",
  "lasers",
  "last",
  "lastAns",
  "lastPair",
  "lastPair.first",
  "lastans",
  "lastpair",
  "lastpair.first",
  "late",
  "late\\n",
  "later",
  "lav",
  "lawn",
  "lawnmower",
  "lay",
  "layers",
  "lazy[4",
  "lazy[i",
  "lazy[node",
  "lca",
  "lca(int",
  "lca(u",
  "lcp",
  "lcp(n",
  "lcp[i",
  "lcp[sa[i",
  "lds",
  "le1",
  "le2",
  "leader",
  "leaders",
  "leaders(n",
  "leaders[b",
  "leaders[i",
  "leaders[x",
  "leading",
  "leads",
  "leaf",
  "leafSum",
  "leafSum[i",
  "leafSum[node",
  "leafSum[parent",
  "leafsum",
  "leafsum[i",
  "leafsum[node",
  "leafsum[parent",
  "leap",
  "least",
  "leave\\n",
  "leaves",
  "led",
  "left",
  "left(4",
  "left(a.begin",
  "left(left",
  "left++",
  "left->sum",
  "left.max_ending",
  "left.max_right",
  "left.size",
  "left.sum",
  "leftAns",
  "leftAns.second",
  "leftBound",
  "leftChildIndex",
  "leftMin",
  "leftSum",
  "left[0",
  "left[D][j",
  "left[D][y",
  "left[L][i",
  "left[MAXN",
  "left[R][i",
  "left[R][y",
  "left[U][j",
  "left[current",
  "left[d][j",
  "left[d][y",
  "left[i",
  "left[j",
  "left[l][i",
  "left[maxn",
  "left[next",
  "left[r][i",
  "left[r][y",
  "left[u][j",
  "left_child",
  "left_index",
  "leftans",
  "leftans.second",
  "leftbound",
  "leftchildindex",
  "leftmin",
  "leftmost",
  "leftsum",
  "legal",
  "lem",
  "len",
  "len++",
  "len/2",
  "length",
  "length--",
  "length_of_word",
  "lengths",
  "ler",
  "les",
  "less",
  "less_equal",
  "let",
  "let's",
  "letter",
  "letters",
  "let\u2019s",
  "level",
  "level++",
  "lex",
  "lexicographic",
  "lexicographical",
  "lexicographically",
  "lf:%lf",
  "lg(ancestors[1][u",
  "lhs",
  "li",
  "lib",
  "libraries",
  "library",
  "libraryShelves",
  "libraryShelves.end",
  "libraryShelves.erase(it",
  "libraryShelves.find(bookTitles[titleToRemove",
  "libraryShelves.insert(Book(author",
  "libraryShelves.lower_bound(author",
  "libraryshelves",
  "libraryshelves.end",
  "libraryshelves.erase(it",
  "libraryshelves.find(booktitles[titletoremove",
  "libraryshelves.insert(book(author",
  "libraryshelves.lower_bound(author",
  "lic",
  "lid",
  "lie",
  "lies",
  "lif",
  "like",
  "lilac",
  "limit",
  "limit--",
  "limits",
  "line",
  "line.back",
  "line.c_str",
  "line.empty",
  "line.end",
  "line.size",
  "line.substr(0",
  "line.substr(3",
  "lineStream",
  "lineStream(line",
  "lineStream(s.substr(0",
  "line[0",
  "line[1",
  "line[3",
  "line[4",
  "line[current",
  "linear_congruential(sequence",
  "linear_congruential(vi",
  "lines",
  "linestream",
  "linestream(line",
  "linestream(s.substr(0",
  "link",
  "linked",
  "linking",
  "links",
  "links\\n",
  "lip",
  "list",
  "list.end",
  "list.find(input",
  "list.insert(input",
  "lists",
  "lit",
  "ll",
  "ll(a",
  "ll(aa[i][k][(n",
  "ll(e[0].size",
  "ll(e[i].size",
  "ll(i",
  "ll(n",
  "ll(q",
  "ll)(i",
  "ll)>dfs=[&](ll",
  "ll)n",
  "ll)pow(i",
  "ll.",
  "ll2",
  "ll>(1",
  "ll>(m",
  "ll>(pow(i",
  "ll>(targetSum+1",
  "ll>(targetsum+1",
  "ll>,greater",
  "ll>::max",
  "ll>>(g[c].size",
  "llabs(l",
  "llabs(l)+llabs(L",
  "llabs(l)+llabs(l",
  "llabs(l)+llabs(m",
  "llabs(m",
  "llabs(m)+llabs(M",
  "llabs(m)+llabs(l",
  "llabs(m)+llabs(m",
  "lld",
  "lld\\n\",a",
  "lld\\n\",b[n-1],c[tn-1],d[tn-1],e[tn-1",
  "llo",
  "llong_max",
  "llong_min",
  "lls",
  "lly",
  "lo.",
  "local",
  "location",
  "locations",
  "log",
  "log(double(n",
  "log(static_cast",
  "log10(double(i",
  "log10(double(i++",
  "log10(static_cast",
  "log10(stoi(numberAsString",
  "log10(stoi(numberasstring",
  "log10Values[MAX_N",
  "log10Values[i",
  "log10values[i",
  "log10values[max_n",
  "log2(k",
  "log2(m",
  "log2(n",
  "log2(v",
  "logIndex",
  "logIndex++",
  "logLengths",
  "logLengths[i",
  "logLengths[logIndex",
  "logLengths[logs",
  "log_maxn",
  "logarithmic",
  "logic",
  "logindex",
  "logindex++",
  "loglengths",
  "loglengths[i",
  "loglengths[logindex",
  "loglengths[logs",
  "logs",
  "logs[MAXN",
  "logs[i",
  "logs[maxn",
  "long",
  "long)r",
  "long>::max",
  "longStrings(n",
  "longStrings.end",
  "longStrings[i",
  "longStrings[i].first",
  "longStrings[i].second",
  "longer",
  "longest",
  "longestPrefix(n",
  "longestPrefix[index",
  "longestPrefix[index]++",
  "longestSequenceLength",
  "longest_sequence",
  "longestprefix(n",
  "longestprefix[index",
  "longestprefix[index]++",
  "longestsequencelength",
  "longstrings(n",
  "longstrings.end",
  "longstrings[i",
  "longstrings[i].first",
  "longstrings[i].second",
  "looking",
  "loop",
  "looping",
  "loops",
  "loowater",
  "lor",
  "lose\\n",
  "lost",
  "lot",
  "lovely",
  "lovin",
  "lovin'",
  "loving",
  "lovin\u2019",
  "low",
  "lower",
  "lowerBound",
  "lowerBoundIt",
  "lower_bound",
  "lower_bound(&a[j",
  "lower_bound(&b[i",
  "lower_bound(a.begin",
  "lower_bound(a[x].begin",
  "lower_bound(arr.begin",
  "lower_bound(b[y].begin",
  "lower_bound(buckets[bucketIdx].begin",
  "lower_bound(buckets[bucketidx].begin",
  "lower_bound(c.begin",
  "lower_bound(g[u].begin",
  "lower_bound(m.begin",
  "lower_bound(reverse_adjacency_list[current_vertex].begin",
  "lower_bound(sortedChars.begin",
  "lower_bound(sortedchars.begin",
  "lowerbound",
  "lowerboundit",
  "lowercase",
  "lowercase(words[i].substr(1",
  "lowercase_letters",
  "lowercase_letters++",
  "lowest",
  "lowlink",
  "lowlink[N",
  "lowlink[n",
  "lowlink[u",
  "lowlink[v",
  "ls(q",
  "ls[i",
  "lse",
  "lso",
  "lsum",
  "lta",
  "ltd",
  "ltd.",
  "lts",
  "lue",
  "lunch",
  "lus",
  "lve",
  "lx",
  "lxi",
  "ly",
  "m",
  "m&&!b[y][x",
  "m&&!f[u][v",
  "m&&!r[u][v]&&a[u][v]=='X",
  "m&&!r[u][v]&&a[u][v]=='x",
  "m&&!s[u][v]&&(a[u][v]=='*'||a[u][v]=='X",
  "m&&!s[u][v]&&(a[u][v]=='*'||a[u][v]=='x",
  "m&&!s[u][v]&&a[u][v]==a[y][x",
  "m(0",
  "m(1",
  "m(128",
  "m(a",
  "m(b",
  "m(i",
  "m(int",
  "m(k",
  "m(l",
  "m(n",
  "m(p",
  "m(r",
  "m(s",
  "m(v",
  "m(x",
  "m)%m",
  "m)%m)%m",
  "m)%m*t%m)%m",
  "m)+llabs(L",
  "m)+llabs(l",
  "m)k",
  "m)m",
  "m)p",
  "m++",
  "m+1",
  "m+2",
  "m+=i!=j",
  "m+n",
  "m+n;i++)cout<<r[i",
  "m--",
  "m-1",
  "m-1&&!c[y+1][x+1]&&a[y+1][x+1]=='W')dfs(y+1,x+1,k",
  "m-1&&!c[y+1][x+1]&&a[y+1][x+1]=='w')dfs(y+1,x+1,k",
  "m-1&&!c[y-1][x+1]&&a[y-1][x+1]=='W')dfs(y-1,x+1,k",
  "m-1&&!c[y-1][x+1]&&a[y-1][x+1]=='w')dfs(y-1,x+1,k",
  "m-1&&!c[y][x+1]&&a[y][x+1]=='W')dfs(y",
  "m-1&&!c[y][x+1]&&a[y][x+1]=='w')dfs(y",
  "m-1&&b[i+1][j+1])e.push_back(make_tuple(b[i+1][j+1],b[i][j",
  "m-1&&b[i-1][j+1])e.push_back(make_tuple(b[i-1][j+1],b[i][j",
  "m-1&&b[i][j+1])e.push_back(make_tuple(b[i][j+1],b[i][j",
  "m-1)%y",
  "m-1)c+=!a[i][j+1",
  "m-2",
  "m-2)%y",
  "m.",
  "m.back",
  "m.begin",
  "m.begin();it!=m.end();it++",
  "m.clear",
  "m.count(num",
  "m.count(s",
  "m.count(s)?m[s]:m[s]=w++",
  "m.count(t",
  "m.count(x",
  "m.count(y",
  "m.emplace_back(c",
  "m.end",
  "m.erase(it",
  "m.erase(next",
  "m.erase(prev",
  "m.erase(s.back",
  "m.find(n",
  "m.find(n1",
  "m.find(n2",
  "m.find(s)->second",
  "m.find(x",
  "m.insert(make_pair(make_tuple(a",
  "m.insert(x",
  "m.insert(y",
  "m.lower_bound(x",
  "m.order_of_key(x",
  "m.order_of_key(y",
  "m.push_back(s[i",
  "m.size",
  "m/2",
  "m/A",
  "m/E",
  "m/a",
  "m/e",
  "m1",
  "m1[node].push_back(a",
  "m1[p][i",
  "m1[parent][parentindex",
  "m1[u].push_back(a",
  "m2",
  "m2[node].push_back(b",
  "m2[p][i",
  "m2[parent][parentindex",
  "m2[u].push_back(b",
  "m3",
  "m;i++",
  "m;i++)cin>>a[i",
  "m;j++",
  "m;j++)cout<<\"+---",
  "m;j++)dfs(0,j",
  "m;j++)dfs(n-1,j",
  "m<<\"\\n",
  "m<<endl",
  "m=0",
  "m=0,g=0,c=1,k",
  "m=0,k",
  "m=1000000007",
  "m=9",
  "m>1",
  "m[0",
  "m[0][0",
  "m[0][1",
  "m[1001][1001",
  "m[1][0",
  "m[1][1",
  "m[2][2",
  "m[4",
  "m[5",
  "m[N",
  "m[a",
  "m[alienBase[i",
  "m[alienbase[i",
  "m[b",
  "m[b[i",
  "m[b[i]].push_back(i",
  "m[b]++",
  "m[c",
  "m[c[i",
  "m[c[i]]=i",
  "m[c]-1",
  "m[digit",
  "m[i",
  "m[i+k][t",
  "m[i]=n++",
  "m[i][j",
  "m[i][j+k",
  "m[i][t",
  "m[id[i",
  "m[int(4",
  "m[j",
  "m[k",
  "m[k2",
  "m[n",
  "m[n1",
  "m[n2",
  "m[name",
  "m[num",
  "m[p",
  "m[py][px",
  "m[s",
  "m[s2",
  "m[s]++",
  "m[s].push_back(y",
  "m[s][query_y",
  "m[t",
  "m[u",
  "m[x",
  "m[x]++",
  "m[x],v",
  "m[x]-1",
  "m[x]-1,v",
  "m[x]=n++",
  "m[y",
  "m[y[0",
  "m[y[0]],v",
  "m[y[2",
  "m[y]-1",
  "m[z",
  "m\\n",
  "m_a",
  "m_b",
  "m_pi",
  "ma",
  "ma'am",
  "ma--",
  "macronutrient",
  "macros[5",
  "macros[i",
  "madam",
  "made",
  "magic",
  "main",
  "main(int",
  "mainDiagonalSum",
  "main_graph_size",
  "maindiagonalsum",
  "maintain",
  "maintaining",
  "maintenance",
  "maintenanceWindowSize",
  "maintenanceWindowsRequired",
  "maintenancewindowsize",
  "maintenancewindowsrequired",
  "make",
  "make_pair(-INF",
  "make_pair(-inf",
  "make_pair(0",
  "make_pair(1",
  "make_pair(a",
  "make_pair(distance",
  "make_pair(k",
  "make_pair(numberOfItems",
  "make_pair(numberofitems",
  "make_pair(prefixTable.back()[i",
  "make_pair(prefixtable.back()[i",
  "make_pair(prevState.first",
  "make_pair(prevstate.first",
  "make_pair(s",
  "make_pair(type",
  "make_pair(u",
  "make_pair(x",
  "make_pair(y",
  "make_tuple",
  "make_tuple('+",
  "make_tuple('-",
  "make_tuple('/",
  "make_tuple(0",
  "make_tuple(1",
  "make_tuple(2",
  "make_tuple(3",
  "make_tuple(INF",
  "make_tuple(a",
  "make_tuple(a-1",
  "make_tuple(a[1",
  "make_tuple(b",
  "make_tuple(get<0>(currentState",
  "make_tuple(get<0>(currentstate",
  "make_tuple(graph[i][0].first",
  "make_tuple(graph_map[r",
  "make_tuple(h[i]*j",
  "make_tuple(h[i]*t2",
  "make_tuple(inf",
  "make_tuple(inv",
  "make_tuple(k",
  "make_tuple(old_s",
  "make_tuple(p.back()[i",
  "make_tuple(pt(x",
  "make_tuple(sj",
  "make_tuple(u",
  "make_tuple(v",
  "make_tuple(value",
  "make_tuple(w",
  "make_tuple(x",
  "make_tuple(y",
  "making",
  "mal",
  "man",
  "man_count",
  "man_count++",
  "many",
  "map",
  "map(y",
  "map.count(num",
  "map.size",
  "map::const_iterator",
  "map[0].size",
  "map[26",
  "map[c",
  "map[i",
  "map[i][j",
  "map[j][k",
  "map[num",
  "map[pos",
  "map[s",
  "map[t",
  "map[value].push_back(i",
  "map[value].size",
  "map[value][k",
  "map[y][x",
  "mapped",
  "mapping",
  "mapping(n",
  "mapping[m[i",
  "mapping[sorted_nodes[i",
  "maps",
  "mar",
  "mar.",
  "mark_star(const",
  "mark_star(grid",
  "marked",
  "marker",
  "markers(128",
  "markers.size",
  "markers[i",
  "markers[nextVertex",
  "markers[nextvertex",
  "markers[vertex",
  "marking",
  "marks",
  "mask",
  "mass",
  "mass.",
  "mat",
  "match",
  "matches",
  "matches++",
  "matching",
  "matrices",
  "matrix",
  "matrix(6",
  "matrix(gridSize",
  "matrix(gridsize",
  "matrix(number_a",
  "matrix[5][i",
  "matrix[current.city][j",
  "matrix[current.city][remaining_city",
  "matrix[i",
  "matrix[i][i",
  "matrix[i][j",
  "matrix[i][k",
  "matrix[j][remaining_city",
  "matrix[k][j",
  "matrix[number_a][number_b",
  "matrix[remaining_city][0",
  "matrix[row][row",
  "matrix_to_place",
  "matrix_width",
  "matter\\n",
  "max",
  "max(0",
  "max(0LL",
  "max(0ll",
  "max(B[i",
  "max(M",
  "max(W",
  "max(a",
  "max(a[0][j",
  "max(a[2",
  "max(a[i",
  "max(a[j",
  "max(a[j][i",
  "max(a[k",
  "max(a[m][1",
  "max(accumulatedSum[j",
  "max(accumulatedsum[j",
  "max(b",
  "max(b[i",
  "max(b[u",
  "max(best",
  "max(c",
  "max(c1",
  "max(carry",
  "max(count",
  "max(current",
  "max(current_area",
  "max(current_max",
  "max(current_slope",
  "max(d[a",
  "max(d[b",
  "max(d[i][j",
  "max(depth[u",
  "max(destination[a",
  "max(destination[b",
  "max(dp1[0",
  "max(dp1[u",
  "max(dp1[z",
  "max(dp[i][j",
  "max(e[v",
  "max(groupA",
  "max(groupa",
  "max(i",
  "max(int",
  "max(l",
  "max(l1",
  "max(left.max_right",
  "max(left.max_sum",
  "max(longestSequenceLength",
  "max(longest_sequence",
  "max(longestsequencelength",
  "max(m",
  "max(m2",
  "max(m[i",
  "max(m[u",
  "max(max(a",
  "max(max(l",
  "max(max(leftSum",
  "max(max(leftsum",
  "max(max(maxSegmentSum",
  "max(max(maxsegmentsum",
  "max(max(s2",
  "max(maxCombinationSize",
  "max(maxGuess",
  "max(maxPrimeFound",
  "max(maxRequired",
  "max(maxResult",
  "max(maxSteps",
  "max(max_current",
  "max(max_degree",
  "max(max_digit",
  "max(max_frequency",
  "max(max_group_size",
  "max(max_incoming",
  "max(max_length",
  "max(max_placed_matrix_width",
  "max(max_so_far",
  "max(max_val",
  "max(maxcombinationsize",
  "max(maxguess",
  "max(maximumDifference",
  "max(maximumdifference",
  "max(maxprimefound",
  "max(maxrequired",
  "max(maxresult",
  "max(maxsteps",
  "max(mg",
  "max(mh",
  "max(min_group_size",
  "max(mm",
  "max(mn",
  "max(mw",
  "max(mx",
  "max(mx(a",
  "max(mx1",
  "max(n",
  "max(n-1",
  "max(n_vertices",
  "max(number1",
  "max(numberA",
  "max(numbera",
  "max(pair_start",
  "max(parent.max_ending",
  "max(parent.max_right",
  "max(pi",
  "max(queryStart",
  "max(querystart",
  "max(r",
  "max(r1",
  "max(result",
  "max(right.max_ending",
  "max(right.max_right",
  "max(s",
  "max(s.length",
  "max(s.size",
  "max(s[0",
  "max(s[a",
  "max(s[b",
  "max(s[j",
  "max(start[0",
  "max(start[a",
  "max(start[b",
  "max(start[j",
  "max(t[2",
  "max(t[i][2",
  "max(t[m[u]][2",
  "max(tree[2*i",
  "max(u",
  "max(v[i][j",
  "max(v[sourceIndex][targetIndex",
  "max(v[sourceindex][targetindex",
  "max(v[x][y",
  "max(w",
  "max(x",
  "max(y",
  "max(z",
  "max({a",
  "maxArea",
  "maxColinearPoints",
  "maxCombinationSize",
  "maxComponentsSize",
  "maxCount",
  "maxDuplicates",
  "maxDuplicates++",
  "maxFlow",
  "maxFlow).back",
  "maxFrequency",
  "maxGroupSize",
  "maxGroups",
  "maxGuess",
  "maxIndex",
  "maxOverlaps",
  "maxPairs",
  "maxPairs++",
  "maxPrimeFound",
  "maxRequired",
  "maxResult",
  "maxRows",
  "maxSegmentSum",
  "maxSteps",
  "maxSum",
  "maxSumNode",
  "maxSumSegment(arr",
  "maxSumSegment(const",
  "maxSumSegment(v",
  "maxValue",
  "maxWins",
  "max_coin",
  "max_coins",
  "max_consecutive_zeros",
  "max_current",
  "max_customer_id",
  "max_degree",
  "max_diff",
  "max_digit",
  "max_element",
  "max_element(begin(count",
  "max_element(begin(edges",
  "max_ending",
  "max_flow",
  "max_frequency",
  "max_group_size",
  "max_incoming",
  "max_incoming++",
  "max_index",
  "max_k",
  "max_left",
  "max_length",
  "max_limit",
  "max_n",
  "max_nodes",
  "max_outgoing",
  "max_outgoing++",
  "max_placed_matrix_width",
  "max_prime",
  "max_right",
  "max_so_far",
  "max_sum",
  "max_val",
  "max_value",
  "maxarea",
  "maxcolinearpoints",
  "maxcombinationsize",
  "maxcomponentssize",
  "maxcost",
  "maxcostflowgraph",
  "maxcostflowgraph(int",
  "maxcount",
  "maxduplicates",
  "maxduplicates++",
  "maxflow",
  "maxflow).back",
  "maxfrequency",
  "maxgroups",
  "maxgroupsize",
  "maxguess",
  "maximum",
  "maximumDifference",
  "maximumSum",
  "maximum_time",
  "maximumdifference",
  "maximums",
  "maximumsum",
  "maxindex",
  "maxn",
  "maxoverlaps",
  "maxpairs",
  "maxpairs++",
  "maxprimefound",
  "maxrequired",
  "maxresult",
  "maxrows",
  "maxsegmentsum",
  "maxsteps",
  "maxsum",
  "maxsum(const",
  "maxsum(v",
  "maxsumnode",
  "maxsumsegment(arr",
  "maxsumsegment(const",
  "maxsumsegment(v",
  "maxvalue",
  "maxwins",
  "may",
  "mayor\\n",
  "maze",
  "maze.resize(mazeRows",
  "maze.resize(mazerows",
  "mazeCols",
  "mazeRows",
  "maze[y",
  "mazecols",
  "mazerows",
  "ma\u2019am",
  "mb",
  "mb--",
  "mcf_graph",
  "mcf_graph(int",
  "md",
  "md.",
  "md[13",
  "md[2]++",
  "md[i",
  "md[m",
  "me1",
  "me2",
  "mean",
  "meaningful",
  "means",
  "measurement",
  "mechagodzilla\\n",
  "mechagodzilla_games",
  "mechagodzilla_score",
  "mechagodzilla_wins",
  "med",
  "median",
  "medianIndex",
  "median_x",
  "median_y",
  "medianindex",
  "meet",
  "meeting",
  "memcpy(grid[rows.size",
  "memo",
  "memo.end",
  "memo.find(nextState",
  "memo.find(nextstate",
  "memo[currentState",
  "memo[currentstate",
  "memo[initialState",
  "memo[initialstate",
  "memo[nextState",
  "memo[nextstate",
  "memoization",
  "memoization[(1",
  "memoization[(state",
  "memoization[0",
  "memoization[1",
  "memoization[state",
  "memory",
  "memset(componentId",
  "memset(componentid",
  "memset(dp",
  "memset(g",
  "memset(visited",
  "menor\\n",
  "mer",
  "merge",
  "mergeSort(a",
  "mergeSort(vi",
  "merge_sort(IntVector",
  "merge_sort(arr",
  "merge_sort(intvector",
  "merged",
  "mergelists(heada",
  "mergelists(heada->next",
  "mergelists(node",
  "mergesort(a",
  "mergesort(vi",
  "merging",
  "meriendas",
  "mes",
  "message",
  "messageIndex",
  "messageIndex++",
  "messageindex",
  "messageindex++",
  "messrs",
  "messrs.",
  "met",
  "meter",
  "method",
  "mf",
  "mg",
  "mh",
  "mi",
  "mi(n",
  "mi.push_back(s",
  "mi.size",
  "mi[N",
  "mi[i",
  "mi[n",
  "mi[p",
  "mi[u",
  "mi[u]=s",
  "mi[v",
  "mi[v]=s",
  "mi[x",
  "mic",
  "mice",
  "mice++",
  "mich",
  "mich.",
  "mid",
  "mid+1",
  "midElement",
  "middle",
  "middleRowSum",
  "middlerowsum",
  "midelement",
  "midnight",
  "midpoint",
  "might",
  "mii",
  "miii",
  "million",
  "min",
  "min(((number_of_teams",
  "min((long",
  "min((m",
  "min((number_of_teams",
  "min(A.size",
  "min(C[i",
  "min(M",
  "min(MAX",
  "min(N",
  "min(T",
  "min(a",
  "min(a.size",
  "min(a.size(),b.size",
  "min(a.size(),b.size());j++",
  "min(aCount",
  "min(a[2",
  "min(a[b",
  "min(a[curr_index",
  "min(a[i",
  "min(a[j",
  "min(a[l",
  "min(a[l+r",
  "min(a[p][x",
  "min(a[s",
  "min(a[y",
  "min(acount",
  "min(ans",
  "min(b",
  "min(bCount",
  "min(b[l",
  "min(b[l+r",
  "min(b[u",
  "min(bcount",
  "min(best",
  "min(bestKnapsack[state",
  "min(bestScore",
  "min(best[s",
  "min(bestknapsack[state",
  "min(bestscore",
  "min(blueTeam.size",
  "min(blueteam.size",
  "min(c",
  "min(c[i",
  "min(c[start[0]][b",
  "min(c[u][v",
  "min(cap",
  "min(caseA[s",
  "min(casea[s",
  "min(cost_matrix[current][next",
  "min(current_printer_position",
  "min(d1",
  "min(d[a",
  "min(d[b",
  "min(d[v",
  "min(da",
  "min(data[node",
  "min(destination[a",
  "min(destination[b",
  "min(distanceMatrix[i][j",
  "min(distance[i][j",
  "min(distancematrix[i][j",
  "min(dp[i",
  "min(dp[j",
  "min(dp[n][k][0",
  "min(dp[n][k][1",
  "min(e",
  "min(earliest_placement",
  "min(flow",
  "min(i",
  "min(j",
  "min(k",
  "min(k2",
  "min(l",
  "min(l+k-1",
  "min(l1",
  "min(left",
  "min(leftAns.first",
  "min(leftans.first",
  "min(lowlink[v",
  "min(m",
  "min(max",
  "min(max_group_size",
  "min(max_sum",
  "min(min(a",
  "min(minDiff",
  "min(minFlipsRequired",
  "min(minGuess",
  "min(minRequired[i",
  "min(min_cost",
  "min(min_error",
  "min(min_group_size",
  "min(min_val",
  "min(mindiff",
  "min(minflipsrequired",
  "min(minguess",
  "min(minimum_layers",
  "min(minrequired[i",
  "min(mn",
  "min(mn[i",
  "min(n",
  "min(numberA",
  "min(numbera",
  "min(p",
  "min(pair_start",
  "min(positions[i",
  "min(prefixSums[i",
  "min(prefixsums[i",
  "min(qsum[i",
  "min(queryEnd",
  "min(queryend",
  "min(r",
  "min(r1",
  "min(remaining_capacity",
  "min(result",
  "min(s[0",
  "min(s[a",
  "min(s[b",
  "min(s[j",
  "min(smallest_path_length",
  "min(start[0",
  "min(start[a",
  "min(start[b",
  "min(start[j",
  "min(t",
  "min(t[i-1][j",
  "min(u",
  "min(x",
  "min(x.size",
  "min(x1",
  "min(x[i][j",
  "min(y",
  "min(y[i",
  "min(y[i][a",
  "min(y[y.size",
  "min(z[i",
  "min({a",
  "min--",
  "minDiff",
  "minDistance(source",
  "minFlipsRequired",
  "minGuess",
  "minInRange(a",
  "minInRange(int",
  "minIndex",
  "minPrimeFactor(input",
  "minPrimeFactor(int",
  "minRequired(requiredCourses.size",
  "minRequired[i",
  "minTransactions(coins",
  "minTransactions(vector",
  "min_cost",
  "min_distance",
  "min_error",
  "min_group_size",
  "min_index",
  "min_right",
  "min_val",
  "min_value",
  "mincostmaxflowgraph",
  "mincostmaxflowgraph(int",
  "mindiff",
  "mindistance(source",
  "minefield(n",
  "minefield[i",
  "minefield[ny][nx",
  "minefield[y][x",
  "miner",
  "miners",
  "miners.emplace_back(y",
  "minflipsrequired",
  "minguess",
  "minimize(distances[i",
  "minimize(to_reduce",
  "minimize(vector",
  "minimum",
  "minimum(distances[i",
  "minimum(to_reduce",
  "minimum(vector",
  "minimum_gap",
  "minimum_layers",
  "minimum_sum",
  "minimums",
  "minindex",
  "mininrange(a",
  "mininrange(int",
  "mink1",
  "mink2",
  "minn",
  "minn.",
  "minp(int",
  "minp(x",
  "minprimefactor(input",
  "minprimefactor(int",
  "minrequired(requiredcourses.size",
  "minrequired[i",
  "mintransactions(coins",
  "mintransactions(vector",
  "minus",
  "minute",
  "minutes",
  "minutes_diff",
  "minutes_passed",
  "mirror",
  "mis",
  "misi",
  "mismatches",
  "mismatches++",
  "miss",
  "miss.",
  "missing",
  "mit",
  "mixed",
  "ml",
  "mly",
  "mm",
  "mm_end",
  "mm_start",
  "mma",
  "mmss",
  "mmss::iterator",
  "mmssd",
  "mmssd::iterator",
  "mn",
  "mn(b.size",
  "mn1",
  "mn2",
  "mn[i",
  "mnd",
  "mni",
  "mns",
  "mo",
  "mo.",
  "mod",
  "mod-1",
  "modInv(ll",
  "modified",
  "modify",
  "modinv(b",
  "modinv(fact[i",
  "modinv(i",
  "modinv(l",
  "modinv(ll",
  "modinv(modpow(2",
  "modinv(n",
  "modinv(nc",
  "modinv(pow2[i",
  "modinv(rr",
  "modinv(x[i",
  "modpow(a",
  "modpow(a[i",
  "modpow(ll",
  "modpow(vvi",
  "modpow(x",
  "modpow(x[i",
  "modular",
  "modularExponentiation(matrix",
  "modularExponentiation(vvi",
  "modularExponentiation(x",
  "modularexponentiation(matrix",
  "modularexponentiation(vvi",
  "modularexponentiation(x",
  "modulo",
  "modulus",
  "mon",
  "monday",
  "money",
  "monster",
  "monsters",
  "mont",
  "mont.",
  "month",
  "month1",
  "month2",
  "month2offset(int",
  "month2offset(year",
  "month_of_birth1",
  "month_of_birth2",
  "months",
  "monthsToDays(int",
  "monthsToDays(year",
  "monthstodays(int",
  "monthstodays(year",
  "moose",
  "mooseType",
  "moose\\n",
  "moosetype",
  "more",
  "most",
  "mostFrequentDigit",
  "mostfrequentdigit",
  "move",
  "movement",
  "moves",
  "moves.\\n",
  "moving",
  "mow",
  "mps",
  "mpt",
  "mr",
  "mr.",
  "mrs",
  "mrs.",
  "ms",
  "ms.",
  "ms.emplace_back(i",
  "msgChar",
  "msgchar",
  "msi",
  "mss",
  "msv",
  "msvi",
  "mt",
  "mt.",
  "mul(u",
  "mul(vvi",
  "mult(F",
  "mult(f",
  "mult(ll",
  "multimap",
  "multiple",
  "multipleOfTen",
  "multipleoften",
  "multiples",
  "multiplication",
  "multiplications",
  "multiplicative",
  "multiplied",
  "multiplier",
  "multiplier++",
  "multiplies",
  "multiply",
  "multiply(halfPower",
  "multiply(halfpower",
  "multiply(vvi",
  "multiplying",
  "multiset",
  "mum",
  "must",
  "mvi",
  "mvii",
  "mw",
  "mx",
  "mx(a",
  "mx(int",
  "mx1",
  "mx2",
  "mxd",
  "mxdup",
  "mxi",
  "mxu",
  "myStack",
  "myStack.pop",
  "myStack.push(max(x",
  "myStack.push(x",
  "myStack.top",
  "mystack",
  "mystack.pop",
  "mystack.push(max(x",
  "mystack.push(x",
  "mystack.top",
  "n",
  "n%2",
  "n%=16",
  "n%m",
  "n&&!(a[k]&i))k++",
  "n&&!s[u][v]&&(a[u][v]==a[y][x",
  "n&&s[i",
  "n&&v>=0&&v",
  "n&&x>=0&&x",
  "n's",
  "n't",
  "n(0",
  "n(2",
  "n(26",
  "n(3",
  "n(4",
  "n(6",
  "n(9",
  "n(M",
  "n(N",
  "n(T",
  "n(a",
  "n(b",
  "n(c",
  "n(e",
  "n(i",
  "n(j",
  "n(k",
  "n(l",
  "n(m",
  "n(n",
  "n(p",
  "n(r",
  "n(s",
  "n(t",
  "n(u",
  "n(v",
  "n(w",
  "n(x",
  "n(y",
  "n)),s(n",
  "n)==1",
  "n)k",
  "n*2",
  "n++",
  "n+1",
  "n+1)/2",
  "n+=i==j",
  "n+d",
  "n+m",
  "n,0",
  "n--",
  "n-1",
  "n-1&&!c[y+1][x]&&a[y+1][x]=='W')dfs(y+1,x",
  "n-1&&!c[y+1][x]&&a[y+1][x]=='w')dfs(y+1,x",
  "n-1&&!s[y+1][x+1]&&a[y+1][x+1]=='1')dfs(y+1,x+1",
  "n-1&&!s[y+1][x+1]&&a[y+1][x+1]=='w')dfs(y+1,x+1",
  "n-1&&!s[y+1][x]&&a[y+1][x]=='1')dfs(y+1,x",
  "n-1&&!s[y+1][x]&&a[y+1][x]=='w')dfs(y+1,x",
  "n-1&&!s[y-1][x+1]&&a[y-1][x+1]=='1')dfs(y-1,x+1",
  "n-1&&!s[y][x+1]&&a[y][x+1]=='1')dfs(y",
  "n-1&&!s[y][x+1]&&a[y][x+1]=='w')dfs(y",
  "n-1&&b+a[i]<=300;i++",
  "n-1&&b[i+1][j])e.push_back(make_tuple(b[i+1][j],b[i][j",
  "n-1&&j",
  "n-1&&j>0&&b[i+1][j-1])e.push_back(make_tuple(b[i+1][j-1],b[i][j",
  "n-1&&x",
  "n-1&&x>0&&!c[y+1][x-1]&&a[y+1][x-1]=='W')dfs(y+1,x-1,k",
  "n-1&&x>0&&!c[y+1][x-1]&&a[y+1][x-1]=='w')dfs(y+1,x-1,k",
  "n-1&&x>0&&!s[y+1][x-1]&&a[y+1][x-1]=='1')dfs(y+1,x-1",
  "n-1)%x",
  "n-1)*maxCost",
  "n-1)*maxcost",
  "n-1)C",
  "n-1)c",
  "n-1)c+=!a[i+1][j",
  "n-1;i++",
  "n-2",
  "n-2)%x",
  "n-=w[j",
  "n.",
  "n.c.",
  "n.d.",
  "n.end",
  "n.find(k1",
  "n.find(k2",
  "n.h.",
  "n.j.",
  "n.m.",
  "n.y.",
  "n/(d-1",
  "n/2",
  "n/3",
  "n/=m;k/=m",
  "n1",
  "n2",
  "n2i",
  "n2i[s",
  "n3",
  "n;i*=2,j++",
  "n;i++",
  "n;i++)M",
  "n;i++)c",
  "n;i++)c+=a[i",
  "n;i++)cin>>a[i",
  "n;i++)cin>>s[i",
  "n;i++)cout<<\"1",
  "n;i++)cout<<a[i",
  "n;i++)cout<<r[i",
  "n;i++)cout<<t[i",
  "n;i++)dfs(i",
  "n;i++)dfs(i,0",
  "n;i++)if(a[i]+a[i-1]>x)break",
  "n;i++)m",
  "n;i++)m^=a[i",
  "n;i++)p[i]=i",
  "n;i++)r[s[i]]+=a[i",
  "n;i++)s+=min(a[i],k",
  "n;i++)x+=d[i",
  "n;i<=2*n;i++)a[i+1]+=a[i",
  "n;j++",
  "n;j++)a[j]=a[j-1",
  "n;k++",
  "n;l++",
  "n<<\"\\n",
  "n=(n*10)+x-'0",
  "n=0",
  "n=0,i=0,u",
  "n=0,k",
  "n=0,m=0",
  "n=100000",
  "n=2",
  "n=2*m",
  "n=2000000",
  "n=50",
  "n=9",
  "n>0",
  "n>1",
  "n>>1)*(pos-1",
  "n>>1)-1",
  "nC",
  "nC(-b",
  "nC(b",
  "nCk",
  "nPlayers",
  "n[0",
  "n[1",
  "n[10",
  "n[2",
  "n[a",
  "n[b",
  "n[i",
  "n[j",
  "n[k1",
  "n[k1],b",
  "n[k1]=i",
  "n[k1]=n[k2]=i",
  "n[k2",
  "n[k2]=i",
  "n[n",
  "n[{x",
  "n\\n",
  "n]++",
  "n]--",
  "n][n",
  "n^2",
  "n_k",
  "n_square",
  "n_vertices",
  "n_x",
  "n_y",
  "na",
  "nal",
  "name",
  "name(s",
  "name1",
  "name2",
  "name2index",
  "nameIndex",
  "name[31",
  "named",
  "nameindex",
  "names",
  "names(numberOfNames",
  "names(numberofnames",
  "names.push_back(childName",
  "names.push_back(childname",
  "names.push_back(n1",
  "names.push_back(n2",
  "names.size",
  "names[12",
  "names[i",
  "names[index",
  "names[mxi",
  "namespace",
  "namespaced",
  "namespaces",
  "naming",
  "nas",
  "natural",
  "nb",
  "nc",
  "nc(-b",
  "nc(b",
  "nc.",
  "nca",
  "nce",
  "nch",
  "nck",
  "ncr",
  "nct",
  "ncy",
  "nd.",
  "nd1",
  "nd2",
  "nd3",
  "ndX",
  "ndY",
  "nda",
  "ndl",
  "nds",
  "ndx",
  "ndy",
  "nearest",
  "neb",
  "neb.",
  "nebr",
  "nebr.",
  "necessary",
  "ned",
  "need",
  "needed",
  "needs",
  "negate",
  "negative",
  "neighbor",
  "neighboring",
  "neighbors",
  "neighborset",
  "neighbour",
  "neighs",
  "neither",
  "neither\\n",
  "ner",
  "nes",
  "nesw\"[o]<<\"\\n",
  "nev",
  "nev.",
  "never",
  "new",
  "newC",
  "newCol",
  "newCost",
  "newDist",
  "newInterval",
  "newInterval.get<0",
  "newInterval.get<1",
  "newNode",
  "newNode->data",
  "newNode->next",
  "newNode->prev",
  "newR",
  "newRow",
  "newTime",
  "newValue",
  "newX",
  "newY",
  "new_column",
  "new_cost",
  "new_dist",
  "new_id",
  "new_index",
  "new_median",
  "new_part",
  "new_part{new_id",
  "new_row",
  "new_sum",
  "new_total",
  "new_value",
  "new_x",
  "new_y",
  "newc",
  "newcol",
  "newcost",
  "newdist",
  "newinterval",
  "newinterval.get<0",
  "newinterval.get<1",
  "newline",
  "newlines",
  "newly",
  "newnode",
  "newnode->data",
  "newnode->next",
  "newnode->prev",
  "newr",
  "newrow",
  "newtime",
  "newvalue",
  "newx",
  "newy",
  "next",
  "next(g[c].size",
  "next(it",
  "next(it->first",
  "next--",
  "next->first",
  "next->second",
  "next.cities_left_to_expand",
  "next.city",
  "next.cost",
  "next.matrix",
  "next.remaining_cities",
  "next.stack",
  "nextCharCount",
  "nextCol",
  "nextDirection",
  "nextGreater",
  "nextIndex",
  "nextIt",
  "nextIt->second",
  "nextIter",
  "nextIter->first",
  "nextIter->second",
  "nextJumper",
  "nextMultipleOfTen",
  "nextNode",
  "nextPointX",
  "nextPointY",
  "nextRow",
  "nextState",
  "nextTerm",
  "nextVertex",
  "next[i",
  "next_beats_per_minute",
  "next_permutation(begin(flippedBoards[0",
  "next_permutation(begin(flippedboards[0",
  "next_permutation(current_permutation.begin",
  "next_permutation(s.begin",
  "next_permutations[N",
  "next_permutations[index",
  "next_permutations[n",
  "next_permutations[new_index",
  "next_permutations[new_index].empty",
  "next_x",
  "next_y",
  "nextcharcount",
  "nextcol",
  "nextdirection",
  "nextgreater",
  "nextindex",
  "nextit",
  "nextit->second",
  "nextiter",
  "nextiter->first",
  "nextiter->second",
  "nextjumper",
  "nextmultipleoften",
  "nextnode",
  "nextpointx",
  "nextpointy",
  "nextrow",
  "nextstate",
  "nextterm",
  "nextvertex",
  "ney",
  "nfo",
  "ng",
  "ng--",
  "ng1",
  "ng2",
  "nge",
  "ngs",
  "ni[N",
  "ni[i",
  "ni[l",
  "ni[n",
  "nie",
  "nil",
  "nip",
  "nit",
  "nje",
  "nk1",
  "nk2",
  "nks",
  "nly",
  "nm",
  "nm--",
  "nmx",
  "nn.",
  "no",
  "no\\n",
  "node",
  "node(build(a",
  "node(int",
  "node(node",
  "node(t->l",
  "node(update(t->l",
  "node(x",
  "node(xs[a",
  "node->index",
  "node->left",
  "node->left->index",
  "node->left->sum",
  "node->right",
  "node->right->index",
  "node->right->sum",
  "node->sum",
  "node.first",
  "node.second",
  "node.sum",
  "node.z0",
  "node.z1++",
  "node1",
  "node2",
  "node>(2*k",
  "nodeA",
  "nodeA--",
  "nodeB",
  "nodeB--",
  "nodeCosts",
  "nodeCosts[i",
  "nodeCosts[neighbor",
  "nodeCosts[node",
  "nodeCount",
  "nodeDegree",
  "nodeId",
  "nodeIndex",
  "nodeMap",
  "nodeMap.count(fromNode",
  "nodeMap.count(toNode",
  "nodeMap[fromNode",
  "nodeMap[i",
  "nodeMap[toNode",
  "nodeNames[MAX_NODES",
  "nodeNames[currentNode",
  "nodeNames[i",
  "node[id._index",
  "node_values",
  "node_values[current_node",
  "node_values[i",
  "node_values[neighbor",
  "nodea",
  "nodea--",
  "nodeb",
  "nodeb--",
  "nodecosts",
  "nodecosts[i",
  "nodecosts[neighbor",
  "nodecosts[node",
  "nodecount",
  "nodedegree",
  "nodeid",
  "nodeindex",
  "nodemap",
  "nodemap.count(fromnode",
  "nodemap.count(tonode",
  "nodemap[fromnode",
  "nodemap[i",
  "nodemap[tonode",
  "nodenames[currentnode",
  "nodenames[i",
  "nodenames[max_nodes",
  "nodes",
  "nodes(n",
  "nodes(nodes",
  "nodes++",
  "nodes.assign(number_of_test_cases",
  "nodes.clear",
  "nodes.empty",
  "nodes.end",
  "nodes.find(newX",
  "nodes.find(newx",
  "nodes.find(x",
  "nodes.front",
  "nodes.pop",
  "nodes.pop_front",
  "nodes.push(i",
  "nodes.push(neighbor",
  "nodes.push_front(*it",
  "nodes.push_front(s1",
  "nodes.size",
  "nodesArray(401",
  "nodesArray[i",
  "nodesCount",
  "nodesToVisit",
  "nodesToVisit(nodesCount",
  "nodesToVisit[v",
  "nodes[_from[id",
  "nodes[currentNodeX",
  "nodes[current_node",
  "nodes[currentnodex",
  "nodes[from].push_back({to",
  "nodes[i",
  "nodes[neighbor",
  "nodes[newX",
  "nodes[newx",
  "nodes[nodeIndex].children",
  "nodes[nodeIndex].choice",
  "nodes[nodeIndex].isEnd",
  "nodes[nodeindex].children",
  "nodes[nodeindex].choice",
  "nodes[nodeindex].isend",
  "nodes[parentIndex].children.push_back(nodeIndex",
  "nodes[parentindex].children.push_back(nodeindex",
  "nodes[to].push_back({from",
  "nodes[u",
  "nodes[v",
  "nodes[x",
  "nodes_count",
  "nodesarray(401",
  "nodesarray[i",
  "nodescount",
  "nodestovisit",
  "nodestovisit(nodescount",
  "nodestovisit[v",
  "non",
  "non-'E",
  "non-'P",
  "non-'R",
  "non-'e",
  "non-'p",
  "non-'r",
  "non_match",
  "non_match++",
  "none",
  "none\\n",
  "nope\\n",
  "noq",
  "nor",
  "norm(s",
  "normal",
  "normal\\n",
  "north",
  "noruega",
  "norway",
  "norweigian",
  "nos",
  "not",
  "notation",
  "nothin",
  "nothin'",
  "nothing",
  "nothin\u2019",
  "nov",
  "nov.",
  "now",
  "nplayers",
  "ns(n",
  "ns.",
  "ns1",
  "ns2",
  "ns[i",
  "nse",
  "nst",
  "nt",
  "nt.",
  "nt1",
  "nt2",
  "ntA",
  "ntB",
  "ntX",
  "ntY",
  "nta",
  "ntb",
  "ntf",
  "nth",
  "nto",
  "nts",
  "ntx",
  "nty",
  "nue",
  "nuff",
  "null",
  "null_type",
  "nullptr",
  "numCases",
  "numCases--",
  "numCoins",
  "numEvents",
  "numEvents--",
  "numFiles",
  "numHayPoints",
  "numItems",
  "numNodes",
  "numPositions",
  "numQueries",
  "numToppings",
  "numVertices",
  "num_components",
  "num_components++",
  "num_elements",
  "num_match",
  "num_match++",
  "num_nodes",
  "num_nodes_(nodes",
  "num_solutions",
  "num_solutions++",
  "num_triples",
  "num_vertices",
  "number++",
  "number.\\n",
  "number1",
  "number2",
  "numberA",
  "numberAsString",
  "numberB",
  "numberOfAlphabeticCharacters",
  "numberOfAlphabeticCharacters++",
  "numberOfAnimals",
  "numberOfAwardees",
  "numberOfAwardees--",
  "numberOfBallots",
  "numberOfBallots(0",
  "numberOfBattles",
  "numberOfBoats",
  "numberOfBookings",
  "numberOfCases",
  "numberOfCases--",
  "numberOfChars",
  "numberOfCips",
  "numberOfColors",
  "numberOfConflicts",
  "numberOfCups",
  "numberOfCurrencies",
  "numberOfDigits",
  "numberOfDigits++",
  "numberOfDreamsToDiscard",
  "numberOfDreamsToDiscard--",
  "numberOfEdges",
  "numberOfExclamationMarks",
  "numberOfExclamationMarks++",
  "numberOfInputs",
  "numberOfInstances",
  "numberOfInstances--",
  "numberOfInstructions",
  "numberOfIntervals",
  "numberOfIntervals--",
  "numberOfItems",
  "numberOfMessages",
  "numberOfMessages--",
  "numberOfNames",
  "numberOfNodes",
  "numberOfOperations",
  "numberOfOperations--",
  "numberOfParents",
  "numberOfPeople",
  "numberOfQueries",
  "numberOfRows",
  "numberOfSites",
  "numberOfStrings",
  "numberOfStringsToRead",
  "numberOfStudents",
  "numberOfTasks",
  "numberOfTermsToCalculate",
  "numberOfTestCases",
  "numberOfTestCases--",
  "numberOfTransactions",
  "numberToCheck",
  "numberToWord",
  "numberToWord.clear",
  "numberToWord.end",
  "numberToWord.erase(number",
  "numberToWord.find(result",
  "numberToWord[number",
  "numberToWord[result",
  "number[0",
  "number\\n",
  "number_a",
  "number_b",
  "number_index",
  "number_length",
  "number_of_E_students",
  "number_of_Es",
  "number_of_O_students",
  "number_of_Os",
  "number_of_apples",
  "number_of_cards",
  "number_of_cases",
  "number_of_cases--",
  "number_of_days",
  "number_of_days-1",
  "number_of_e_students",
  "number_of_edges",
  "number_of_elements",
  "number_of_es",
  "number_of_expressions",
  "number_of_fields",
  "number_of_gears",
  "number_of_groups",
  "number_of_jackolanterns",
  "number_of_lines",
  "number_of_nodes",
  "number_of_o_students",
  "number_of_os",
  "number_of_points",
  "number_of_queries",
  "number_of_queries--",
  "number_of_strings",
  "number_of_students",
  "number_of_teams",
  "number_of_test_cases",
  "number_of_test_cases--",
  "number_of_tests",
  "number_of_tests--",
  "number_of_tiles",
  "number_of_transactions",
  "number_of_triangles",
  "number_val",
  "numbera",
  "numberasstring",
  "numberb",
  "numbered",
  "numbering",
  "numberofalphabeticcharacters",
  "numberofalphabeticcharacters++",
  "numberofanimals",
  "numberofawardees",
  "numberofawardees--",
  "numberofballots",
  "numberofballots(0",
  "numberofbattles",
  "numberofboats",
  "numberofbookings",
  "numberofcases",
  "numberofcases--",
  "numberofchars",
  "numberofcips",
  "numberofcolors",
  "numberofconflicts",
  "numberofcups",
  "numberofcurrencies",
  "numberofdigits",
  "numberofdigits++",
  "numberofdreamstodiscard",
  "numberofdreamstodiscard--",
  "numberofedges",
  "numberofexclamationmarks",
  "numberofexclamationmarks++",
  "numberofinputs",
  "numberofinstances",
  "numberofinstances--",
  "numberofinstructions",
  "numberofintervals",
  "numberofintervals--",
  "numberofitems",
  "numberofmessages",
  "numberofmessages--",
  "numberofnames",
  "numberofnodes",
  "numberofoperations",
  "numberofoperations--",
  "numberofparents",
  "numberofpeople",
  "numberofqueries",
  "numberofrows",
  "numberofsites",
  "numberofstrings",
  "numberofstringstoread",
  "numberofstudents",
  "numberoftasks",
  "numberoftermstocalculate",
  "numberoftestcases",
  "numberoftestcases--",
  "numberoftransactions",
  "numbers",
  "numbers(array_size",
  "numbers(n",
  "numbers(total_elements",
  "numbers++",
  "numbers.back",
  "numbers.begin",
  "numbers.empty",
  "numbers.end",
  "numbers.erase(current_position",
  "numbers.erase(it",
  "numbers.insert(num",
  "numbers.lower_bound(num",
  "numbers.pop_back",
  "numbers.push_back(carry",
  "numbers.push_back(input[i",
  "numbers.push_back(numberOfDigits",
  "numbers.push_back(numberofdigits",
  "numbers.size",
  "numbersOfApples",
  "numbersOfStacks1",
  "numbersOfStacks2",
  "numbersOfStacks3",
  "numbers[0",
  "numbers[2",
  "numbers[4",
  "numbers[i",
  "numbers[index",
  "numbers[j",
  "numbers[left",
  "numbers[medianIndex",
  "numbers[medianindex",
  "numbers[right",
  "numbersofapples",
  "numbersofstacks1",
  "numbersofstacks2",
  "numbersofstacks3",
  "numbertocheck",
  "numbertoword",
  "numbertoword.clear",
  "numbertoword.end",
  "numbertoword.erase(number",
  "numbertoword.find(result",
  "numbertoword[number",
  "numbertoword[result",
  "numbertowordmap",
  "numcases",
  "numcases--",
  "numcoins",
  "numerator",
  "numeric",
  "numeric_limits",
  "numeric_value",
  "numevents",
  "numevents--",
  "numfiles",
  "numhaypoints",
  "numitems",
  "numnodes",
  "numpositions",
  "numqueries",
  "nums(n",
  "nums.end",
  "nums[i",
  "numtoppings",
  "numvertices",
  "nunca",
  "nup",
  "nus",
  "nuthin",
  "nuthin'",
  "nuthin\u2019",
  "nvs",
  "nx",
  "ny",
  "n\u2019s",
  "n\u2019t",
  "o",
  "o'clock",
  "o's",
  "o(0",
  "o(x",
  "o)cout<<mi[u]<<endl",
  "o++",
  "o+1",
  "o+2k",
  "o-1",
  "o.",
  "o.0",
  "o.O",
  "o.back",
  "o.empty",
  "o.end",
  "o.o",
  "o.pop_back",
  "o.push_back(n",
  "o.push_back(n-1",
  "o.push_back(u",
  "o.push_back(v",
  "o<<char(p[i",
  "o=",
  "o='N",
  "o='n",
  "o=0",
  "o=0;q=0",
  "o=1",
  "o==",
  "o==3?0",
  "o?3",
  "o[0",
  "o[N",
  "o[n",
  "o[x",
  "o\\n",
  "o_0",
  "o_O",
  "o_o",
  "oal",
  "oat",
  "objects",
  "obstacleCount",
  "obstaclecount",
  "obtain",
  "obtained",
  "occupied",
  "occupied(rooms",
  "occupied[i",
  "occupied[roomNumber",
  "occupied[roomnumber",
  "occupy",
  "occurred",
  "occurrence",
  "occurrences",
  "occurs",
  "ock",
  "oct",
  "oct.",
  "october",
  "odA",
  "odB",
  "oda",
  "odb",
  "odd",
  "oddCount",
  "oddEdges",
  "odd_count",
  "odd_count++",
  "odd_occurrence",
  "oddcount",
  "oddedges",
  "ode",
  "ods",
  "oes",
  "of",
  "of.",
  "off",
  "offset",
  "offset2month(int",
  "offset2month(offset",
  "offset2year(int",
  "offset2year(offset",
  "offsets",
  "offsets[4][2",
  "offsets[i][0",
  "offsets[i][1",
  "ogs",
  "oid",
  "oin",
  "ok",
  "ok=0",
  "ok=1",
  "oke",
  "okla",
  "okla.",
  "oks",
  "ol",
  "ol'",
  "ol1",
  "ol2",
  "old",
  "old_m",
  "old_median",
  "old_r",
  "old_s",
  "old_s-",
  "old_t",
  "ole",
  "ollie",
  "olo",
  "ols",
  "ol\u2019",
  "ome",
  "oms",
  "on",
  "on1",
  "on2",
  "on3",
  "once",
  "ond",
  "one",
  "ones",
  "ones[0",
  "ones[N",
  "ones[i",
  "ones[n",
  "ones[u",
  "ong",
  "online",
  "only",
  "onn",
  "ons",
  "ont",
  "onto",
  "onwards",
  "ony",
  "ood",
  "ook",
  "ool",
  "oom",
  "oop",
  "oot",
  "op",
  "ope",
  "operand1",
  "operand2",
  "operand3",
  "operands",
  "operandsAndOperators",
  "operandsAndOperators.pop_back",
  "operandsAndOperators.push_back(number",
  "operandsandoperators",
  "operandsandoperators.pop_back",
  "operandsandoperators.push_back(number",
  "operation",
  "operation1",
  "operation2",
  "operation3",
  "operation_possible",
  "operations",
  "operations(n",
  "operations[26",
  "operations[i",
  "operations[j",
  "operator",
  "operator&(T",
  "operator&(t",
  "operator()(const",
  "operator*(pt",
  "operator+(pt",
  "operator-(P",
  "operator-(p",
  "operator-(pt",
  "operator/(T",
  "operator/(t",
  "operator<(Q",
  "operator<(const",
  "operator<(q",
  "operator<<(ostream",
  "operator<<(std::ostream",
  "operatorChar",
  "operator^(pt",
  "operatorchar",
  "operators",
  "operator~",
  "opposite",
  "ops",
  "opt",
  "opt.emplace_back(u",
  "opt.emplace_back(v",
  "opt.end",
  "opt.size",
  "opt[j",
  "optimal",
  "optimization",
  "optimize",
  "options",
  "opy",
  "or",
  "or/",
  "or1",
  "or2",
  "ord",
  "order",
  "order(n",
  "order(numVertices",
  "order(numvertices",
  "order.end",
  "order.resize(main_graph_size",
  "order[i",
  "order[i-1",
  "order[markers[i",
  "order[markers[v",
  "ordered",
  "orderedSet",
  "orderedSet.end",
  "orderedSet.erase(it->second",
  "orderedSet.find_by_order(k",
  "orderedSet.insert(i",
  "ordered_set",
  "orderedset",
  "orderedset.end",
  "orderedset.erase(it->second",
  "orderedset.find_by_order(k",
  "orderedset.insert(i",
  "ordering",
  "orderings",
  "orders",
  "orders(n",
  "orders.rend",
  "orders[i",
  "ore",
  "ore.",
  "ori",
  "orientation",
  "orientation2D(const",
  "orientation2D(p",
  "orientation2D(r",
  "orientation2d(const",
  "orientation2d(p",
  "orientation2d(r",
  "original",
  "ork",
  "orm",
  "orn",
  "orp",
  "ors",
  "ort",
  "ory",
  "or~",
  "os",
  "os.",
  "ose",
  "oss",
  "ost",
  "ostream",
  "ota",
  "ote",
  "oth",
  "other",
  "others",
  "others++",
  "otherwise",
  "ots",
  "ought",
  "oup",
  "our",
  "ous",
  "out",
  "out(b",
  "out(c",
  "out(n",
  "out.end",
  "out[0",
  "out[i",
  "out[j",
  "out[n",
  "out[s[i",
  "out[u]++",
  "outgoing",
  "outgoing_.find(index",
  "outgoing_[from].emplace_back(to",
  "outgoing_[vertex].begin",
  "outgoing_[vertex].end",
  "outgoing_edges(components_count",
  "outgoing_edges[i",
  "outgoing_edges[strong_component_sizes[i",
  "output",
  "output.begin",
  "output.end",
  "output.erase(--iterator",
  "output.insert(iterator",
  "output.push_back(c",
  "outputChar",
  "outputName",
  "outputName.empty",
  "outputUppercaseChar",
  "output_string",
  "output_string.push_back(c",
  "outputchar",
  "outputname",
  "outputname.empty",
  "outputs",
  "outputting",
  "outputuppercasechar",
  "outside",
  "ov.",
  "ove",
  "over",
  "over!\\n",
  "overall_sum",
  "overflow",
  "overflows",
  "overlap",
  "overlapping",
  "overloaded",
  "overwrite",
  "ow1",
  "ow2",
  "own",
  "owq",
  "ows",
  "oyd",
  "o\u2019clock",
  "o\u2019s",
  "p",
  "p'][cardnumber",
  "p(1",
  "p(1,0",
  "p(128),m(128",
  "p(9",
  "p(N",
  "p(P",
  "p(a",
  "p(a[i",
  "p(a[x",
  "p(b",
  "p(c",
  "p(const",
  "p(h",
  "p(i",
  "p(k",
  "p(l",
  "p(ll",
  "p(m+1",
  "p(m+1),s(m+1,1",
  "p(n",
  "p(n),c(n",
  "p(n+1,true",
  "p(p",
  "p(q",
  "p(r",
  "p(s",
  "p(u",
  "p(v",
  "p(vi",
  "p(x",
  "p(x1",
  "p(y",
  "p)cout<<x+1",
  "p++",
  "p--",
  "p.",
  "p.back()[i",
  "p.back()[z",
  "p.end",
  "p.m",
  "p.m.",
  "p.pop_back",
  "p.push_back('D",
  "p.push_back('L",
  "p.push_back('R",
  "p.push_back('U",
  "p.push_back('d",
  "p.push_back('l",
  "p.push_back('r",
  "p.push_back('u",
  "p.push_back(2",
  "p.push_back(i",
  "p.push_back(u",
  "p.push_back(v",
  "p.push_back(vi(n",
  "p.size",
  "p.size()-1)o",
  "p.size();i++",
  "p.x",
  "p.y",
  "p.z",
  "p/=k;q/=k",
  "p1",
  "p1.x",
  "p1.y",
  "p1[u",
  "p2",
  "p2.x",
  "p2.y",
  "p2[u",
  "p3",
  "p3.x",
  "p3.y",
  "p;i++",
  "p;j++",
  "p;j+=i",
  "p=10001",
  "p=15",
  "p[0",
  "p[0]=-1",
  "p[0]=p[1]=false",
  "p[0][i",
  "p[1",
  "p[2",
  "p[K",
  "p[N",
  "p[a",
  "p[a[u",
  "p[b",
  "p[c",
  "p[c]++",
  "p[i",
  "p[i-1]*A)%B",
  "p[i-1]*a)%b",
  "p[i]&&p[j++])s.push_back(i",
  "p[i]=find(p[i",
  "p[index++",
  "p[j",
  "p[j]=false",
  "p[j]=i",
  "p[k",
  "p[k]=u",
  "p[l",
  "p[n",
  "p[n-1]+1",
  "p[ones[0",
  "p[r",
  "p[r][c",
  "p[s",
  "p[t",
  "p[u",
  "p[u].insert(v",
  "p[u].push_back(v",
  "p[u]=-1",
  "p[v",
  "p[v]=u",
  "p[x",
  "p[x]=find(p[x",
  "p[y][x",
  "p\\n",
  "p][j",
  "p_g",
  "p_j",
  "p_l",
  "p_m",
  "p_n",
  "p_o",
  "p_r",
  "p_v",
  "p_x",
  "p_y",
  "pa",
  "pa.",
  "pa==pb",
  "pace",
  "pair",
  "pair.second",
  "pair_end",
  "pair_set_t",
  "pair_start",
  "pair_t",
  "pairs",
  "pam",
  "paradox",
  "parameters",
  "parent",
  "parent(n",
  "parent--",
  "parent.assign(n",
  "parent.end",
  "parent.max_ending",
  "parent.max_right",
  "parent.max_sum",
  "parent.resize(nodes",
  "parent.sum",
  "parentEdges(_nodes",
  "parentEdges[edge.to",
  "parentIndex",
  "parentName",
  "parentNode",
  "parentNumber",
  "parentSum",
  "parentSum[neighbor",
  "parentSum[parent",
  "parent[0",
  "parent[MAXN",
  "parent[a[u",
  "parent[current",
  "parent[current_node",
  "parent[edge.to",
  "parent[i",
  "parent[j",
  "parent[maxn",
  "parent[neighbor",
  "parent[node",
  "parent[pu",
  "parent[pv",
  "parent[sorted_nodes[0",
  "parent[sorted_nodes[j",
  "parent[u",
  "parent[v",
  "parent[vertex",
  "parent_(N",
  "parent_(n",
  "parent_[i",
  "parent_[x",
  "parent_[y",
  "parentedges(_nodes",
  "parentedges[edge.to",
  "parentheses",
  "parentindex",
  "parentname",
  "parentnode",
  "parentnumber",
  "parents",
  "parents(n",
  "parents.size",
  "parentsForQueries",
  "parentsForQueries.push_back(animalIndexMap[childName",
  "parentsForQueries[i",
  "parents[0",
  "parents[MAXN",
  "parents[b",
  "parents[i",
  "parents[maxn",
  "parents[n",
  "parents[next",
  "parents[root",
  "parents[u",
  "parents[v",
  "parentsforqueries",
  "parentsforqueries.push_back(animalindexmap[childname",
  "parentsforqueries[i",
  "parentsum",
  "parentsum[neighbor",
  "parentsum[parent",
  "parity",
  "parse",
  "parsing",
  "part",
  "part>(1",
  "part>::iterator",
  "part>::iterator>(n",
  "part_iter",
  "part_iter++",
  "part_iter--",
  "part_iter->id",
  "part_iter->vertices.begin",
  "part_iter->vertices.insert(current_vertex",
  "part_iter->vertices.insert(i",
  "part_pointers",
  "part_pointers.resize(main_graph_size",
  "part_pointers[current_vertex]->vertices.empty",
  "part_pointers[current_vertex]->vertices.erase(current_vertex",
  "part_pointers[i",
  "part_pointers[neighbor",
  "part_pointers[neighbor]->vertices.empty",
  "part_pointers[neighbor]->vertices.erase(current_vertex",
  "partial",
  "partialSum",
  "partialSumLeft",
  "partialSumRight",
  "partialsum",
  "partialsumleft",
  "partialsumright",
  "particular",
  "parties",
  "partitions",
  "partitions++",
  "parts",
  "parts.begin",
  "parts.emplace_back",
  "parts.empty",
  "parts.erase(part_pointers[current_vertex",
  "parts.erase(part_pointers[neighbor",
  "parts.erase(pointers[u",
  "parts.erase(pointers[v",
  "parts.insert(it",
  "parts.insert(part_iter",
  "partsRequired",
  "partsrequired",
  "party_size(countries",
  "party_size[current",
  "party_size[i",
  "party_size[neighbor",
  "party_size[neighbor]--",
  "pas",
  "pascalcase",
  "pass",
  "pass\\n",
  "path",
  "path(1",
  "path(height",
  "path.end",
  "path.pop_back",
  "path.push_back(root",
  "path.push_back(u",
  "path.push_back(v",
  "path.size",
  "path1",
  "path2",
  "path[i",
  "path[i][col",
  "path[nextRow][nextCol",
  "path[nextrow][nextcol",
  "path_cost",
  "path_map(map",
  "path_map(vector",
  "path_queue",
  "path_queue.emplace(initial_y",
  "path_queue.emplace(ny",
  "path_queue.emplace(y",
  "path_queue.empty",
  "path_queue.front",
  "path_queue.front().get<0",
  "path_queue.front().get<1",
  "path_queue.pop",
  "pathmap(map",
  "pathmap(vector",
  "paths",
  "paths(map.size",
  "paths.back().push_back(u",
  "paths.push_back(vi",
  "paths.size",
  "paths.size();i++",
  "paths[c[u",
  "paths[current.y][current.x",
  "paths[i",
  "paths[i].size",
  "paths[i].size();j++",
  "paths[i][j",
  "paths[l",
  "paths[l-1].push_back(u",
  "paths[positions[j].first][positions[j].second",
  "paths[y][x",
  "patience",
  "pattern",
  "pattern.end",
  "pattern[messageIndex",
  "pattern[messageindex",
  "pawn",
  "pawn1",
  "pawn2",
  "pawns",
  "pb",
  "pb_ds",
  "pbds",
  "pd",
  "pdf",
  "pe(_n",
  "pe.end",
  "pe[e.to",
  "peak",
  "peaks",
  "ped",
  "pending",
  "pending.empty",
  "pending.front",
  "pending.pop_front",
  "pending.push_back(next",
  "pending.push_front(initial",
  "people",
  "people(rows",
  "peopleInQueue",
  "peopleValue",
  "people[i][j",
  "people[j",
  "people[j][i",
  "people[row1][col1",
  "peopleinqueue",
  "peoplevalue",
  "per",
  "percentage",
  "percentage_above_average",
  "perfect",
  "perfect\\n",
  "perform",
  "performance",
  "performing",
  "performs",
  "perimeter",
  "period",
  "periodA",
  "periodB",
  "perioda",
  "periodb",
  "periods",
  "permutation",
  "permutation(int",
  "permutation(x",
  "permutations",
  "permutations.push_back(current_permutation",
  "permutations.size",
  "person",
  "person--",
  "pes",
  "petition.\\n",
  "petitions",
  "ph",
  "ph.d.",
  "phs",
  "pi",
  "pi[N",
  "pi[i",
  "pi[n",
  "piece",
  "pieces",
  "pj",
  "place",
  "place_queen(0",
  "place_queen(int",
  "place_queen(row",
  "placed",
  "placeholder",
  "placement",
  "places",
  "planning",
  "play",
  "played",
  "player",
  "playerA",
  "playerB",
  "playerB++",
  "playerMap",
  "playerMap.end",
  "playerMap.find(name1",
  "playerMap.find(name2",
  "playerMap[name1",
  "playerMap[name2",
  "playerPositions(nPlayers",
  "playerPositions[(currentPosition",
  "playerPositions[currentPosition",
  "playerPositions[nPlayers",
  "playerPositions[p",
  "playerToMove",
  "playerWins",
  "playerWins.push_back(0",
  "playerWins.size",
  "playerWins[0",
  "playerWins[i",
  "playerWins[playerMap[name1",
  "playerWins[playerMap[name2]]++",
  "playera",
  "playerb",
  "playerb++",
  "playermap",
  "playermap.end",
  "playermap.find(name1",
  "playermap.find(name2",
  "playermap[name1",
  "playermap[name2",
  "playerpositions(nplayers",
  "playerpositions[(currentposition",
  "playerpositions[currentposition",
  "playerpositions[nplayers",
  "playerpositions[p",
  "players",
  "players.push_back(name1",
  "players.push_back(name2",
  "players.size",
  "players[maxIndex",
  "players[maxindex",
  "playertomove",
  "playerwins",
  "playerwins.push_back(0",
  "playerwins.size",
  "playerwins[0",
  "playerwins[i",
  "playerwins[playermap[name1",
  "playerwins[playermap[name2]]++",
  "ple",
  "plot",
  "plural",
  "plus",
  "ply",
  "pm",
  "pofik",
  "pofik\\n",
  "point",
  "point(T",
  "point(t",
  "pointValue",
  "pointer",
  "pointers",
  "pointers[i",
  "pointers[u]->vertices.empty",
  "pointers[u]->vertices.erase(u",
  "pointers[v",
  "pointers[v]->vertices.empty",
  "pointers[v]->vertices.erase(v",
  "pointing",
  "points",
  "points(n",
  "points.end",
  "points.push_back(make_tuple(start_x",
  "points[i",
  "points[j",
  "points[j]).modulus",
  "points[k].get<0",
  "points[k].get<1",
  "points_vector",
  "pointvalue",
  "pointvector",
  "pole",
  "poles",
  "polygon",
  "polygon(n",
  "polygon.size",
  "polygon[i+1].first",
  "polygon[i+1].second",
  "polygon[i].first",
  "polygon[i].second",
  "pop",
  "popping",
  "populate",
  "populatePrimes(intMatrix",
  "populatePrimes(segmentTree",
  "populateSegmentTree(const",
  "populateSegmentTree(factors",
  "populateprimes(intmatrix",
  "populateprimes(segmenttree",
  "populatesegmenttree(const",
  "populatesegmenttree(factors",
  "portion",
  "portugal",
  "pos",
  "pos(mice",
  "pos.push_back({from",
  "pos[i].first",
  "position",
  "positionFromTail",
  "positionTaken(numPositions",
  "positionTaken[i",
  "positionTaken[j",
  "positionfromtail",
  "positions",
  "positions(map",
  "positions(targetPosition",
  "positions(targetposition",
  "positions(vector",
  "positions.end",
  "positions.size",
  "positions[0",
  "positions[1",
  "positions[2",
  "positions[changes",
  "positions[i",
  "positions[i++",
  "positions[i].first",
  "positions[i].second",
  "positions[j",
  "positions[targetPosition",
  "positions[targetposition",
  "positiontaken(numpositions",
  "positiontaken[i",
  "positiontaken[j",
  "positive",
  "possible",
  "possible.\\n",
  "possiblePositions",
  "possible\\n",
  "possible_arrays",
  "possible_arrays.end",
  "possible_arrays.pop_back",
  "possible_arrays.push_back(arrA[0",
  "possible_arrays.push_back(arrA[index",
  "possible_arrays.push_back(arra[0",
  "possible_arrays.push_back(arra[index",
  "possible_value",
  "possiblepositions",
  "potential",
  "potentialFactor",
  "potentialFactor++",
  "potential_maximum",
  "potential_multiple",
  "potentialfactor",
  "potentialfactor++",
  "pow",
  "pow((k-2",
  "pow((x",
  "pow(10",
  "pow(2",
  "pow(F",
  "pow(a",
  "pow(abs(y1",
  "pow(b",
  "pow(catColor.first",
  "pow(catcolor.first",
  "pow(coatColor.first",
  "pow(coatcolor.first",
  "pow(f",
  "pow(idx",
  "pow(int",
  "pow(k,3",
  "pow(larger",
  "pow(ll",
  "pow(pow(abs(x1",
  "pow(s",
  "pow2[0",
  "pow2[N+1",
  "pow2[i",
  "pow2[n+1",
  "power",
  "power(2",
  "power(a",
  "power(int",
  "power(ll",
  "power++",
  "powers",
  "powq",
  "powq[2",
  "powq[N",
  "powq[n",
  "powq[s",
  "pq",
  "pq.empty",
  "pq.pop",
  "pq.push(b",
  "pq.push({0",
  "pq.push({d[i][currentNode",
  "pq.push({d[i][currentnode",
  "pq.push({d[i][i",
  "pq.push({new_dist",
  "pq.top",
  "pqi",
  "pqiii",
  "pqr",
  "pqueueData",
  "pqueueData.pop",
  "pqueueData.push(value",
  "pqueueData.top",
  "pqueueValid",
  "pqueuedata",
  "pqueuedata.pop",
  "pqueuedata.push(value",
  "pqueuedata.top",
  "pqueuevalid",
  "pr",
  "pr.",
  "pre",
  "precision",
  "precompute",
  "precomputed",
  "precomputing",
  "predecessor",
  "predecessors",
  "predefined",
  "prefix",
  "prefix(n",
  "prefixLength",
  "prefixSum(n",
  "prefixSum[0",
  "prefixSum[a",
  "prefixSum[b",
  "prefixSum[j",
  "prefixSum[n",
  "prefixSums(requiredCourses.size",
  "prefixSums[i",
  "prefixTable(1",
  "prefixTable.back()[i",
  "prefixTable.back()[longStrings[i].second",
  "prefixTable.push_back(vi(n",
  "prefixTable[0][i",
  "prefix[0",
  "prefix[a",
  "prefix[b",
  "prefix[j",
  "prefix[j-1",
  "prefix[n",
  "prefix_sum(a",
  "prefix_sum(array_size",
  "prefix_sum(b",
  "prefix_sum(int",
  "prefix_sum[index",
  "prefix_sums(length_of_word",
  "prefix_sums.back",
  "prefix_sums[0",
  "prefix_sums[i",
  "prefixes",
  "prefixlength",
  "prefixsum(n",
  "prefixsum[0",
  "prefixsum[a",
  "prefixsum[b",
  "prefixsum[j",
  "prefixsum[n",
  "prefixsums(requiredcourses.size",
  "prefixsums[i",
  "prefixtable(1",
  "prefixtable.back()[i",
  "prefixtable.back()[longstrings[i].second",
  "prefixtable.push_back(vi(n",
  "prefixtable[0][i",
  "prepare",
  "prepares",
  "prepend",
  "preprocessing",
  "prerequisite",
  "present",
  "press",
  "prev",
  "prev(s.end",
  "prev++",
  "prev->first",
  "prev->second",
  "prevCostPerFlow",
  "prevIter",
  "prevIter->first",
  "prevIter->second",
  "prevRow",
  "prevState",
  "prevState.second",
  "prev_cost_per_flow",
  "prev_x",
  "prev_y",
  "prevcostperflow",
  "prevention",
  "previous",
  "previousCount",
  "previousCountStableStacks",
  "previousIndex1",
  "previousNode",
  "previousNumber",
  "previousPositionToCheck",
  "previousVertices(_nodes",
  "previousVertices[currentVertex",
  "previousVertices[edge.to",
  "previous_beat_interval",
  "previous_beats_per_minute",
  "previous_time",
  "previouscount",
  "previouscountstablestacks",
  "previousindex1",
  "previously",
  "previousnode",
  "previousnumber",
  "previouspositiontocheck",
  "previousvertices(_nodes",
  "previousvertices[currentvertex",
  "previousvertices[edge.to",
  "previter",
  "previter->first",
  "previter->second",
  "prevrow",
  "prevstate",
  "prevstate.second",
  "price",
  "prime",
  "primeFactors(int",
  "primeFactors(number",
  "primeFactors(target",
  "primeFactors(y",
  "primeNumbers[1",
  "primeNumbers[MAX_LIMIT",
  "primeNumbers[i",
  "primeNumbers[number",
  "primeNumbers[p",
  "prime[P",
  "prime[i",
  "prime[j",
  "prime[p",
  "primefactors(int",
  "primefactors(number",
  "primefactors(target",
  "primefactors(y",
  "primenumbers[1",
  "primenumbers[i",
  "primenumbers[max_limit",
  "primenumbers[number",
  "primenumbers[p",
  "primes",
  "primes(p",
  "primes(vi",
  "primes.push_back(2",
  "primes.push_back(i",
  "primes.size",
  "primes[0",
  "primes[MAX",
  "primes[P",
  "primes[i",
  "primes[j",
  "primes[max",
  "primes[p",
  "primes[primes.size",
  "principio\\n",
  "print",
  "printFactors(0",
  "printFactors(index",
  "printFactors(int",
  "printResult(const",
  "printResult(result",
  "printSCC(int",
  "printSCC(it->first",
  "print_result",
  "print_result(print_result",
  "print_result(self",
  "print_step",
  "printed",
  "printf",
  "printf(\"%.1f\\n%d\\n",
  "printf(\"%.3f\\n",
  "printf(\"%02d%s\\n",
  "printf(\"%02d%s\\n\",c",
  "printf(\"%02d:%02d:%02d\\n",
  "printf(\"%02d:%02d:%02d\\n\",h",
  "printf(\"%3d",
  "printf(\"%d",
  "printf(\"%d\\n",
  "printf(\"%lld",
  "printf(\"%s",
  "printf(\"Arbitrage\\n",
  "printf(\"Case",
  "printf(\"Maze",
  "printf(\"Ok\\n",
  "printf(\"Yy(%c(Z%c)%c(Z%c)zz(%c%czZY)z)%c(%c%c)y(%c%cy",
  "printf(\"arbitrage\\n",
  "printf(\"case",
  "printf(\"maze",
  "printf(\"ok\\n",
  "printf(\"yy(%c(z%c)%c(z%c)zz(%c%czzy)z)%c(%c%c)y(%c%cy",
  "printfactors(0",
  "printfactors(index",
  "printfactors(int",
  "printing",
  "printresult(const",
  "printresult(result",
  "prints",
  "printscc(int",
  "printscc(it->first",
  "prior",
  "priority",
  "priorityQueue",
  "priorityQueue.pop",
  "priorityQueue.push(make_tuple((votes[ballotIndex",
  "priorityQueue.push(make_tuple(candidateIndex",
  "priorityQueue.top",
  "priority_queue",
  "priorityqueue",
  "priorityqueue.pop",
  "priorityqueue.push(make_tuple((votes[ballotindex",
  "priorityqueue.push(make_tuple(candidateindex",
  "priorityqueue.top",
  "private",
  "probabilities[0",
  "probabilities[1",
  "probabilities[10",
  "probabilities[2",
  "probabilities[3",
  "probabilities[4",
  "probabilities[5",
  "probabilities[6",
  "probabilities[7",
  "probabilities[8",
  "probabilities[9",
  "probabilities[i",
  "problem",
  "problemset",
  "proceed",
  "proceeding",
  "process",
  "processed",
  "processed[node",
  "processing",
  "product",
  "product(blockSize",
  "product(blocksize",
  "product[i",
  "prof",
  "prof.",
  "profitability",
  "program",
  "program.\\n",
  "programming",
  "project",
  "prompt",
  "propagate",
  "propagate(int",
  "propagate(y",
  "propagate(y/2",
  "propagating",
  "proper",
  "properties",
  "protein",
  "prototypes",
  "proven",
  "provided",
  "provides",
  "ps",
  "ps.push_back(xy.second",
  "ps.push_back(y",
  "ps.resize(0",
  "pse",
  "pss",
  "psum(a.size",
  "psum[i",
  "psum[k",
  "pt",
  "pt(x",
  "pt(x*d",
  "pt(x+p.x",
  "pt(x1",
  "pt.",
  "ptd",
  "pth",
  "ptr",
  "pty",
  "pu",
  "public",
  "pudo\\n",
  "push",
  "push(idx",
  "push(int",
  "push(ll",
  "push(node",
  "push(x",
  "pushing",
  "put",
  "puts",
  "puzzle",
  "puzzleParts",
  "puzzleParts.push_back(line",
  "puzzleParts.size",
  "puzzleParts[i",
  "puzzleparts",
  "puzzleparts.push_back(line",
  "puzzleparts.size",
  "puzzleparts[i",
  "pv",
  "pv(_n",
  "pv.end",
  "pv[e.to",
  "pv[v",
  "px",
  "px),pb",
  "px)=z[j",
  "py",
  "p{x",
  "q",
  "q(x2",
  "q)cout<<s<<\"\\n",
  "q++",
  "q--",
  "q.",
  "q.back",
  "q.begin",
  "q.emplace(ay",
  "q.emplace(make_pair(0",
  "q.emplace(make_pair(weight",
  "q.emplace(u",
  "q.emplace(y",
  "q.empty",
  "q.erase(z",
  "q.front",
  "q.front().get<1",
  "q.insert({-cache[D][j",
  "q.insert({-cache[L][i",
  "q.insert({-cache[R][i",
  "q.insert({-cache[U][j",
  "q.insert({-cache[d][j",
  "q.insert({-cache[l][i",
  "q.insert({-cache[r][i",
  "q.insert({-cache[u][j",
  "q.pop",
  "q.pop_back",
  "q.pop_front",
  "q.push(0",
  "q.push(b",
  "q.push(i",
  "q.push(initialState",
  "q.push(initialstate",
  "q.push(k",
  "q.push(k[u",
  "q.push(make_pair(get_index(current_permutation",
  "q.push(make_pair(new_index",
  "q.push(make_tuple((a[i",
  "q.push(make_tuple(ai",
  "q.push(make_tuple(b",
  "q.push(make_tuple(i",
  "q.push(make_tuple(nextNode",
  "q.push(make_tuple(nextnode",
  "q.push(make_tuple(src",
  "q.push(max(x",
  "q.push(n",
  "q.push(neighbor",
  "q.push(next",
  "q.push(nextState",
  "q.push(nextstate",
  "q.push(ones[0",
  "q.push(s",
  "q.push(u",
  "q.push(v",
  "q.push(x",
  "q.push(y",
  "q.push({-d[v",
  "q.push({-x",
  "q.push({-y",
  "q.push({0",
  "q.push({0,0",
  "q.push({0,0,-1",
  "q.push({0,0,i",
  "q.push({0.0",
  "q.push({1",
  "q.push({a",
  "q.push({b+d",
  "q.push({block[0][i",
  "q.push({c",
  "q.push({d[i],0,i",
  "q.push({d[i],rand()*10,i",
  "q.push({d[v",
  "q.push({d[v],i",
  "q.push({d[v],i*(1+rand()%2),v",
  "q.push({digitSum(n",
  "q.push({digitsum(b",
  "q.push({digitsum(n",
  "q.push({dist[nextNode",
  "q.push({dist[nextnode",
  "q.push({distances[adjacent",
  "q.push({double(num",
  "q.push({double(p[i",
  "q.push({dy",
  "q.push({i,0,v",
  "q.push({k",
  "q.push({l",
  "q.push({n",
  "q.push({n+d",
  "q.push({neighbor",
  "q.push({newTime",
  "q.push({newtime",
  "q.push({next_y",
  "q.push({r",
  "q.push({s",
  "q.push({src",
  "q.push({start_y",
  "q.push({static_cast",
  "q.push({sy",
  "q.push({v",
  "q.push({w",
  "q.push({w+x",
  "q.push({w+y",
  "q.push({x",
  "q.push({x+1000,-1",
  "q.push({x,1",
  "q.push({z",
  "q.push_back(i",
  "q.push_back(o.str",
  "q.push_back({i",
  "q.push_back({i+k",
  "q.push_back({j",
  "q.push_back({j+k",
  "q.push_back({t",
  "q.push_back({y[i",
  "q.resize(n",
  "q.size",
  "q.size()>1",
  "q.top",
  "q.top().second",
  "q.top();q.pop",
  "q=0",
  "q=1",
  "qL",
  "qR",
  "q[2",
  "q[N",
  "q[c",
  "q[i",
  "q[n",
  "q[p",
  "q[s",
  "q[u",
  "q[v",
  "q[v].insert(u",
  "q[x",
  "qi",
  "qii",
  "qiii",
  "qka",
  "ql",
  "qmax(j",
  "qmax(ll",
  "qr",
  "qsum(b.size",
  "qsum[i",
  "quadrilateral",
  "quadruple",
  "quadruples",
  "quantities",
  "quantity",
  "que",
  "que.empty",
  "que.pop",
  "que.push(Q{0",
  "que.push(Q{dist[e.to",
  "que.push(q{0",
  "que.push(q{dist[e.to",
  "que.top().to",
  "queen",
  "queens",
  "queries",
  "queries(q",
  "queries--",
  "queries.end",
  "queriesNumber",
  "queries[i",
  "queriesnumber",
  "query",
  "query(a",
  "query(int",
  "query(l",
  "query(m+1",
  "query(node",
  "queryCache(numberOfQueries",
  "queryEnd",
  "queryIndex",
  "queryNumber",
  "queryStart",
  "query_length",
  "query_node",
  "query_node--",
  "query_number",
  "query_s",
  "query_y",
  "querycache(numberofqueries",
  "queryend",
  "queryindex",
  "querying",
  "querynumber",
  "querystart",
  "question",
  "queue",
  "queue.back",
  "queue.emplace(newRow",
  "queue.emplace(newrow",
  "queue.emplace(row",
  "queue.empty",
  "queue.front",
  "queue.pop",
  "queue.pop_back",
  "queue.pop_front",
  "queue.push(0",
  "queue.push(i",
  "queue.push(neighbor",
  "queue.push(nodeMap[startingNode",
  "queue.push(nodemap[startingnode",
  "queue.push(s",
  "queue.push(v",
  "queue.push({(weight",
  "queue.push({-dist[neighbor",
  "queue.push({0",
  "queue.push({key",
  "queue.push({left",
  "queue.push({right",
  "queue.push({stoi(blocks[0][i",
  "queue.push({v",
  "queue.push_back(limit",
  "queue.push_back(neighbor",
  "queue.push_back({y[current",
  "queue.push_back({y[i",
  "queue.top",
  "queue.top().second",
  "queueData",
  "queueData.front",
  "queueData.pop",
  "queueData.push(value",
  "queueValid",
  "queue\\n",
  "queue_int",
  "queuedata",
  "queuedata.front",
  "queuedata.pop",
  "queuedata.push(value",
  "queuevalid",
  "quit",
  "quota",
  "quoteCount",
  "quotecount",
  "quotient",
  "q{0",
  "r",
  "r%2",
  "r(0",
  "r(1",
  "r(128",
  "r(2",
  "r(3",
  "r(6",
  "r(8",
  "r(a",
  "r(b",
  "r(c",
  "r(component_count",
  "r(d",
  "r(i",
  "r(j",
  "r(k",
  "r(m",
  "r(n",
  "r(p",
  "r(q",
  "r(r",
  "r(s",
  "r(u",
  "r(v",
  "r(x",
  "r(x3",
  "r(y",
  "r)=a[i",
  "r)cout<<k",
  "r)cout<<x<<\"\\n",
  "r++",
  "r+=M",
  "r+=m",
  "r--",
  "r-1",
  "r-1,k=0",
  "r-=k*2",
  "r->sum",
  "r.",
  "r.back",
  "r.emplace_back(-dfs(i",
  "r.end",
  "r.insert(find(l",
  "r.insert(r.size",
  "r.insert(z",
  "r.key",
  "r.pop_back",
  "r.push_back",
  "r.push_back(a[i",
  "r.push_back(c",
  "r.push_back(c%10",
  "r.push_back(ch",
  "r.push_back(i",
  "r.push_back(items[j",
  "r.push_back(make_tuple(--a",
  "r.push_back(s",
  "r.push_back(s[i",
  "r.push_back(s[i++",
  "r.push_back(u",
  "r.push_back(u+1",
  "r.push_back(v",
  "r.push_back(w[j",
  "r.push_back(w[j]/v[j",
  "r.push_back(x[i",
  "r.push_back(z",
  "r.push_back({c[i",
  "r.push_back({u",
  "r.push_back({x",
  "r.size",
  "r.size()-1",
  "r.size();i++)cout<<r[i",
  "r0[1000",
  "r0[i",
  "r1",
  "r1[1000",
  "r1[i",
  "r2",
  "r3",
  "r;i++",
  "r;i++)cin>>b[i",
  "r<0",
  "r=(r",
  "r=0",
  "r=0,k",
  "r?0",
  "r?1",
  "r[(node",
  "r[0",
  "r[1",
  "r[1000",
  "r[5][5",
  "r[N",
  "r[]={-1,0,1,0",
  "r[]={-2,-2,-1,-1,1,1,2,2",
  "r[a[i][j]]++",
  "r[b",
  "r[c",
  "r[d",
  "r[g[i",
  "r[i",
  "r[i-1",
  "r[i]=1",
  "r[i][i",
  "r[i][j",
  "r[i][j]=k",
  "r[idx",
  "r[j",
  "r[j][k",
  "r[j][k]+x[j][l]*y[l][k]%M)%M",
  "r[j][k]+x[j][l]*y[l][k]%m)%m",
  "r[k",
  "r[k+i]=s1[i",
  "r[l",
  "r[m+n",
  "r[m[i]-1]=i",
  "r[n",
  "r[s[i",
  "r[s[x",
  "r[tc",
  "r[u",
  "r[u]=0",
  "r[u]=1",
  "r[u]=true",
  "r[u][v",
  "r[v",
  "r[v][u",
  "r[w",
  "r[x[0",
  "r\\n",
  "r_a",
  "r_b",
  "r_t",
  "radians",
  "radius",
  "raise",
  "raised",
  "ral",
  "ram",
  "ran",
  "random_shuffle(order.begin",
  "randomly",
  "range",
  "rangeSet",
  "rangeSet.end",
  "rangeSet.erase(it",
  "rangeSet.insert(make_tuple(b2",
  "rangeSet.insert(make_tuple(midpoint",
  "rangeSet.lower_bound(make_tuple(0",
  "range_sum_query",
  "ranges",
  "ranges.end",
  "ranges.erase(it",
  "ranges.insert(make_tuple(b",
  "ranges.insert(make_tuple(b2",
  "ranges.lower_bound(make_tuple(a",
  "rangeset",
  "rangeset.end",
  "rangeset.erase(it",
  "rangeset.insert(make_tuple(b2",
  "rangeset.insert(make_tuple(midpoint",
  "rangeset.lower_bound(make_tuple(0",
  "rank",
  "rank(n",
  "rank[a[u",
  "rank[i",
  "rank[pu",
  "rank[pv",
  "rank[sa[i",
  "ranks",
  "ranks(nodes",
  "ranks[group[node",
  "ranks[i",
  "ranks[node",
  "ras",
  "rate",
  "ratios",
  "ray",
  "rb_tree_tag",
  "rce",
  "rch",
  "rd",
  "rd--",
  "rd1",
  "rd2",
  "rds",
  "re",
  "re.",
  "re.cap",
  "rea",
  "reach",
  "reachable",
  "reachableNodesCount",
  "reachableNodesCount++",
  "reachableNodesInsideTimeLimit",
  "reachablenodescount",
  "reachablenodescount++",
  "reachablenodesinsidetimelimit",
  "reached",
  "reaching",
  "read",
  "readInput(atcoder::MinCostMaxFlowGraph",
  "readInput(graph",
  "readability",
  "readable",
  "reading",
  "readinput(atcoder::mincostmaxflowgraph",
  "readinput(graph",
  "reads",
  "reasoning",
  "reasons",
  "recalculate",
  "receives",
  "reciprocal",
  "reconstruct",
  "record",
  "recorded",
  "recordedDreams",
  "recordedDreams.begin",
  "recordedDreams.empty",
  "recordedDreams.end",
  "recordedDreams.erase(recordedDreams.begin",
  "recordedDreams.pop_back",
  "recordedDreams.push_back(dream",
  "recordedDreams.size",
  "recordeddreams",
  "recordeddreams.begin",
  "recordeddreams.empty",
  "recordeddreams.end",
  "recordeddreams.erase(recordeddreams.begin",
  "recordeddreams.pop_back",
  "recordeddreams.push_back(dream",
  "recordeddreams.size",
  "recount!\\n",
  "rectangle",
  "recursion",
  "recursive",
  "recursively",
  "red",
  "reduce",
  "reduce_distances(dists",
  "reduce_distances(matrix",
  "reduce_distances(vector",
  "reduced",
  "reducedistances(dists",
  "reduction",
  "redundant",
  "ree",
  "ref",
  "reference",
  "regardless",
  "regions",
  "reinsert",
  "related",
  "relations",
  "relationship",
  "relevant",
  "rem",
  "remain",
  "remainder",
  "remaining",
  "remainingAGroups",
  "remainingBGroups",
  "remainingCapacity",
  "remainingCards",
  "remainingCards++",
  "remainingChars(length",
  "remainingChars[i",
  "remainingElements",
  "remainingFactors",
  "remainingFactors.erase(remainingFactors.begin",
  "remainingInvalidBallots",
  "remainingRows",
  "remaining_apples",
  "remaining_capacity",
  "remaining_cities",
  "remaining_cities(mice",
  "remaining_cities.size",
  "remaining_cities[i",
  "remaining_cities[j",
  "remaining_city",
  "remaining_digits",
  "remainingagroups",
  "remainingbgroups",
  "remainingcapacity",
  "remainingcards",
  "remainingcards++",
  "remainingchars(length",
  "remainingchars[i",
  "remainingelements",
  "remainingfactors",
  "remainingfactors.erase(remainingfactors.begin",
  "remaininginvalidballots",
  "remainingrows",
  "remember",
  "removal",
  "remove",
  "removeNodeAtPosition(Node",
  "removed",
  "removeduplicates(head->next",
  "removeduplicates(node",
  "removenodeatposition(node",
  "removes",
  "removing",
  "ren",
  "rename",
  "renaming",
  "rep",
  "rep.",
  "repeat",
  "repeated",
  "repeating",
  "repetition",
  "repetitive",
  "replace",
  "represent",
  "representation",
  "representation(s)\\n",
  "representative",
  "representatives",
  "representatives.insert(find(leaders",
  "representatives.size",
  "represented",
  "representing",
  "represents",
  "req",
  "req[N",
  "req[n",
  "req[p",
  "req[x",
  "request",
  "requested",
  "requests",
  "requests.begin",
  "requests.end",
  "requests.erase(it",
  "requests.insert(Book(bookTitles[titleToOrder",
  "requests.insert(book(booktitles[titletoorder",
  "requests::iterator",
  "required",
  "requiredCourses",
  "requiredCourses.push_back(it->second",
  "requiredCourses.push_back(nextIt->second",
  "requiredCourses.size",
  "requiredCourses[i",
  "requiredDigits",
  "requiredQueries",
  "required_nodes[N",
  "required_nodes[n",
  "required_nodes[node",
  "required_nodes[parent",
  "requiredcourses",
  "requiredcourses.push_back(it->second",
  "requiredcourses.push_back(nextit->second",
  "requiredcourses.size",
  "requiredcourses[i",
  "requireddigits",
  "requiredqueries",
  "requirements",
  "requires",
  "rer",
  "res",
  "res(q",
  "res[i",
  "reset",
  "resetting",
  "residual",
  "residualCapacity(int",
  "residualCapacity(vertex",
  "residualcapacity(int",
  "residualcapacity(vertex",
  "respect",
  "respective",
  "respectively",
  "response",
  "rest",
  "rest(number_of_days",
  "restores",
  "result",
  "result(6",
  "result(edge_count",
  "result(edges.size",
  "result(m",
  "result(n",
  "result(numVertices",
  "result(number_of_days",
  "result(numvertices",
  "result(outgoing_.size",
  "result(size[0",
  "result++",
  "result.back",
  "result.begin",
  "result.end",
  "result.first",
  "result.pop_back",
  "result.push_back(edge_weights[j",
  "result.push_back(i",
  "result.push_back(interval",
  "result.push_back(item",
  "result.push_back(sum",
  "result.push_back(x",
  "result.push_back({flow",
  "result.rend",
  "result.second",
  "result.size",
  "resultIndex",
  "resultIntervals",
  "result[10",
  "result[5][5",
  "result[bit",
  "result[i",
  "result[j][k",
  "result[k",
  "result[m",
  "result[n",
  "result[newX][newY",
  "result[newx][newy",
  "result[rotation",
  "result[sequenceIndex",
  "result[sequenceindex",
  "result[u",
  "result[x][y",
  "result_amount",
  "result_amount--",
  "result_fft",
  "result_sum",
  "resultindex",
  "resulting",
  "resultintervals",
  "results",
  "results(Q",
  "results(q",
  "results.end",
  "results.push_back({-probabilities[i",
  "results[i",
  "results[idx",
  "return",
  "returns",
  "returns.begin",
  "returns.clear",
  "returns.end",
  "returns.insert(pss(author",
  "rev",
  "rev.",
  "rev_it",
  "reverse",
  "reverse(a",
  "reverse(a.begin",
  "reverse(a.begin(),a.end",
  "reverse(ans.back().begin",
  "reverse(ans.begin",
  "reverse(answer.begin",
  "reverse(artificial_vertex.begin",
  "reverse(b.begin",
  "reverse(b.begin(),b.end",
  "reverse(c.begin",
  "reverse(d.begin",
  "reverse(digitArray.begin",
  "reverse(digitarray.begin",
  "reverse(digits_a.begin",
  "reverse(digits_b.begin",
  "reverse(line.begin",
  "reverse(o.begin",
  "reverse(o.begin(),o.end",
  "reverse(p.begin",
  "reverse(p.begin(),p.end",
  "reverse(path.begin",
  "reverse(paths[i].begin(),paths[i].end",
  "reverse(r.begin",
  "reverse(r.begin(),r.end",
  "reverse(result.begin",
  "reverse(s.begin",
  "reverse(s.begin(),s.end",
  "reverse(s1.begin",
  "reverse(s1.begin(),s1.end",
  "reverse(scc.begin",
  "reverse(solutionOrder.begin",
  "reverse(solutionorder.begin",
  "reverse(sorted_nodes.begin",
  "reverse(t.begin",
  "reverse(x.begin(),x.end",
  "reverseEdgeId",
  "reverseGraph(nodesCount",
  "reverseGraph[v",
  "reverse_adjacency_list(main_graph_size",
  "reverse_adjacency_list[current_vertex].begin",
  "reverse_adjacency_list[current_vertex].end",
  "reverse_adjacency_list[i].end",
  "reverse_adjacency_list[neighbor].end",
  "reverse_adjacency_list[u].push_back({inverse_order[v",
  "reverse_adjacency_list[v].push_back({inverse_order[u",
  "reverse_capacity(n",
  "reverse_capacity[v][u",
  "reverse_graph",
  "reverse_graph(n",
  "reverse_graph[current_node",
  "reverse_graph[node",
  "reverse_graph[v].push_back(u",
  "reverse_graph[v_index].push_back(u_name",
  "reversed",
  "reversed(component_ids",
  "reverseedgeid",
  "reversegraph(nodescount",
  "reversegraph[v",
  "reverses",
  "reversing",
  "reward",
  "rewritten",
  "rgc",
  "rge",
  "rgv",
  "rhs",
  "rhs.x",
  "rhs.y",
  "rhs.z",
  "ri",
  "ria",
  "ric",
  "rid",
  "right",
  "right(4",
  "right(a.begin",
  "right(right",
  "right--",
  "right->sum",
  "right.max_ending",
  "right.max_sum",
  "right.size",
  "right.sum",
  "rightAns",
  "rightAns.first",
  "rightAns.second",
  "rightBound",
  "rightChildIndex",
  "rightMin",
  "rightSum",
  "right[D][j",
  "right[D][y",
  "right[L][i",
  "right[L][y",
  "right[R][i",
  "right[U][j",
  "right[U][y",
  "right[d][j",
  "right[d][y",
  "right[j",
  "right[l][i",
  "right[l][y",
  "right[r][i",
  "right[u][j",
  "right[u][y",
  "right_child",
  "right_index",
  "right_index++",
  "rightans",
  "rightans.first",
  "rightans.second",
  "rightbound",
  "rightchildindex",
  "rightmin",
  "rightmost",
  "rightsum",
  "ring",
  "ring\"<<(m!=1?\"s\":\"\")<<\".\\n",
  "rings",
  "river",
  "rix",
  "riz",
  "rk.",
  "rks",
  "rld",
  "rly",
  "rms",
  "rmy",
  "rnd(4",
  "rnd[D][j",
  "rnd[D][y",
  "rnd[L][i",
  "rnd[L][y",
  "rnd[R][i",
  "rnd[R][y",
  "rnd[U][j",
  "rnd[U][y",
  "rnd[d][j",
  "rnd[d][y",
  "rnd[l][i",
  "rnd[l][y",
  "rnd[r][i",
  "rnd[r][y",
  "rnd[u][j",
  "rnd[u][y",
  "rns",
  "robot",
  "rof",
  "rolls",
  "rom",
  "romance\\n",
  "ron",
  "room",
  "roomNumber",
  "roomnumber",
  "rooms",
  "root!=-1",
  "rootNode",
  "rooted",
  "rootnode",
  "roots",
  "roots(B",
  "roots(b",
  "roots(nodes",
  "roots[artificial_vertex[i",
  "roots[c",
  "roots[d",
  "roots[i",
  "roots[node",
  "ror",
  "ros",
  "rotating",
  "rotation",
  "rotation_angle",
  "rotations",
  "round",
  "round(double(u[k",
  "round(static_cast",
  "round(tf",
  "rounded",
  "route",
  "route.pop_back",
  "route.push_back(i",
  "route.size",
  "route[i",
  "routes",
  "routes.size",
  "row",
  "row(m",
  "row++",
  "row.end",
  "row.length",
  "row.substr(0",
  "row1",
  "row2",
  "rowCheck(gridSize",
  "rowCheck[matrix[i][j",
  "rowConflicts",
  "rowEnd",
  "rowIndices",
  "rowIndices.clear",
  "rowIndices.push_back(i",
  "rowIndices.size",
  "rowIndices[i",
  "rowInput",
  "rowInput[j",
  "rowSum",
  "rowWidth",
  "row[j",
  "row[length",
  "rowcheck(gridsize",
  "rowcheck[matrix[i][j",
  "rowconflicts",
  "rowend",
  "rowindices",
  "rowindices.clear",
  "rowindices.push_back(i",
  "rowindices.size",
  "rowindices[i",
  "rowinput",
  "rowinput[j",
  "rows",
  "rows.back()[0",
  "rows.push_back(string(current_row",
  "rows.size",
  "rowsCounted",
  "rowsCounted++",
  "rows[i].length",
  "rows[i][j",
  "rows[ny][nx",
  "rows[y][x",
  "rows_filled_so_far",
  "rows_filled_so_far++",
  "rowscounted",
  "rowscounted++",
  "rowsum",
  "rowwidth",
  "rp",
  "rp.",
  "rq",
  "rr",
  "rra",
  "rry",
  "rs",
  "rs(q",
  "rs--",
  "rs.",
  "rs[i",
  "rsa",
  "rse",
  "rst",
  "rsum",
  "rtX",
  "rtY",
  "rta",
  "rte",
  "rth",
  "rts",
  "rtx",
  "rty",
  "rue",
  "rul",
  "rule",
  "rum",
  "run",
  "running",
  "runs",
  "rup",
  "rve",
  "rx",
  "ry",
  "s",
  "s&&j",
  "s's",
  "s(0",
  "s(1",
  "s(128",
  "s(128,-1",
  "s(3",
  "s(B",
  "s(L",
  "s(M",
  "s(N",
  "s(P",
  "s(Q",
  "s(S",
  "s(T",
  "s(a",
  "s(b",
  "s(c",
  "s(components_counter",
  "s(const",
  "s(d",
  "s(e",
  "s(f",
  "s(g",
  "s(h",
  "s(i",
  "s(int",
  "s(j",
  "s(k",
  "s(l",
  "s(ll",
  "s(m",
  "s(m+1",
  "s(n",
  "s(n),p",
  "s(n),t(n",
  "s(n),t(n),r(n",
  "s(number_of_nodes",
  "s(p",
  "s(py",
  "s(q",
  "s(r",
  "s(s",
  "s(sy",
  "s(t",
  "s(u",
  "s(v",
  "s(vi",
  "s(x",
  "s(y",
  "s(z",
  "s)M",
  "s)a[c-'0']++",
  "s)c+=(!x",
  "s)c+=x",
  "s)cout<<char(c-7",
  "s)m",
  "s++",
  "s+=",
  "s+=M",
  "s+=a",
  "s+=a[i",
  "s+=k",
  "s+=m",
  "s+=x",
  "s+binomial(k-1,i-1,m)*binomial(n",
  "s+n",
  "s+x)%M",
  "s+x)%m",
  "s--",
  "s-1",
  "s.",
  "s.append(string(81",
  "s.back().first",
  "s.back().second",
  "s.begin",
  "s.c.",
  "s.c_str",
  "s.clear",
  "s.cost",
  "s.count((x",
  "s.count(a[j",
  "s.count(c",
  "s.count(neighbor",
  "s.count(x",
  "s.count(z",
  "s.empty",
  "s.end",
  "s.erase(a",
  "s.erase(a[i++",
  "s.erase(b",
  "s.erase(element",
  "s.erase(i",
  "s.erase(it",
  "s.erase(it->second",
  "s.erase(k",
  "s.erase(s.find(*b",
  "s.erase(s.find_by_order(s.order_of_key(a[i",
  "s.erase(s.find_by_order(s.order_of_key(a[x",
  "s.erase(x",
  "s.erase(y",
  "s.erase({-x1",
  "s.erase({x2",
  "s.find",
  "s.find(c",
  "s.find(y",
  "s.find(z",
  "s.find_by_order((k",
  "s.find_by_order(i",
  "s.find_by_order(k",
  "s.find_by_order(s.size",
  "s.find_by_order(x",
  "s.insert(-(i",
  "s.insert(-get<1>(a[j++",
  "s.insert(0",
  "s.insert(a",
  "s.insert(a[i",
  "s.insert(a[j",
  "s.insert(c",
  "s.insert(i",
  "s.insert(k",
  "s.insert(make_pair(i",
  "s.insert(make_tuple(a",
  "s.insert(make_tuple(x",
  "s.insert(neighbor",
  "s.insert(t",
  "s.insert(u",
  "s.insert(x",
  "s.insert(y",
  "s.insert(z",
  "s.insert({-x1",
  "s.insert({x2",
  "s.length",
  "s.lower_bound(make_tuple(x",
  "s.lower_bound(x",
  "s.order_of_key(x",
  "s.order_of_key(y",
  "s.pop",
  "s.pop_back",
  "s.push(b",
  "s.push(i",
  "s.push(v[i",
  "s.push(x",
  "s.push_back('0",
  "s.push_back(i",
  "s.push_back(t",
  "s.push_back({x[i",
  "s.rbegin",
  "s.resize(cc.size",
  "s.resize(k[n",
  "s.resize(n",
  "s.size",
  "s.size()-1",
  "s.size();i++)b[i]=s[i]-'0",
  "s.size();i+=2)n[s[i]-'A']=1",
  "s.size();i+=2)n[s[i]-'a']=1",
  "s.substr(0",
  "s.substr(0,2",
  "s.substr(3,2",
  "s.substr(8",
  "s.substr(i",
  "s.substr(j",
  "s.substr(k",
  "s.substr(spos",
  "s.substr(x",
  "s.top",
  "s.x",
  "s.y",
  "s.z",
  "s1",
  "s1(a",
  "s1(a[i",
  "s1(a[x",
  "s1(const",
  "s1,s2",
  "s1.cities_left_to_expand",
  "s1.city",
  "s1.cost",
  "s1.empty",
  "s1.end",
  "s1.matrix",
  "s1.pop",
  "s1.push(sum",
  "s1.remaining_cities",
  "s1.size",
  "s1.stack.push_front(0",
  "s1.top",
  "s1[i",
  "s1[j",
  "s2",
  "s2(a",
  "s2(const",
  "s2(v",
  "s2.empty",
  "s2.end",
  "s2.pop",
  "s2.pop_back",
  "s2.push(sum",
  "s2.push_back(c",
  "s2.top",
  "s2[1",
  "s2[i",
  "s2[j",
  "s2[n",
  "s3",
  "s3.empty",
  "s3.pop",
  "s3.push(sum",
  "s3.top",
  "s;getline(cin",
  "s;i++)cin>>a[i",
  "s<0",
  "s<<\"\\n",
  "s=0",
  "sUp",
  "s[0",
  "s[0]+=k",
  "s[0]-'A",
  "s[0]-'A'+1",
  "s[0]-'a",
  "s[0]-'a'+1",
  "s[0]-'a',x",
  "s[0]-=k",
  "s[0][0",
  "s[0][j",
  "s[1",
  "s[100",
  "s[100001",
  "s[1001",
  "s[1]-'1",
  "s[1]-'A",
  "s[1]-'A',v",
  "s[1]-'a",
  "s[1]-'a',v",
  "s[2",
  "s[3",
  "s[3]-'A",
  "s[3]-'a",
  "s[3]-'a';x",
  "s[4",
  "s[4]-'1",
  "s[5",
  "s[6",
  "s[7",
  "s[8",
  "s[9",
  "s[N",
  "s[P",
  "s[a",
  "s[a[i",
  "s[a[i]+i",
  "s[a[i][j]-1",
  "s[a[i][j]-1]++",
  "s[a[j][i]-1",
  "s[a[j][i]-1]++",
  "s[b",
  "s[c",
  "s[c[i]]++",
  "s[ci[v][0",
  "s[current_node",
  "s[d",
  "s[end_index",
  "s[find(u",
  "s[g[i",
  "s[i",
  "s[i+1",
  "s[i-1",
  "s[i-1]-'a",
  "s[i1",
  "s[i2",
  "s[i]*j",
  "s[i]*t",
  "s[i]*t2",
  "s[i]++",
  "s[i]+=s[j",
  "s[i],y",
  "s[i]-'0",
  "s[i].insert(x",
  "s[i]=1",
  "s[i][j",
  "s[i][j]=k",
  "s[id[1",
  "s[id[i",
  "s[j",
  "s[j+k+1]>s[i+k+1])j",
  "s[j]--",
  "s[j]<s[i",
  "s[j]=1",
  "s[j]>s[i",
  "s[k",
  "s[k[u",
  "s[l",
  "s[m",
  "s[n",
  "s[n-1",
  "s[neighbor",
  "s[node",
  "s[o",
  "s[p",
  "s[s.size",
  "s[start",
  "s[start_index-1",
  "s[t",
  "s[u",
  "s[u]++",
  "s[u]+=s[v",
  "s[u].insert(x",
  "s[u].size",
  "s[u]=0",
  "s[u]=1",
  "s[u]=k",
  "s[u]=true",
  "s[u][v",
  "s[v",
  "s[v]++",
  "s[v]--",
  "s[v].size",
  "s[v]=s[u]+1",
  "s[w]--",
  "s[x",
  "s[x].erase(i",
  "s[x].insert(i",
  "s[x].order_of_key(l",
  "s[x].order_of_key(r",
  "s[y",
  "s[y][x",
  "s[y][x]=1",
  "s[y][x]=k",
  "s[z",
  "s[z]++",
  "s\\n",
  "s_2",
  "s_a",
  "s_b",
  "s_vector(number_of_nodes",
  "s_vector[i",
  "sa",
  "sa(n",
  "sa.begin",
  "sa.empty",
  "sa.erase(K",
  "sa.erase(k",
  "sa.insert(k",
  "sa[i",
  "sa[index",
  "sa[p.back()[i",
  "sa[rank[i",
  "sack",
  "sacks",
  "sacks_filled",
  "sad\\n",
  "safe",
  "safe\\n",
  "safe_cells(board_size",
  "safe_cells[i][0",
  "safe_cells[i][board_size",
  "safe_cells[row][col",
  "sal",
  "same",
  "sameColorCount",
  "sameColorCount++",
  "samecolorcount",
  "samecolorcount++",
  "satisfy",
  "saturday",
  "save",
  "saved",
  "sb",
  "sb.empty",
  "sb.erase(K",
  "sb.erase(k",
  "sb.first",
  "sb.insert(k",
  "sb.second",
  "scaling",
  "scanf",
  "scanf(\"%c",
  "scanf(\"%d",
  "scanf(\"%d-%d\\n",
  "scanf(\"%d-%d\\n\",&a,&b",
  "scanf(\"%d:%d:%d\\n\",&a,&b,&c",
  "scanf(\"%d:%d:%d\\n\",&hours,&minutes,&seconds",
  "scanf(\"%d:%d\\n",
  "scanf(\"%d\\n",
  "scanf(\"%s",
  "scanf(\"%s\\n",
  "scc",
  "scc.end",
  "sccs",
  "schedule",
  "score",
  "score(digits_a",
  "score(digits_b",
  "score(vector",
  "scores.end",
  "scores[4",
  "scores[i",
  "sd",
  "sd.first",
  "sd.second",
  "se",
  "seA",
  "seB",
  "se\\n\":\"imperfecto\\n",
  "sea",
  "search",
  "search(const",
  "search(v",
  "searching",
  "seb",
  "second",
  "secondNumber",
  "second\\n",
  "second_min",
  "second_string",
  "second_string[position",
  "secondary",
  "secondaryDiagonalSum",
  "secondarydiagonalsum",
  "secondnumber",
  "seconds",
  "seconds_passed",
  "section",
  "sections",
  "sed",
  "segTree",
  "segTree.build(1",
  "segTree.query(1",
  "segTree.resize(2",
  "segTree.update(1",
  "segTree[2*i+1].sum",
  "segTree[2*i].sum",
  "segTree[2*k+1].inc",
  "segTree[2*k+1].set",
  "segTree[2*k+1].sum",
  "segTree[2*k].inc",
  "segTree[2*k].set",
  "segTree[2*k].sum",
  "segTree[4",
  "segTree[i].set",
  "segTree[i].sum",
  "segTree[id",
  "segTree[id].clear",
  "segTree[id].end",
  "segTree[id].push_back(a[l][0",
  "segTree[id].push_back(v",
  "segTree[k].inc",
  "segTree[k].set",
  "segTree[k].sum",
  "segTree[n",
  "segment",
  "segment(a",
  "segment(const",
  "segmentCount",
  "segmentSize",
  "segmentTree",
  "segmentTree(MAX_PRIME",
  "segmentTree.push_back(buildSegmentTree(0",
  "segmentTree.push_back(segmentTree[index",
  "segmentTree[1].erase(x",
  "segmentTree[1].insert(i",
  "segmentTree[currentNode",
  "segmentTree[leftBound",
  "segment_length",
  "segmentcount",
  "segments",
  "segments.begin",
  "segments.emplace_back(y1",
  "segmentsize",
  "segmenttree",
  "segmenttree(max_prime",
  "segmenttree.push_back(buildsegmenttree(0",
  "segmenttree.push_back(segmenttree[index",
  "segmenttree[1].erase(x",
  "segmenttree[1].insert(i",
  "segmenttree[currentnode",
  "segmenttree[leftbound",
  "segmenttreenode",
  "segmenttreenode(buildsegmenttree(start",
  "segmenttreenode(inputarray[start",
  "segmenttreenode(int",
  "segmenttreenode(segmenttreenode",
  "segmenttreenode(value",
  "segmenttreenode>(2*n",
  "segtree",
  "segtree.build(1",
  "segtree.query(1",
  "segtree.resize(2",
  "segtree.update(1",
  "segtree[2*i+1].sum",
  "segtree[2*i].sum",
  "segtree[2*k+1].inc",
  "segtree[2*k+1].set",
  "segtree[2*k+1].sum",
  "segtree[2*k].inc",
  "segtree[2*k].set",
  "segtree[2*k].sum",
  "segtree[4",
  "segtree[i].set",
  "segtree[i].sum",
  "segtree[id",
  "segtree[id].clear",
  "segtree[id].end",
  "segtree[id].push_back(a[l][0",
  "segtree[id].push_back(v",
  "segtree[k].inc",
  "segtree[k].set",
  "segtree[k].sum",
  "segtree[n",
  "selectItems(const",
  "selectItems(v",
  "selected",
  "selected.count(i",
  "selected.end",
  "selected.erase(remove(selected.begin",
  "selected.insert(i",
  "selected.size",
  "selectedSet",
  "selectedset",
  "selections",
  "selectitems(const",
  "selectitems(v",
  "self",
  "self(index",
  "semimajor",
  "semimajor1",
  "semimajor2",
  "sen",
  "sen.",
  "sentence",
  "sentence.size",
  "sentence_length",
  "sep",
  "sep.",
  "sep.empty",
  "separate",
  "separated",
  "separately",
  "separator",
  "sept",
  "sept.",
  "sequence",
  "sequence(1",
  "sequence(array_size",
  "sequence(number_of_elements",
  "sequence.at(0",
  "sequence.back",
  "sequence.begin",
  "sequence.end",
  "sequence.front",
  "sequence.length",
  "sequence.push_back(num",
  "sequence.resize(sequence.size",
  "sequence.size",
  "sequenceIndex",
  "sequenceIndex++",
  "sequenceIndex--",
  "sequenceLength",
  "sequence[0",
  "sequence[i",
  "sequence[j",
  "sequenceindex",
  "sequenceindex++",
  "sequenceindex--",
  "sequencelength",
  "sequences",
  "ser",
  "series",
  "serving",
  "servingPrice",
  "servingprice",
  "servings",
  "ses",
  "set",
  "set(200001",
  "set(rows",
  "set.count(s",
  "set.count(t",
  "set.empty",
  "set.erase(it",
  "set.find_by_order((set.size",
  "set.insert(i",
  "set.insert(number",
  "set.insert(s",
  "set.insert(t",
  "set.pop_back",
  "set.push_back(i",
  "set.push_back(v[i",
  "set.size",
  "setInt",
  "setOfInts",
  "setPattern(pattern.begin",
  "setPattern.count(msgChar",
  "setPattern.empty",
  "setPattern.erase(msgChar",
  "set[b",
  "set[current_number",
  "set[index",
  "set[number",
  "set[x",
  "setint",
  "setofints",
  "setpattern(pattern.begin",
  "setpattern.count(msgchar",
  "setpattern.empty",
  "setpattern.erase(msgchar",
  "setprecision(10",
  "setprecision(2",
  "setprecision(20",
  "setprecision(3",
  "setprecision(4",
  "setprecision(6",
  "setprecision(9",
  "sets",
  "setting",
  "settings",
  "sf",
  "sfy",
  "sg",
  "sh.",
  "sha",
  "shall",
  "share",
  "she",
  "she's",
  "shelve",
  "shelve.end",
  "shelve.erase(it",
  "shelve.insert(pss(author",
  "shelve.lower_bound(author",
  "shelves",
  "she\u2019s",
  "shift",
  "shifted",
  "shortcut",
  "shorten",
  "shortening",
  "shortens",
  "shorter",
  "shortest",
  "shortest(s",
  "shortestPath(end_y",
  "shortestPath(int",
  "shortestPath(source",
  "shortestPath(start_y",
  "shortest_path",
  "shortest_path.clear",
  "shortest_path.emplace_back(make_tuple(current_node",
  "shortest_path.size",
  "shortest_path[j",
  "shortestpath(end_y",
  "shortestpath(int",
  "shortestpath(source",
  "shortestpath(start_y",
  "should",
  "shown",
  "shuffle",
  "si",
  "si(int",
  "si\\n",
  "sici",
  "side",
  "side_length",
  "sides",
  "sieve",
  "sieve(ll",
  "sieve(n",
  "sieve[MAX_N",
  "sieve[i",
  "sieve[j",
  "sieve[max_n",
  "sieve[n",
  "sign",
  "signal",
  "sii",
  "siici",
  "siiii",
  "similar",
  "similarly",
  "simple",
  "simplicity",
  "simplifies",
  "simplify",
  "simply",
  "simulate",
  "simultaneously",
  "sin(PI",
  "sin(a",
  "sin(pi",
  "sin(radians",
  "sin(t",
  "since",
  "single",
  "sink",
  "sit",
  "size",
  "size(2",
  "size(N",
  "size(n",
  "sizeX",
  "sizeY",
  "size[0",
  "size[1",
  "size[MAX_NODES",
  "size[a",
  "size[b",
  "size[currentNode",
  "size[currentnode",
  "size[i",
  "size[max_nodes",
  "size[x",
  "size[y",
  "size_t",
  "size_x",
  "size_y",
  "sizeof",
  "sizeof(accumulatedSum",
  "sizeof(accumulatedSum[0",
  "sizeof(accumulatedsum",
  "sizeof(accumulatedsum[0",
  "sizeof(bool",
  "sizeof(componentId",
  "sizeof(componentid",
  "sizeof(dp",
  "sizeof(g",
  "sizeof(int",
  "sizeof(primes)/sizeof(int",
  "sizeof(visited",
  "sizes",
  "sizes(componentSize",
  "sizes(componentsize",
  "sizes(n",
  "sizes(nodes",
  "sizes(rows",
  "sizes.resize(nodes",
  "sizes[a",
  "sizes[b",
  "sizes[componentSize",
  "sizes[componentsize",
  "sizes[find(u",
  "sizes[i",
  "sizes[j",
  "sizes[neighbor",
  "sizes[node",
  "sizex",
  "sizey",
  "sj",
  "skip",
  "sks",
  "sl",
  "sliding",
  "slope",
  "slope(int",
  "slope(s",
  "slope(source",
  "slope*j",
  "slope*remainingKnickpoints",
  "slope*remainingknickpoints",
  "slopes",
  "slowPtr",
  "slowPtr->next",
  "slowptr",
  "slowptr->next",
  "sly",
  "smaller",
  "smaller_than_k",
  "smaller_than_k++",
  "smallest",
  "smallest_multiple",
  "smallest_path_length",
  "smallest_value",
  "snake_case",
  "so",
  "soldier",
  "soldiersToProcess",
  "soldierstoprocess",
  "solution",
  "solution.push_back(i",
  "solution.size",
  "solutionOrder",
  "solutionOrder.end",
  "solutionOrder.push_back(u",
  "solution[i",
  "solution\\n",
  "solutionorder",
  "solutionorder.end",
  "solutionorder.push_back(u",
  "solutions",
  "solutions(nodeCount",
  "solutions(nodecount",
  "solutions[adjacentNode",
  "solutions[adjacentnode",
  "solutions[endingNode",
  "solutions[endingnode",
  "solutions[nodeIndex",
  "solutions[nodeindex",
  "solutions[startingNode",
  "solutions[startingnode",
  "solve",
  "solve(int",
  "solve(vector",
  "solve(x",
  "solve_greedy_randomness",
  "solved[26",
  "solved[i",
  "solved[p",
  "solving",
  "some",
  "someone",
  "somethin",
  "somethin'",
  "something",
  "somethin\u2019",
  "son",
  "sor",
  "sort",
  "sort(&a[0],&a[n],greater",
  "sort(A.begin",
  "sort(A.rbegin",
  "sort(B.begin",
  "sort(B.rbegin",
  "sort(a",
  "sort(a.begin",
  "sort(a.begin(),a.end",
  "sort(a.rbegin",
  "sort(a.rbegin(),a.rend",
  "sort(a[i].begin",
  "sort(a[i].begin(),a[i].end",
  "sort(ans.rbegin",
  "sort(arr.begin",
  "sort(array_a.begin",
  "sort(array_b.rbegin",
  "sort(b",
  "sort(b.begin",
  "sort(b.begin(),b.end",
  "sort(b.rbegin",
  "sort(b.rbegin(),b.rend",
  "sort(buckets.begin",
  "sort(c.begin",
  "sort(c.begin(),c.end",
  "sort(cameras.begin",
  "sort(colors.begin",
  "sort(component.begin",
  "sort(counters.begin",
  "sort(cupContents.begin",
  "sort(cupcontents.begin",
  "sort(cups.begin",
  "sort(current_set.begin",
  "sort(d",
  "sort(data",
  "sort(distinct_factors.begin",
  "sort(ds.begin",
  "sort(e.begin",
  "sort(e.begin(),e.end",
  "sort(edges.begin",
  "sort(electiveCourses.begin",
  "sort(electivecourses.begin",
  "sort(end.begin",
  "sort(endTimes.begin",
  "sort(endtimes.begin",
  "sort(fence.begin",
  "sort(g[i].begin",
  "sort(graph.begin",
  "sort(grid.begin",
  "sort(hashes.begin",
  "sort(in.begin",
  "sort(input_string.begin",
  "sort(inputs.begin",
  "sort(intervals.begin",
  "sort(invs.begin",
  "sort(island_sizes.begin",
  "sort(it->second.begin",
  "sort(item.second.begin",
  "sort(l.begin",
  "sort(logLengths",
  "sort(loglengths",
  "sort(longStrings.begin",
  "sort(longstrings.begin",
  "sort(m.begin",
  "sort(numbers",
  "sort(numbers.begin",
  "sort(nums.begin",
  "sort(opt.begin",
  "sort(orders.rbegin",
  "sort(out.begin",
  "sort(p.begin(),p.end",
  "sort(points.begin",
  "sort(q.begin(),q.end",
  "sort(queries.begin",
  "sort(r.begin",
  "sort(r.begin(),r.end",
  "sort(r.begin(),r.end(),greater",
  "sort(result.rbegin",
  "sort(results.begin",
  "sort(reverse_adjacency_list[i].begin",
  "sort(s.begin",
  "sort(segTree[id].begin",
  "sort(segtree[id].begin",
  "sort(sequence.begin",
  "sort(sorted_nodes.begin",
  "sort(squares.begin",
  "sort(start.begin",
  "sort(startTimes.begin",
  "sort(starttimes.begin",
  "sort(stoneHeights",
  "sort(stoneheights",
  "sort(substring.begin",
  "sort(tree.begin",
  "sort(u.begin",
  "sort(v.begin",
  "sort(v.rbegin",
  "sort(weights.begin",
  "sort(x",
  "sort(x.begin",
  "sort(xCoordinates.begin",
  "sort(xcoordinates.begin",
  "sort(xs.begin",
  "sort(y.begin",
  "sort(yCoordinates.begin",
  "sort(ycoordinates.begin",
  "sort(ys.begin",
  "sort(z",
  "sort(z.begin",
  "sorted",
  "sorted(vvi",
  "sorted2(vvi",
  "sortedChars(numberOfChars",
  "sortedChars.end",
  "sortedChars.size",
  "sortedStackPositions(n",
  "sortedStackPositions[a",
  "sortedStackPositions[b",
  "sortedStackPositions[i",
  "sortedStackPositions[stackA",
  "sortedStackPositions[stackB",
  "sortedStackPositions[stackPositions[i",
  "sorted_fix(r",
  "sorted_fix(vvi",
  "sorted_nodes",
  "sorted_nodes(scc.size",
  "sorted_nodes.begin",
  "sorted_nodes.end",
  "sorted_nodes.push_back(current_node",
  "sorted_nodes.push_back(node",
  "sorted_nodes.size",
  "sorted_nodes[i",
  "sorted_nodes[j",
  "sortedchars(numberofchars",
  "sortedchars.end",
  "sortedchars.size",
  "sortedinsert(node",
  "sortedstackpositions(n",
  "sortedstackpositions[a",
  "sortedstackpositions[b",
  "sortedstackpositions[i",
  "sortedstackpositions[stacka",
  "sortedstackpositions[stackb",
  "sortedstackpositions[stackpositions[i",
  "sorting",
  "source",
  "sourceCurrencyName",
  "sourceIndex",
  "sourcecurrencyname",
  "sourceindex",
  "sources",
  "south",
  "sp",
  "space",
  "spaces",
  "spanning",
  "speak",
  "special",
  "specific",
  "specified",
  "speed",
  "speed_string",
  "split",
  "splitting",
  "spos",
  "spreading(size[0",
  "spreading[newX][newY",
  "spreading[newx][newy",
  "spreading[x][y",
  "springs",
  "springs(S",
  "springs(s",
  "springs[i",
  "sprintf(current_row",
  "sq",
  "sqrt(2",
  "sqrt(2.0",
  "sqrt(MAX",
  "sqrt(a",
  "sqrt(max",
  "sqrt(n",
  "sqrt(n2",
  "sqrt(n_square",
  "sqrt(num",
  "sqrt(number",
  "sqrt(side_length",
  "sqrt(sq",
  "sqrt(x",
  "sqrt_x",
  "square",
  "squareRoot",
  "squareTriangularNumber",
  "square_sum",
  "squareroot",
  "squares",
  "squares.back().append(1",
  "squares.end",
  "squares.push_back",
  "squaretriangularnumber",
  "squaring",
  "sr",
  "sr.first",
  "sr.second",
  "src",
  "src++",
  "srs",
  "ss",
  "ss(input",
  "ss(line",
  "ss(s",
  "ss.",
  "sscanf(a.c_str",
  "sscanf(b.c_str",
  "sscanf(l.c_str",
  "ssd",
  "sstream",
  "st",
  "st.",
  "st.empty",
  "st.pop",
  "st.push",
  "st.top",
  "stable",
  "stable_sort",
  "stable_sort(s1.begin",
  "stable_sort(s2.begin",
  "stack",
  "stack.empty",
  "stack.pop",
  "stack.push(currentNumber",
  "stack.push(currentnumber",
  "stack.push(i",
  "stack.push(j",
  "stack.push(v[currentIndex",
  "stack.push(v[currentindex",
  "stack.push_back(u",
  "stack.push_front(*it",
  "stack.push_front(remaining_city",
  "stack.top",
  "stack1",
  "stack1(stack1Size",
  "stack1(stack1size",
  "stack1.empty",
  "stack1.pop",
  "stack1.push(stackContents1[i",
  "stack1.push(stackcontents1[i",
  "stack1.top",
  "stack1Index",
  "stack1Size",
  "stack1[i",
  "stack1[max(0",
  "stack1[stack1Index",
  "stack1[stack1Index++",
  "stack1[stack1index",
  "stack1[stack1index++",
  "stack1index",
  "stack1size",
  "stack2",
  "stack2(stack2Size",
  "stack2(stack2size",
  "stack2.empty",
  "stack2.pop",
  "stack2.push(stackContents2[i",
  "stack2.push(stackcontents2[i",
  "stack2.top",
  "stack2Index",
  "stack2Size",
  "stack2[i",
  "stack2[stack2Index",
  "stack2[stack2Index++",
  "stack2[stack2index",
  "stack2[stack2index++",
  "stack2index",
  "stack2size",
  "stack3",
  "stack3.empty",
  "stack3.pop",
  "stack3.push(stackContents3[i",
  "stack3.push(stackcontents3[i",
  "stack3.top",
  "stackA",
  "stackB",
  "stackContents1(numbersOfStacks1",
  "stackContents1[i",
  "stackContents2(numbersOfStacks2",
  "stackContents2[i",
  "stackContents3(numbersOfStacks3",
  "stackContents3[i",
  "stackData",
  "stackData.empty",
  "stackData.pop",
  "stackData.push(value",
  "stackData.top",
  "stackPositions(n",
  "stackPositions[i",
  "stackValid",
  "stack[++top",
  "stack[N",
  "stack[n",
  "stack[n_vertices",
  "stack[top--",
  "stack\\n",
  "stacka",
  "stackb",
  "stackcontents1(numbersofstacks1",
  "stackcontents1[i",
  "stackcontents2(numbersofstacks2",
  "stackcontents2[i",
  "stackcontents3(numbersofstacks3",
  "stackcontents3[i",
  "stackdata",
  "stackdata.empty",
  "stackdata.pop",
  "stackdata.push(value",
  "stackdata.top",
  "stackint",
  "stackpositions(n",
  "stackpositions[i",
  "stacks",
  "stackvalid",
  "staircase(a",
  "staircase(b",
  "staircase(ll",
  "staircase(n",
  "stan",
  "standard",
  "stands",
  "star",
  "start",
  "start(n",
  "start(number_of_elements",
  "start++",
  "start.end",
  "startCol",
  "startCol--",
  "startHourA",
  "startHourB",
  "startIndex",
  "startIndex--",
  "startMinuteA",
  "startMinuteB",
  "startNode",
  "startPos",
  "startPos).find",
  "startRow",
  "startRow--",
  "startTime",
  "startTimes(numberOfBookings",
  "startTimes.end",
  "startTimes[i",
  "startX",
  "startY",
  "start[20",
  "start[current_index",
  "start[i",
  "start[index",
  "start[j",
  "start[j]--",
  "start[position",
  "start[right_index",
  "start_index",
  "start_index++",
  "start_times[N",
  "start_times[i",
  "start_times[n",
  "start_times[node",
  "start_value",
  "start_vertex",
  "start_vertex--",
  "start_x",
  "start_y",
  "startcol",
  "startcol--",
  "started",
  "starthoura",
  "starthourb",
  "startindex",
  "startindex--",
  "starting",
  "startingNode",
  "startingnode",
  "startminutea",
  "startminuteb",
  "startnode",
  "startpos",
  "startpos).find",
  "startrow",
  "startrow--",
  "starts",
  "starttime",
  "starttimes(numberofbookings",
  "starttimes.end",
  "starttimes[i",
  "startx",
  "starty",
  "state",
  "statement",
  "statements",
  "states",
  "static",
  "static_cast",
  "statistics",
  "status",
  "stay",
  "stay\\n",
  "std",
  "std::abs(x1",
  "std::abs(y1",
  "std::array",
  "std::cerr",
  "std::cin",
  "std::cin.tie(0",
  "std::cin.tie(nullptr",
  "std::cout",
  "std::end(string1",
  "std::end(string2",
  "std::endl",
  "std::fill(dist.begin",
  "std::fill(pe.begin",
  "std::fill(pv.begin",
  "std::fill(vis.begin",
  "std::find(parent.begin",
  "std::fixed",
  "std::get<0>(t",
  "std::getline(std::cin",
  "std::ios::sync_with_stdio(0",
  "std::ios::sync_with_stdio(false",
  "std::ios_base::sync_with_stdio(false",
  "std::istringstream",
  "std::less",
  "std::lower_bound(&a[j",
  "std::make_tuple(x",
  "std::map",
  "std::max(a",
  "std::max(currentSum",
  "std::max(currentsum",
  "std::max(maxArea",
  "std::max(maxFrequency",
  "std::max(maxGroupSize",
  "std::max(maxOverlaps",
  "std::max(max_diff",
  "std::max(maxarea",
  "std::max(maxfrequency",
  "std::max(maxgroupsize",
  "std::max(maximumSum",
  "std::max(maximumsum",
  "std::max(maxoverlaps",
  "std::min(c",
  "std::min(edge.capacity",
  "std::min(matrix[i][j",
  "std::min(minimum_gap",
  "std::min(number_a",
  "std::min(remainingCapacity",
  "std::min(remainingcapacity",
  "std::min(result[n",
  "std::namespace::std::point",
  "std::numeric_limits",
  "std::ostream",
  "std::pair",
  "std::priority_queue",
  "std::queue",
  "std::reverse(std::begin(string1",
  "std::reverse(std::begin(string2",
  "std::set",
  "std::setprecision(2",
  "std::sort(a.begin",
  "std::string",
  "std::string::npos",
  "std::swap(p",
  "std::swap(parent[pu",
  "std::tie(k",
  "std::tie(l",
  "std::tie(n",
  "std::tuple",
  "std::unordered_map",
  "std::vector",
  "std::vector<_edge",
  "stdc++.h",
  "stdio",
  "step",
  "step(s",
  "step(s)\\n",
  "steps",
  "steps++",
  "sth",
  "still",
  "stk",
  "stoi(blocks[nextRow][nextCol",
  "stoi(blocks[nextrow][nextcol",
  "stoi(inputs[i].substr(0",
  "stoi(numberAsString",
  "stoi(numberasstring",
  "stoi(s.substr(pos).c_str",
  "stoi(speed_string",
  "stoi(t.substr(pos).c_str",
  "stone",
  "stoneHeights",
  "stoneHeights[i",
  "stoneHeights[stoneIndex",
  "stoneHeights[stones",
  "stoneIndex",
  "stoneIndex++",
  "stoneheights",
  "stoneheights[i",
  "stoneheights[stoneindex",
  "stoneheights[stones",
  "stoneindex",
  "stoneindex++",
  "stones",
  "stop",
  "stop_index",
  "stop_index[name",
  "stop_names(N",
  "stop_names(n",
  "stop_names[i",
  "stopping",
  "stops",
  "storage",
  "store",
  "stored",
  "stores",
  "storing",
  "str",
  "str[length",
  "strand",
  "stream",
  "streams",
  "strictly",
  "string",
  "string(1",
  "string(3",
  "string(n",
  "string(remainingAGroups",
  "string(remainingBGroups",
  "string(remainingagroups",
  "string(remainingbgroups",
  "string(toPrint",
  "string(toprint",
  "string(x",
  "string(y",
  "string1",
  "string2",
  "string::npos",
  "stringVector",
  "strings",
  "stringset",
  "stringstream",
  "stringstream(s",
  "stringtoindexmap",
  "stringvector",
  "strong",
  "strong_component_sizes",
  "strong_component_sizes.clear",
  "strong_component_sizes.push_back(1",
  "strong_component_sizes.size",
  "strong_component_sizes[i",
  "strong_component_sizes[nodes[neighbor",
  "strongly",
  "struct",
  "structure",
  "structures",
  "sts",
  "student",
  "studentMap",
  "studentMap.insert(make_pair(name",
  "studentMap[name",
  "student_type",
  "student_type.end",
  "studentmap",
  "studentmap.insert(make_pair(name",
  "studentmap[name",
  "students",
  "study",
  "studyHours",
  "studyhours",
  "sub",
  "subSegmentSize",
  "subarray",
  "subarraySizes[1001",
  "subarraySizes[i",
  "subarrays",
  "subarraysizes[1001",
  "subarraysizes[i",
  "subinterval",
  "subintervals",
  "submatrices",
  "submatrix",
  "subnormal",
  "subproblem",
  "subsegmentsize",
  "subsequence",
  "subsequences",
  "subsequent",
  "subset",
  "subset(0",
  "subset[MAX_NODES",
  "subset[currentNode].insert(element",
  "subset[currentNode].size",
  "subset[currentnode].insert(element",
  "subset[currentnode].size",
  "subset[i",
  "subset[i].insert(value",
  "subset[max_nodes",
  "subset[neighbor",
  "subset[neighbor].size",
  "subsets",
  "subsets(const",
  "subsets(v",
  "substring",
  "substring.end",
  "substrings",
  "subtract",
  "subtracted",
  "subtracted_amount",
  "subtracting",
  "subtraction",
  "subtree",
  "subtrees",
  "succeeded\\n",
  "successful",
  "successfully",
  "such",
  "suffix",
  "suffixLength",
  "suffix[j",
  "suffix[n",
  "suffix_sum(array_size",
  "suffix_sum[index",
  "suffixlength",
  "suit",
  "suit_symbol",
  "suitable",
  "sum",
  "sum(0",
  "sum(a",
  "sum(b",
  "sum(b[k",
  "sum(int",
  "sum(k",
  "sum(k+b",
  "sum(l",
  "sum(ll",
  "sum(m[y",
  "sum(node",
  "sum(number",
  "sum(p",
  "sum(potentialFactor",
  "sum(potentialfactor",
  "sum(sum",
  "sum(t->l",
  "sum(t->r",
  "sum(ts[k",
  "sum(x",
  "sum++",
  "sumNumber",
  "sumY",
  "sum_in_submatrix",
  "sum_of_divisors",
  "sum_of_elements",
  "sum_of_odds",
  "sum_until_a",
  "sum_up_to_current",
  "summands",
  "summing",
  "sumnumber",
  "sums",
  "sums(10001",
  "sums.count(current_sum",
  "sums.insert(current_sum",
  "sums.resize(electiveCourses.size",
  "sums.resize(electivecourses.size",
  "sums[i",
  "sums[j",
  "sums[k",
  "sumy",
  "sunday",
  "sup",
  "supplied",
  "sure\\n",
  "svi",
  "swap",
  "swap(a",
  "swap(a[i",
  "swap(a[j",
  "swap(a[p],a[n-1",
  "swap(a[s",
  "swap(adjacencyList[node][i",
  "swap(adjacencylist[node][i",
  "swap(ans",
  "swap(answers",
  "swap(b",
  "swap(board[i][k",
  "swap(board[k",
  "swap(c",
  "swap(cur_perm[op.first",
  "swap(g[u][i",
  "swap(heap[current",
  "swap(heap[i",
  "swap(heap[parent",
  "swap(i",
  "swap(it->second",
  "swap(k1",
  "swap(line.back",
  "swap(n",
  "swap(playerMap[name1",
  "swap(playermap[name1",
  "swap(pq",
  "swap(r",
  "swap(routes",
  "swap(rp",
  "swap(s[i",
  "swap(s[u",
  "swap(sequence",
  "swap(sortedStackPositions[a",
  "swap(sortedstackpositions[a",
  "swap(subset[currentNode",
  "swap(subset[currentnode",
  "swap(u",
  "swap(v[a",
  "swap(weights[p",
  "swap(x",
  "swap(x[a",
  "swap(y[p",
  "swapped",
  "swaps",
  "swapsCount",
  "swapscount",
  "switch",
  "switch(a[y][x",
  "switch(c",
  "switch(input",
  "switch(map[j][k",
  "sx",
  "sx++",
  "sx[i",
  "sx_walkable",
  "sx_walkable[i",
  "sy",
  "sy++",
  "symbol",
  "symbols",
  "sync",
  "synchronization",
  "synchronize",
  "synchronizing",
  "sz",
  "sz[N",
  "sz[a",
  "sz[b",
  "sz[i",
  "sz[n",
  "s{make_tuple(x",
  "s\u2019s",
  "t",
  "t%3600",
  "t%60",
  "t's",
  "t(0",
  "t(1",
  "t(2",
  "t(4",
  "t(4*k",
  "t(5",
  "t(6",
  "t(F",
  "t(H",
  "t(MAX_N",
  "t(N",
  "t(T",
  "t(a",
  "t(b",
  "t(c",
  "t(d",
  "t(f",
  "t(g",
  "t(h",
  "t(i",
  "t(int",
  "t(j",
  "t(k",
  "t(l",
  "t(ll",
  "t(m",
  "t(max_n",
  "t(n",
  "t(n*32",
  "t(p",
  "t(s",
  "t(t",
  "t(u",
  "t(v",
  "t(x",
  "t(y",
  "t(z",
  "t)=a[j",
  "t*2%m",
  "t*h[i",
  "t*j",
  "t++",
  "t+1",
  "t+2",
  "t-(m",
  "t-(n",
  "t--",
  "t-=a*60",
  "t->r",
  "t->sum",
  "t.",
  "t.begin",
  "t.c_str",
  "t.count(v",
  "t.count(y",
  "t.count({{k2",
  "t.d",
  "t.end",
  "t.erase(make_tuple(b",
  "t.erase(v",
  "t.erase(y",
  "t.erase({a",
  "t.insert(make_tuple(a",
  "t.insert(make_tuple(b",
  "t.insert(v",
  "t.insert(y",
  "t.insert({a",
  "t.insert({k1",
  "t.insert({k1,k2",
  "t.length",
  "t.pop_back",
  "t.push_back('0",
  "t.push_back('A",
  "t.push_back('C",
  "t.push_back('G",
  "t.push_back('T",
  "t.push_back('a",
  "t.push_back('c",
  "t.push_back('g",
  "t.push_back('t",
  "t.push_back(c",
  "t.push_back(c[u",
  "t.push_back(s",
  "t.push_back(u",
  "t.push_back(vii(n",
  "t.push_back(x",
  "t.resize(2",
  "t.size",
  "t.size()-1;i++",
  "t.size();i++",
  "t.substr(1",
  "t.x",
  "t.y",
  "t.z",
  "t/3600",
  "t/60",
  "t0",
  "t1",
  "t2",
  "t64",
  "t;T++",
  "t;k<=T;k++",
  "t;k<=t;k++",
  "t;t++",
  "t<0",
  "t<1",
  "t<3",
  "t<<\":\\n",
  "t<<\"\\n",
  "t<<endl",
  "t=",
  "t=\"C",
  "t=\"c",
  "t=0;;t++",
  "t=0;t",
  "t=1",
  "t=1;;t++",
  "t=1;cin>>n;t++",
  "t=1;t<=T;t++",
  "t=1;t<=t;t++",
  "t=24",
  "t=3600",
  "t>(const",
  "tId",
  "tIt",
  "t[*k",
  "t[0",
  "t[0].push_back(u",
  "t[0].size",
  "t[0][i",
  "t[0][u",
  "t[1",
  "t[1].max_sum",
  "t[2",
  "t[2*i+1].sum",
  "t[2*i+1][j",
  "t[2*i].sum",
  "t[2*i][j",
  "t[2*k+1].sum",
  "t[2*k+1].z0",
  "t[2*k+1].z1",
  "t[2*k].sum",
  "t[2*k].z0",
  "t[2*k].z1",
  "t[4",
  "t[N",
  "t[N+i].sum",
  "t[a",
  "t[a[i",
  "t[b",
  "t[b++",
  "t[c",
  "t[i",
  "t[i*2",
  "t[i*2][j",
  "t[i*2][x",
  "t[i+1",
  "t[i+k][j+k",
  "t[i-1][j+k/2",
  "t[i],&b",
  "t[i].resize(2",
  "t[i].resize(m",
  "t[i].sum",
  "t[i]=1",
  "t[i][2",
  "t[i][2*j",
  "t[i][2*j+1",
  "t[i][b",
  "t[i][j",
  "t[i][j*2",
  "t[i][left[L][i",
  "t[i][left[l][i",
  "t[i][right[R][i",
  "t[i][right[r][i",
  "t[i][tk[i",
  "t[i][x",
  "t[i][y",
  "t[j",
  "t[k",
  "t[k*2",
  "t[k*2].sum",
  "t[k+i].sum",
  "t[k].first",
  "t[k].second",
  "t[k].sum",
  "t[k].z0",
  "t[k].z1",
  "t[k].z1++",
  "t[k][26]++",
  "t[k][c-'a",
  "t[k][c-'a']=z++",
  "t[k][u",
  "t[k][v",
  "t[l",
  "t[left[U][j]][j",
  "t[left[u][j]][j",
  "t[left_child",
  "t[m",
  "t[m[u]][2",
  "t[m[u]][i",
  "t[m[u]][mi[u",
  "t[m[x]][l++",
  "t[m[x]][r--",
  "t[n",
  "t[n+i].sum",
  "t[neighbor",
  "t[node",
  "t[p",
  "t[p]++",
  "t[right[D][j]][j",
  "t[right[d][j]][j",
  "t[right_child",
  "t[s",
  "t[t",
  "t[u",
  "t[u]++",
  "t[u]=k",
  "t[u][v]=1",
  "t[v",
  "t[w]=1",
  "t[x",
  "t[y][j",
  "t[y][j*2",
  "t[y][l++",
  "t[y][r--",
  "t[y][x",
  "t[y][x*2])/2",
  "t[y][x]*len",
  "t[y][x]=1",
  "t[z[i",
  "t[z[i]+i",
  "t\\n",
  "t_0",
  "t_a",
  "t_t",
  "t_vector(number_of_nodes",
  "t_vector[node",
  "t_x",
  "t_y",
  "ta",
  "ta[i",
  "table",
  "table(n",
  "table[current_node][letter",
  "tag",
  "tail",
  "take",
  "taken",
  "takes",
  "taking",
  "tal",
  "tan",
  "tar",
  "target",
  "target.first",
  "target.second",
  "targetCurrencyName",
  "targetIndex",
  "targetPosition",
  "targetSize",
  "targetSum",
  "targetValue",
  "target_sum",
  "targetcurrencyname",
  "targetindex",
  "targetposition",
  "targetsize",
  "targetsum",
  "targetvalue",
  "tarjan(int",
  "tarjan(s",
  "tarjan(v",
  "task",
  "task/1111/",
  "taskDuration",
  "taskType",
  "taskduration",
  "tasks",
  "tasksQueue",
  "tasksQueue.empty",
  "tasksQueue.pop",
  "tasksQueue.push({endTime",
  "tasksQueue.push({startTime",
  "tasksQueue.top",
  "tasksqueue",
  "tasksqueue.empty",
  "tasksqueue.pop",
  "tasksqueue.push({endtime",
  "tasksqueue.push({starttime",
  "tasksqueue.top",
  "tasktype",
  "tay",
  "tb",
  "tb.first",
  "tb.second",
  "tb[i",
  "tc",
  "tch",
  "td",
  "td.",
  "td.first",
  "td.second",
  "teA",
  "teB",
  "tea",
  "team_size",
  "teb",
  "ted",
  "telephoneNumber",
  "telephoneNumber.size",
  "telephoneNumber.substr(0",
  "telephoneNumber[0",
  "telephoneNumber[i",
  "telephonenumber",
  "telephonenumber.size",
  "telephonenumber.substr(0",
  "telephonenumber[0",
  "telephonenumber[i",
  "tem",
  "temp",
  "temp(1",
  "temp_v",
  "temp_values",
  "temp_values.erase(make_pair(b",
  "temp_values.insert(make_pair(a",
  "temp_values.insert(make_pair(b",
  "template",
  "temporary",
  "temporary(k",
  "temporaryArray",
  "temporaryArray(n",
  "temporaryArray[i",
  "temporary[j",
  "temporaryarray",
  "temporaryarray(n",
  "temporaryarray[i",
  "ten",
  "tenn",
  "tenn.",
  "tens",
  "tep",
  "ter",
  "term",
  "terminate",
  "terminates",
  "termination",
  "terms",
  "tes",
  "test",
  "test++",
  "testCase",
  "testCase++",
  "testCases",
  "testCases--",
  "test_case",
  "test_case++",
  "test_case_index",
  "test_cases",
  "test_cases--",
  "testcase",
  "testcase++",
  "testcases",
  "testcases--",
  "tests",
  "tests--",
  "tex",
  "text",
  "tf",
  "th",
  "th1",
  "th2",
  "than",
  "that",
  "that's",
  "that\u2019s",
  "the",
  "their",
  "them",
  "themselves",
  "then",
  "theorem",
  "theoretical",
  "theory",
  "there",
  "there's",
  "there\u2019s",
  "these",
  "theta",
  "they",
  "third",
  "this",
  "this's",
  "this->d",
  "this->x",
  "this->y",
  "this\u2019s",
  "thm",
  "those",
  "three",
  "through",
  "throw",
  "thrown",
  "ths",
  "thursday",
  "ti",
  "ti(n",
  "ti[N",
  "ti[i",
  "ti[i]++",
  "ti[n",
  "ti[t[i",
  "ti[t[i]]=i",
  "ti[u",
  "tic",
  "tid",
  "tie",
  "tie(a",
  "tie(a1",
  "tie(a2",
  "tie(adjacentNode",
  "tie(adjacentnode",
  "tie(b",
  "tie(b1",
  "tie(b2",
  "tie(c",
  "tie(cost",
  "tie(currentNode",
  "tie(currentPointX",
  "tie(currentTime",
  "tie(currentUnit",
  "tie(current_base",
  "tie(currentnode",
  "tie(currentpointx",
  "tie(currenttime",
  "tie(currentunit",
  "tie(d",
  "tie(distAtNode",
  "tie(distatnode",
  "tie(dy",
  "tie(edges[i][0",
  "tie(i",
  "tie(int",
  "tie(k",
  "tie(key",
  "tie(l",
  "tie(l1",
  "tie(l2",
  "tie(ll",
  "tie(lsum",
  "tie(m",
  "tie(m1",
  "tie(nameIndex",
  "tie(nameindex",
  "tie(nextNode",
  "tie(nextPointX",
  "tie(nextnode",
  "tie(nextpointx",
  "tie(operation1",
  "tie(p",
  "tie(py",
  "tie(r",
  "tie(row",
  "tie(rsum",
  "tie(semimajor1",
  "tie(si",
  "tie(sj",
  "tie(source",
  "tie(start_x",
  "tie(t",
  "tie(u",
  "tie(v",
  "tie(w",
  "tie(weight",
  "tie(x",
  "tie(x0",
  "tie(x1",
  "tie(x2",
  "tie(y",
  "tie(ya",
  "tie(yb",
  "tie\\n",
  "ties",
  "til",
  "tile",
  "tiles",
  "time",
  "time++",
  "timeChange",
  "timeLimit",
  "time_difference",
  "time_stamp",
  "time_stamp[node",
  "time_string",
  "time_string.size",
  "time_taken_to_carve",
  "time_to_reach_horizontally",
  "timechange",
  "timelimit",
  "timer",
  "timer++",
  "times",
  "times_visited",
  "times_visited(nodes",
  "times_visited[a[i",
  "times_visited[component[0",
  "times_visited[current_node",
  "times_visited[group[node",
  "times_visited[i",
  "times_visited[neighbor",
  "times_visited[node",
  "times_visited[root",
  "times_visited[sorted_nodes[0",
  "timestamp",
  "timestamps",
  "tio",
  "tis",
  "tit",
  "title",
  "titleToOrder",
  "titleToRemove",
  "titles",
  "titles.find(title)->second",
  "titles[title",
  "titletoorder",
  "titletoremove",
  "tk[N",
  "tk[i",
  "tk[m[i",
  "tk[m[x",
  "tk[n",
  "tl",
  "tle",
  "tly",
  "tm",
  "tmp",
  "tmp(k",
  "tmp[i",
  "tmp_r",
  "tn",
  "tn;i++",
  "tnt",
  "to",
  "toNode",
  "toPrint",
  "to_id",
  "to_id++",
  "to_reduce(distances.size",
  "to_reduce[j",
  "to_string(color",
  "todelete",
  "todelete.push_back(v",
  "together",
  "toggle",
  "toggle(int",
  "toggle(y1",
  "token",
  "tokenize",
  "tolerance",
  "tolower",
  "tolower(input_str[index",
  "tolower(s[i",
  "tom",
  "ton",
  "tonode",
  "too",
  "top",
  "topological",
  "topologically",
  "topping",
  "toppingIndex",
  "toppingIndex--",
  "toppingTypesAndQualities[minIndex].first",
  "toppingTypesAndQualities[minIndex].second",
  "toppingTypesAndQuantities(m",
  "toppingTypesAndQuantities[i",
  "toppingTypesAndQuantities[toppingIndex].first",
  "toppingindex",
  "toppingindex--",
  "toppings",
  "toppingtypesandqualities[minindex].first",
  "toppingtypesandqualities[minindex].second",
  "toppingtypesandquantities(m",
  "toppingtypesandquantities[i",
  "toppingtypesandquantities[toppingindex].first",
  "toprint",
  "tor",
  "tortie",
  "total",
  "total++",
  "totalArea",
  "totalCalories",
  "totalCarbohydratesCalories",
  "totalChickens",
  "totalCombinations",
  "totalConflicts",
  "totalDays",
  "totalDaysInCurrentYear",
  "totalDice",
  "totalDistance",
  "totalElements",
  "totalFactors",
  "totalFat",
  "totalFatPercent",
  "totalFiberCalories",
  "totalInvFact[MOD",
  "totalInvFact[i",
  "totalInvFact[na",
  "totalInvFact[nb",
  "totalLeftSum",
  "totalLength",
  "totalMinutes",
  "totalProtein",
  "totalRightSum",
  "totalSafePeople",
  "totalSafePeople++",
  "totalStrings",
  "totalSum",
  "totalSumRemainder",
  "totalWeight",
  "totalWords",
  "total_area",
  "total_cases",
  "total_cases--",
  "total_cells_in_row",
  "total_combinations",
  "total_cost",
  "total_count",
  "total_days",
  "total_difference",
  "total_elements",
  "total_error",
  "total_money",
  "total_nodes_visited",
  "total_nodes_visited++",
  "total_numbers",
  "total_numbers--",
  "total_people",
  "total_people++",
  "total_points",
  "total_rest_time",
  "total_rows_filled",
  "total_seconds",
  "total_sum",
  "total_test_cases",
  "total_test_cases--",
  "total_time",
  "total_votes",
  "total_weight",
  "total_work_time",
  "totalarea",
  "totalcalories",
  "totalcarbohydratescalories",
  "totalchickens",
  "totalcombinations",
  "totalconflicts",
  "totaldays",
  "totaldaysincurrentyear",
  "totaldice",
  "totaldistance",
  "totalelements",
  "totalfactors",
  "totalfat",
  "totalfatpercent",
  "totalfibercalories",
  "totalinvfact[i",
  "totalinvfact[mod",
  "totalinvfact[na",
  "totalinvfact[nb",
  "totalleftsum",
  "totallength",
  "totalminutes",
  "totalprotein",
  "totalrightsum",
  "totalsafepeople",
  "totalsafepeople++",
  "totalstrings",
  "totalsum",
  "totalsumremainder",
  "totalweight",
  "totalwords",
  "toupper(inputName[i",
  "toupper(inputname[i",
  "towards",
  "towns",
  "towns(T",
  "towns(t",
  "towns[i",
  "tp(k",
  "tp[i",
  "tr",
  "tr.first",
  "tr.second",
  "tra",
  "track",
  "tracking",
  "tracks",
  "trailing",
  "transaction",
  "transaction_index",
  "transaction_time",
  "transaction_times(time",
  "transaction_times[j].begin",
  "transaction_times[j].end",
  "transaction_times[transaction_index].erase(transaction_times[transaction_index].begin",
  "transaction_times[transaction_time].insert(customer_id",
  "transactions",
  "transform(edges.begin",
  "transform(t.begin",
  "transform(word.begin",
  "transformBinaryString(binaryStr",
  "transformBinaryString(str",
  "transformBinaryString(string",
  "transformbinarystring(binarystr",
  "transformbinarystring(str",
  "transformbinarystring(string",
  "transitive",
  "translation",
  "trapped\\n",
  "travel",
  "traveled(8",
  "traveled[endRow][endCol",
  "traveled[endrow][endcol",
  "traveled[newRow][newCol",
  "traveled[newrow][newcol",
  "traveled[row][col",
  "traversal",
  "traversals",
  "traverse",
  "traversing",
  "tree",
  "tree(2",
  "tree(k",
  "tree(s",
  "tree(segmentCount",
  "tree(segmentcount",
  "tree.end",
  "tree.push_back({u",
  "tree.size",
  "treeSize",
  "tree[0].push_back(u",
  "tree[0].size",
  "tree[0][i",
  "tree[2*i+1",
  "tree[2*k+1].inc",
  "tree[2*k+1].set",
  "tree[2*k+1].sum",
  "tree[2*k].inc",
  "tree[2*k].set",
  "tree[2*k].sum",
  "tree[N",
  "tree[a++",
  "tree[a].start",
  "tree[b--",
  "tree[b].end",
  "tree[i",
  "tree[i*2",
  "tree[i*2].sum",
  "tree[i].set",
  "tree[i].sum",
  "tree[index].end",
  "tree[index].intervals",
  "tree[index].intervals.push_back(newInterval",
  "tree[index].intervals.push_back(newinterval",
  "tree[index].start",
  "tree[j",
  "tree[j-1].end",
  "tree[j-1].start",
  "tree[k",
  "tree[k+i",
  "tree[k].inc",
  "tree[k].set",
  "tree[k].sum",
  "tree[leftChildIndex].end",
  "tree[leftchildindex].end",
  "tree[level",
  "tree[level].resize(m",
  "tree[level][currentIndex",
  "tree[level][currentindex",
  "tree[level][index",
  "tree[level][j",
  "tree[n",
  "tree[rightChildIndex].start",
  "tree[rightchildindex].start",
  "tree_order_statistics_node_update",
  "tree_policy.hpp",
  "trees",
  "trees++",
  "treesize",
  "triangle",
  "triangleNumber",
  "trianglenumber",
  "triangles",
  "triangular",
  "triangularNumber",
  "triangularnumber",
  "triple",
  "triples",
  "triples[NUM_TRIPLES][3",
  "triples[T][3",
  "triples[i][0",
  "triples[i][1",
  "triples[i][2",
  "triples[num_triples][3",
  "triples[t][3",
  "true",
  "try",
  "ts",
  "ts.push_back(build(0",
  "ts.push_back(ts[k",
  "tsA",
  "tsB",
  "ts[k",
  "tsa",
  "tsb",
  "tst",
  "tsum",
  "tt",
  "ttl",
  "tuesday",
  "tum",
  "tun",
  "tuple",
  "tuples",
  "turn",
  "turn++",
  "turns",
  "tus",
  "twice",
  "two",
  "ty1",
  "ty2",
  "type",
  "typedef",
  "typedefing",
  "typedefs",
  "typename",
  "types",
  "t{1",
  "t{make_tuple(x",
  "t\u2019s",
  "u",
  "u&&y<=v)ok=0",
  "u(d",
  "u(m",
  "u)=q.top",
  "u++",
  "u+1",
  "u--",
  "u--;v--",
  "u-1",
  "u.",
  "u.end",
  "u==cycles[l-1",
  "u==v",
  "u[]={-1,-1,0,1,1,1,0,-1",
  "u[e]][1",
  "u[i",
  "u[i]--",
  "u[j",
  "u[j]-l[j]+1",
  "u[k",
  "u[o",
  "u_name",
  "ual",
  "uba",
  "ube",
  "uce",
  "uch",
  "uct",
  "ude",
  "udy",
  "uer",
  "ues",
  "uff",
  "ug.",
  "ugh",
  "uid",
  "uit",
  "uk",
  "uke",
  "ukraine",
  "ul.",
  "ula",
  "uld",
  "uldr\"[j",
  "ule",
  "ull",
  "ulo",
  "ult",
  "um/",
  "umY",
  "ume",
  "umn",
  "ump",
  "ums",
  "umy",
  "un.",
  "un/",
  "unassigned",
  "uncolored",
  "uncomputed",
  "und",
  "undecided.\\n",
  "under",
  "underscore",
  "underscores",
  "underscores++",
  "undirected",
  "uniform_int_distribution",
  "uninitialized",
  "union",
  "unionSets(intVector",
  "unionSets(set",
  "unionsets(intvector",
  "unionsets(set",
  "unique",
  "unique(uv.begin",
  "uniqueCharacters",
  "uniqueCount",
  "uniqueCount++",
  "uniqueCounts",
  "uniqueCounts.count(count",
  "uniqueCounts.insert(count",
  "uniqueCounts.size",
  "uniqueStrings",
  "uniqueStrings.insert(currentString",
  "uniqueStrings.size",
  "uniqueValues",
  "uniqueValues.insert(i",
  "uniqueWords",
  "uniqueWords.count(word",
  "uniqueWords.insert(word",
  "unique\\n",
  "unique_elements",
  "unique_elements.insert(num",
  "unique_elements.size",
  "unique_id",
  "unique_id++",
  "uniquecharacters",
  "uniquecount",
  "uniquecount++",
  "uniquecounts",
  "uniquecounts.count(count",
  "uniquecounts.insert(count",
  "uniquecounts.size",
  "uniquestrings",
  "uniquestrings.insert(currentstring",
  "uniquestrings.size",
  "uniquevalues",
  "uniquevalues.insert(i",
  "uniquewords",
  "uniquewords.count(word",
  "uniquewords.insert(word",
  "unit",
  "unite",
  "unite(0",
  "unite(VI",
  "unite(a",
  "unite(e[a",
  "unite(e[a],e[b",
  "unite(e[b",
  "unite(i",
  "unite(int",
  "unite(l",
  "unite(leaders",
  "unite(parent",
  "unite(t",
  "unite(u",
  "unite(vi",
  "units",
  "unknown",
  "unknown\\n",
  "unmark",
  "unmarked",
  "unoccupied",
  "unordered",
  "unordered_map",
  "unordered_multiset",
  "unordered_set",
  "unorderedset",
  "unpack",
  "unplayed",
  "unreachable",
  "unreachableNodesCount",
  "unreachableNodesCount++",
  "unreachablenodescount",
  "unreachablenodescount++",
  "uns",
  "unselectedSet",
  "unselectedSet.begin",
  "unselectedSet.empty",
  "unselectedSet.end",
  "unselectedSet.insert(i",
  "unselectedset",
  "unselectedset.begin",
  "unselectedset.empty",
  "unselectedset.end",
  "unselectedset.insert(i",
  "unsigned",
  "unsigned)b",
  "unt",
  "until",
  "unused_edges",
  "unused_edges++",
  "unvisited",
  "unvisitedVertices",
  "unvisitedVertices.push_back(i",
  "unvisitedVertices.size",
  "unvisitedvertices",
  "unvisitedvertices.push_back(i",
  "unvisitedvertices.size",
  "up",
  "upA",
  "upB",
  "up\\n",
  "upa",
  "upb",
  "update",
  "update(a",
  "update(b",
  "update(i",
  "update(id",
  "update(index",
  "update(int",
  "update(k",
  "update(l",
  "update(ll",
  "update(m[y",
  "update(node",
  "update(pos",
  "update(size_t",
  "update(t->r",
  "update(ts[k",
  "update(x",
  "update(z",
  "updateDualsAndFindPath",
  "updateSegmentTree(SegmentTreeNode",
  "updateSegmentTree(node->left",
  "updateSegmentTree(node->right",
  "updateSegmentTree(segmentTree[index",
  "update_tree(int",
  "update_tree(vertex_id",
  "update_vertex(current_vertex",
  "update_vertex(int",
  "update_vertex(u",
  "updated",
  "updatedualsandfindpath",
  "updates",
  "updatesegmenttree(node->left",
  "updatesegmenttree(node->right",
  "updatesegmenttree(segmenttree[index",
  "updatesegmenttree(segmenttreenode",
  "updating",
  "upper",
  "upperBound",
  "upperBoundIt",
  "upper_bound(&a[i",
  "upper_bound(&a[i],&a[2*n+1],a[i-1]+k",
  "upper_bound(a.begin",
  "upper_bound(b[y].begin",
  "upper_bound(buckets[bucketIdx].begin",
  "upper_bound(buckets[bucketidx].begin",
  "upper_bound(numbers.begin",
  "upper_bound(recordedDreams.begin",
  "upper_bound(recordeddreams.begin",
  "upperbound",
  "upperboundit",
  "uppercase",
  "uppercase(words[0",
  "uppercase(words[i][0",
  "uppercase_letters",
  "uppercase_letters++",
  "ups",
  "upwards",
  "upy",
  "urA",
  "urB",
  "ura",
  "urb",
  "ure",
  "urn",
  "urr",
  "urs",
  "uru",
  "us",
  "usa",
  "use",
  "used",
  "used(n",
  "used[x[i",
  "user",
  "user_input",
  "uses(M",
  "uses(m",
  "uses[i",
  "uses[i]--",
  "uses[o",
  "ush",
  "usi",
  "using",
  "ust",
  "utN",
  "ute",
  "uth",
  "utility",
  "utn",
  "uto",
  "uts",
  "uv",
  "uv.begin",
  "uv.end",
  "uv.size",
  "uva",
  "uzz",
  "v",
  "v!=-1",
  "v(2",
  "v(200001",
  "v(4",
  "v(9",
  "v(b",
  "v(h",
  "v(i",
  "v(l",
  "v(m",
  "v(n",
  "v(n+1",
  "v(r",
  "v(s",
  "v(t",
  "v),b",
  "v),max(u",
  "v)=a",
  "v)=a[i",
  "v)=e[i",
  "v)=q.top",
  "v)=x",
  "v)=z",
  "v++",
  "v+1<<\"\\n",
  "v--",
  "v.",
  "v.end",
  "v.push_back(dd(a",
  "v.push_back(i",
  "v.push_back(make_tuple(m",
  "v.push_back(make_tuple(primes[j",
  "v.push_back({-x[i",
  "v.rend",
  "v.s",
  "v.s.",
  "v.size",
  "v.v",
  "v1",
  "v1(n1",
  "v1[i",
  "v2",
  "v2(n2",
  "v2[i",
  "v3(n3",
  "v3[i",
  "v<<\"\\n",
  "v=",
  "vT",
  "v[(n",
  "v[0",
  "v[1",
  "v[1001][1001",
  "v[2",
  "v[201][201",
  "v[M",
  "v[N",
  "v[]={0,-1,-1,-1,0,1,1,1",
  "v[a",
  "v[a].start",
  "v[b",
  "v[b].end",
  "v[currentIndex",
  "v[currentindex",
  "v[d",
  "v[diff",
  "v[dy][dx",
  "v[e",
  "v[i",
  "v[i*2",
  "v[i*2].end",
  "v[i*3+j",
  "v[i]--",
  "v[i].end",
  "v[i].intervals",
  "v[i].intervals.push_back(k",
  "v[i].intervals.push_back(make_tuple(a",
  "v[i].size",
  "v[i].start",
  "v[i][i",
  "v[i][j",
  "v[i][k",
  "v[it->second",
  "v[j",
  "v[j-1].end",
  "v[j-1].start",
  "v[j].begin",
  "v[j].end",
  "v[j];i++",
  "v[j][k",
  "v[k",
  "v[k].erase(v[k].begin",
  "v[k][i",
  "v[k][j",
  "v[k][n",
  "v[m",
  "v[n",
  "v[o",
  "v[s",
  "v[s.top",
  "v[sourceIndex][targetIndex",
  "v[sourceindex][targetindex",
  "v[stack.top",
  "v[sy][sx",
  "v[ti].insert(ci",
  "v[u",
  "v[v",
  "v[x",
  "v[x][y",
  "v[y",
  "v[y][x",
  "v]++",
  "v]|",
  "v_index",
  "v_v",
  "v_x",
  "v_y",
  "va",
  "va.",
  "val",
  "valid",
  "valid.begin",
  "valid.end",
  "valid.push_front(*it",
  "validMoves",
  "validMoves++",
  "valid\\n",
  "valid_move(map",
  "valid_move(vector",
  "valid_moves(map",
  "valid_moves(vector",
  "validate(digits_a",
  "validate(digits_b",
  "validate(vector",
  "validateNodeIndex(from",
  "validateNodeIndex(int",
  "validateNodeIndex(to",
  "validateSourceSink(int",
  "validateSourceSink(source",
  "validatenodeindex(from",
  "validatenodeindex(int",
  "validatenodeindex(to",
  "validatesourcesink(int",
  "validatesourcesink(source",
  "validity",
  "validmove(map",
  "validmove(vector",
  "validmoves",
  "validmoves(map",
  "validmoves(vector",
  "validmoves++",
  "value",
  "values",
  "values(numItems",
  "values(numitems",
  "values[i",
  "values[j",
  "variable",
  "variable1",
  "variable2",
  "variables",
  "variants",
  "vb",
  "vb(Y",
  "vb(Y+1",
  "vb(board_size",
  "vb(c",
  "vb(grid_cols",
  "vb(m",
  "vb(n",
  "vb(y",
  "vb(y+1",
  "vc",
  "vc(c",
  "vc(m",
  "vci",
  "vd",
  "vdd",
  "vdii",
  "ve",
  "vecInt",
  "vecint",
  "vector",
  "vector_int",
  "vector_int(nodes",
  "vector_vector_int",
  "vector_vector_int(nodes",
  "vector_vector_int(number_of_nodes",
  "vectorbool",
  "vectorint",
  "vectors",
  "vectorunorderedset",
  "vectorvectorint",
  "ved",
  "vel",
  "velocity",
  "velocity_type",
  "ven",
  "venezuela",
  "ver",
  "verification",
  "versa",
  "version",
  "versions",
  "vertex",
  "vertex.first",
  "vertex.second",
  "vertexQueue",
  "vertexQueue.empty",
  "vertexQueue.front",
  "vertexQueue.pop",
  "vertexQueue.push({0",
  "vertexQueue.push({distance[edge.to",
  "vertex_id",
  "vertexqueue",
  "vertexqueue.empty",
  "vertexqueue.front",
  "vertexqueue.pop",
  "vertexqueue.push({0",
  "vertexqueue.push({distance[edge.to",
  "vertical",
  "verticalAngle",
  "verticalangle",
  "vertices",
  "vertices(1",
  "vertices.push_back(current_vertex",
  "very",
  "ves",
  "ves\\n",
  "vgA",
  "vgB",
  "vga",
  "vgb",
  "vi",
  "vi(1",
  "vi(1,i+1",
  "vi(2",
  "vi(2*k",
  "vi(2*nn",
  "vi(27",
  "vi(3",
  "vi(4*k",
  "vi(6",
  "vi(8",
  "vi(N+1",
  "vi(b",
  "vi(c",
  "vi(gridSize",
  "vi(gridsize",
  "vi(k",
  "vi(l+1",
  "vi(m",
  "vi(m)),f(n",
  "vi(m+1",
  "vi(n",
  "vi(n),e",
  "vi(n+1",
  "vi(n,-1",
  "vi(n,1),p",
  "vi(nodeCount",
  "vi(nodecount",
  "vi(nodes",
  "vi(numItems",
  "vi(number_b",
  "vi(number_of_days",
  "vi(numitems",
  "vi(segmentSize",
  "vi(segmentsize",
  "vi(t+2",
  "vi(w",
  "vi(width",
  "vibi",
  "vice",
  "vici",
  "vii",
  "vii(m",
  "vii(w",
  "vii(width",
  "viici",
  "viii",
  "vin",
  "violating",
  "vis(_n",
  "vis.end",
  "vis[e.to",
  "vis[t",
  "vis[v",
  "visit",
  "visitSegments(const",
  "visitSegments(tree",
  "visited",
  "visited(26",
  "visited(_nodes",
  "visited(componentSize",
  "visited(componentsize",
  "visited(countries",
  "visited(gridSize",
  "visited(grid_rows",
  "visited(gridsize",
  "visited(m",
  "visited(n",
  "visited(n_vertices",
  "visited(nodes",
  "visited(nodesCount",
  "visited(nodescount",
  "visited(numVertices",
  "visited(numberOfPeople",
  "visited(numberofpeople",
  "visited(numbers.size",
  "visited(numvertices",
  "visited.assign(n",
  "visited.begin",
  "visited.count({a",
  "visited.empty",
  "visited.end",
  "visited.erase(it",
  "visited.erase({a",
  "visited.find(y",
  "visited.insert(i",
  "visited.insert({a",
  "visited.resize(n",
  "visitedNodes",
  "visitedNodes(nodesCount",
  "visitedNodes[MAX_NODES",
  "visitedNodes[i",
  "visitedNodes[u",
  "visitedNodes[v",
  "visited[0",
  "visited[1001][1001",
  "visited[MAXN",
  "visited[N",
  "visited[country_index",
  "visited[current",
  "visited[currentNode",
  "visited[currentVertex",
  "visited[current_node",
  "visited[current_vertex",
  "visited[current_y][current_x",
  "visited[currentnode",
  "visited[currentvertex",
  "visited[e.u",
  "visited[edge.to",
  "visited[i",
  "visited[i].empty",
  "visited[i].size",
  "visited[i][j",
  "visited[initial_y][initial_x",
  "visited[it->first",
  "visited[maxn",
  "visited[n",
  "visited[neighbor",
  "visited[neighbor].empty",
  "visited[next",
  "visited[next_y][next_x",
  "visited[node",
  "visited[nodeMap[startingNode",
  "visited[node]++",
  "visited[node].insert(connectedNode",
  "visited[node].insert(connectednode",
  "visited[node].insert(node",
  "visited[nodemap[startingnode",
  "visited[ny][nx",
  "visited[person",
  "visited[row][col",
  "visited[sink",
  "visited[start_y][start_x",
  "visited[u",
  "visited[u]++",
  "visited[v",
  "visited[x][y",
  "visited[y][x",
  "visited_2(n",
  "visited_2[sorted_nodes[i",
  "visited_in",
  "visited_in[i",
  "visited_in[neighbor",
  "visited_in[node",
  "visited_out",
  "visited_out[i",
  "visited_out[neighbor",
  "visited_out[node",
  "visitednodes",
  "visitednodes(nodescount",
  "visitednodes[i",
  "visitednodes[max_nodes",
  "visitednodes[u",
  "visitednodes[v",
  "visitsegments(const",
  "visitsegments(tree",
  "vl",
  "vl(c",
  "vl(edges_count",
  "vl(n",
  "vll",
  "vll(n",
  "vmi",
  "vmi(q",
  "vn",
  "void",
  "void()>t=",
  "void(int",
  "void(int)>dfs",
  "void(int)>dfs1=[&](int",
  "void(int)>dfs2=[&](int",
  "void(int)>dfs3=[&](int",
  "void(int)>dfs=[&](int",
  "void(int)>f=[&](int",
  "void(int)>s=[&](int",
  "void(ll",
  "void(mii",
  "void(string",
  "volume_a",
  "volume_b",
  "vote",
  "votes",
  "votes(numberOfBallots",
  "votes(numberofballots",
  "votes1",
  "votes2",
  "votes[i",
  "votes_needed",
  "vowel_only_str",
  "vowel_only_str.push_back(input_str[index++",
  "vowels",
  "vp",
  "vptd",
  "vs",
  "vs.",
  "vs.push_back(i",
  "vs.size",
  "vs[k",
  "vsi",
  "vsi(2",
  "vsi(N",
  "vsi(c",
  "vsi(k",
  "vsi(n",
  "vt",
  "vvb",
  "vvc",
  "vvi",
  "vvi(2*k",
  "vvi(k",
  "vvi(n",
  "vvi(nodes",
  "vvi(num_vertices",
  "vvii",
  "vviii",
  "vvsi",
  "w",
  "w's",
  "w(0",
  "w(2",
  "w(F",
  "w(N",
  "w(a",
  "w(b",
  "w(cos(PI",
  "w(cos(pi",
  "w(f",
  "w(i",
  "w(m",
  "w(n",
  "w(n),x",
  "w(s",
  "w(x",
  "w)=x",
  "w++",
  "w+dp[i",
  "w+x",
  "w+y",
  "w--",
  "w.",
  "w.push_back(a.substr(i",
  "w.push_back(i",
  "w.push_back(i*x",
  "w.size",
  "w.size();j++",
  "w.substr(i",
  "w/o",
  "w=-2147483648,m=0",
  "w=0",
  "w=1",
  "w[12",
  "w[b",
  "w[i",
  "w[i][0",
  "w[i][j",
  "w[j",
  "w[j]]+v[j",
  "w[j]]+v[j]<dp[i",
  "w[k",
  "w[n",
  "w[p",
  "w[u]=1",
  "w[v",
  "w[wi",
  "w\\n",
  "w]+v",
  "w][j-1",
  "w_x",
  "w_y",
  "waiting",
  "wake",
  "wakes",
  "walkable",
  "walking",
  "wall",
  "want",
  "wap",
  "war",
  "warehouse_champagne",
  "warshall",
  "was",
  "wash",
  "wash.",
  "water",
  "waterMaps",
  "waterMaps.push_back(line",
  "watermaps",
  "watermaps.push_back(line",
  "way",
  "ways",
  "we",
  "wed",
  "wednesday",
  "week",
  "weekdays",
  "weekdays[k",
  "weight",
  "weight(n",
  "weightAdded",
  "weightX",
  "weight[b",
  "weight[j",
  "weight[n",
  "weight[wi",
  "weightadded",
  "weights",
  "weights(n",
  "weights(numItems",
  "weights(numitems",
  "weights.end",
  "weights.pop_back",
  "weights[MAX_NODES",
  "weights[currentNode",
  "weights[currentnode",
  "weights[i",
  "weights[index",
  "weights[j",
  "weights[left",
  "weights[max_nodes",
  "weights[n",
  "weights[neighbor",
  "weights[p",
  "weights[right",
  "weightx",
  "well",
  "wer",
  "were",
  "west",
  "what",
  "what's",
  "what\u2019s",
  "when",
  "when's",
  "when\u2019s",
  "where",
  "where's",
  "where\u2019s",
  "whether",
  "which",
  "while",
  "while(!(k%i",
  "while(!a[1+u[e]][1+v[e]])e=(e+1)%8",
  "while(!f.empty",
  "while(!q.empty",
  "while(!t[y][x",
  "while(1",
  "while(T--",
  "while(b",
  "while(cin",
  "while(cin>>a>>b",
  "while(cin>>n",
  "while(cin>>n>>m",
  "while(cin>>s",
  "while(cin>>x>>y>>o>>s",
  "while(current->next",
  "while(g.size()<n)g.push_back(viii",
  "while(getline(cin",
  "while(head->next",
  "while(i",
  "while(in>>s",
  "while(in>>v",
  "while(in>>x",
  "while(in>>x)k++",
  "while(in>>x>>y",
  "while(in>>y",
  "while(j",
  "while(k",
  "while(k--",
  "while(n",
  "while(n--",
  "while(n>0",
  "while(node",
  "while(n||k",
  "while(p--",
  "while(q--",
  "while(r.size()>1&&r.back()==0",
  "while(s[i--]==",
  "while(t--",
  "while(true",
  "while(y>=0&&y",
  "white",
  "whitespace",
  "who",
  "who's",
  "whole",
  "wholeNumber",
  "wholenumber",
  "whose",
  "who\u2019s",
  "why",
  "why's",
  "why\u2019s",
  "wi",
  "width",
  "wild",
  "will",
  "win",
  "win\\n",
  "window",
  "windows",
  "winner",
  "winning",
  "wins",
  "wins.push_back(0",
  "wins.size",
  "wins1",
  "wins2",
  "wins[0",
  "wins[i",
  "wins[k1",
  "wins[k2]++",
  "wins\\n",
  "wis",
  "wis.",
  "with",
  "within",
  "without",
  "wly",
  "wm",
  "wn1",
  "wn2",
  "wns",
  "wo",
  "woman_count",
  "woman_count++",
  "won.\\n",
  "word",
  "word.begin",
  "word.end",
  "word.size",
  "word.substr(i",
  "word1",
  "word2",
  "wordLength",
  "wordToNumber",
  "wordToNumber.clear",
  "wordToNumber.end",
  "wordToNumber.find(number",
  "wordToNumber.find(word",
  "wordToNumber[number",
  "wordToNumber[operandsAndOperators.back",
  "wordToNumber[word",
  "wordlength",
  "words",
  "words.push_back(a.substr(start",
  "words.size",
  "words[i",
  "wordtonumber",
  "wordtonumber.clear",
  "wordtonumber.end",
  "wordtonumber.find(number",
  "wordtonumber.find(word",
  "wordtonumber[number",
  "wordtonumber[operandsandoperators.back",
  "wordtonumber[word",
  "wordtonumbermap",
  "work",
  "work_on_this_day",
  "work_on_this_day][j-1",
  "workday",
  "worked",
  "working",
  "workingHours(duration",
  "workingHours[j",
  "workingHours[j-1",
  "workinghours(duration",
  "workinghours[j",
  "workinghours[j-1",
  "works",
  "world",
  "world!\\n",
  "worth",
  "would",
  "wrapping",
  "writes",
  "writing",
  "wrong",
  "wrong\\n",
  "w\u2019s",
  "x",
  "x!=-d",
  "x!=x||x[x[x]]>=-d",
  "x%4",
  "x%=dd",
  "x%d",
  "x%dd",
  "x%dddd",
  "x%x",
  "x%x\\x\",x",
  "x&&!(x[x]&x))x++",
  "x&&!x[x][x",
  "x&&!x[x][x]&&(x[x][x]=='*'||x[x][x]=='X",
  "x&&!x[x][x]&&(x[x][x]=='*'||x[x][x]=='x",
  "x&&!x[x][x]&&(x[x][x]==x[x][x",
  "x&&!x[x][x]&&x[x][x]=='X",
  "x&&!x[x][x]&&x[x][x]=='x",
  "x&&!x[x][x]&&x[x][x]==x[x][x",
  "x&&x",
  "x&&x<=x)xx=d",
  "x&&x>=d&&x",
  "x&&x[x",
  "x&-x",
  "x'",
  "x']++",
  "x'][xxxx",
  "x'x",
  "x'xx",
  "x'xxxx",
  "x(0",
  "x(1",
  "x(20",
  "x(5",
  "x(6",
  "x(M",
  "x(W",
  "x(X",
  "x(X+d",
  "x(X+d,-d",
  "x(XXX_X",
  "x(a",
  "x(b",
  "x(c",
  "x(d",
  "x(d*x",
  "x(d*x+d),x(d*x+d",
  "x(d,d",
  "x(d,d,d",
  "x(d,xx(d",
  "x(d,xx(d)),x(d,xx(d",
  "x(dd",
  "x(ddd",
  "x(ddd),x(ddd",
  "x(ddd,-d",
  "x(dddd",
  "x(i",
  "x(j",
  "x(l",
  "x(m",
  "x(n",
  "x(r",
  "x(s",
  "x(u",
  "x(v",
  "x(w",
  "x(x",
  "x(x),x",
  "x(x),x(ddd,-d",
  "x(x),x(x",
  "x(x),x(x),x",
  "x(x),x(x),x(x",
  "x(x),x(x),x(x),x",
  "x(x),x(x),x(x),x(x),x(x,-d",
  "x(x*dd",
  "x(x+(x==d),(x+d)%d,x",
  "x(x+(x==d),(x+d)%d,x+d",
  "x(x+d",
  "x(x+d),x(x+d,d",
  "x(x+d,-d",
  "x(x+d,x",
  "x(x+d,x+x[x",
  "x(x+d,xxxx",
  "x(x+x+d",
  "x(x,-dddd),x(x",
  "x(x,d",
  "x(x,d),x(x,d",
  "x(x.xxxx",
  "x(x1",
  "x(x[x",
  "x(xd",
  "x(xx",
  "x(xx),x(xx",
  "x(xxx",
  "x(xxx(XX",
  "x(xxx(xx",
  "x(xxx_x",
  "x(xxxx",
  "x(xxxxXxXxxxx",
  "x(xxxxXxxx",
  "x(xxxx_xx_xxxx",
  "x(xxxx_xxxx",
  "x(y",
  "x(z",
  "x({d",
  "x)%x",
  "x)%x)%x",
  "x)%x*x%x)%x",
  "x)),x(x",
  "x)*(d",
  "x)*(x",
  "x)*(y",
  "x)*x[x",
  "x)*xxx[X%x]%X",
  "x)*xxx[x%x]%x",
  "x)+d",
  "x)+t",
  "x)+x",
  "x)+xxxx(X",
  "x)+xxxx(x",
  "x),x",
  "x),x[x][x",
  "x),xxx(x",
  "x)->XxxXxxxx",
  "x)->xx",
  "x)->xxxx",
  "x)/d",
  "x)<r+t&&fabs(y",
  "x)<x+x&&xxxx(x",
  "x)==d",
  "x)=x",
  "x)=x.xxx",
  "x)=x.xxxx",
  "x)=x[x",
  "x)=x[x+d",
  "x)=z[i",
  "x)X",
  "x)][u",
  "x)][x",
  "x)cout",
  "x)p.push_back(r[i",
  "x)x",
  "x)x+=(!x",
  "x)x+=x",
  "x)x+=x.xxxx",
  "x)x.xxxx_xxxx(x[x",
  "x)x[x-'d']++",
  "x)x[x]=d",
  "x)xx(!x)x=d",
  "x)xxxx",
  "x)xxxx(x[x],x[x",
  "x)xxxx<<\"XXXX\\x",
  "x)xxxx<<\"xxxx\\x",
  "x)xxxx<<x",
  "x)xxxx<<x+d",
  "x)xxxx<<x<<\"\\x",
  "x)xxxx<<xx[x]<<xxxx",
  "x)xxxx<<xxxx(x-d",
  "x*(d-1)%M",
  "x*(d-1)%m",
  "x*(x",
  "x*(x-d",
  "x*(x-d)%X",
  "x*(x-d)%x",
  "x*2",
  "x*=dddd",
  "x*d",
  "x*d%x",
  "x*d;x<=x;x+=x",
  "x*p.x",
  "x*p.y",
  "x*x",
  "x*x%X",
  "x*x%x",
  "x*x)%X",
  "x*x)%x",
  "x*x.x",
  "x*x[x",
  "x*x[x]%x*xxxx[x]%x*xxxx[x",
  "x*xxxx(x",
  "x*y%M",
  "x*y%m",
  "x++",
  "x++dd",
  "x+1",
  "x+1)/2",
  "x+1,k",
  "x+10",
  "x+1]=l",
  "x+4",
  "x+=",
  "x+=(X[x]-d)*(X[x]-d",
  "x+=(x[x]-d)*(x[x]-d",
  "x+=B",
  "x+=X",
  "x+=__xxx(x",
  "x+=b",
  "x+=get<1>(q.top",
  "x+=x",
  "x+=x!=x",
  "x+=x.xxx();x.xxx",
  "x+=x/d",
  "x+=x==x",
  "x+=x[x",
  "x+=xxx(x",
  "x+=xxx<d>(x.xxx",
  "x+=xxxx(x)==xxxx(d",
  "x+=xxxx[x[x]-d].xxxx",
  "x+c[i",
  "x+c[l",
  "x+d",
  "x+d)/d",
  "x+d,x",
  "x+d;x",
  "x+d<<\"\\x",
  "x+d],x",
  "x+d]=x",
  "x+d][x",
  "x+dd",
  "x+dx",
  "x+j[l",
  "x+x",
  "x+x)%X",
  "x+x)%x",
  "x+x)/d",
  "x+x*x",
  "x+x+d",
  "x+x-d",
  "x+x.x",
  "x+x;x++)xxxx<<x[x",
  "x+x[x",
  "x+x[x],x",
  "x+xx[x",
  "x+xxxx(x-d,x-d,x)*xxxx(x",
  "x+xxxx_xxxx",
  "x+y",
  "x+y)/2",
  "x,++x",
  "x,0,NONE",
  "x,0,none",
  "x,1",
  "x,d",
  "x,d,XXXX",
  "x,d,xxxx",
  "x-",
  "x-%x-%x",
  "x-(x",
  "x--",
  "x--;l--",
  "x--;x--",
  "x--;x--;x--;x--",
  "x-1",
  "x-1,k",
  "x-10",
  "x-1th",
  "x-2*a)*(y-2*a)*a",
  "x-2*b)*(y-2*b)*b",
  "x-=x*d",
  "x-=x*dd",
  "x-=x[x",
  "x->x",
  "x->xxx",
  "x->xxxx",
  "x->xxxx->xxxx",
  "x-d",
  "x-d&&!x[x+d][x+d]&&x[x+d][x+d]=='X')xxx(x+d,x+d,x",
  "x-d&&!x[x+d][x+d]&&x[x+d][x+d]=='d')xxx(x+d,x+d",
  "x-d&&!x[x+d][x+d]&&x[x+d][x+d]=='x')xxx(x+d,x+d",
  "x-d&&!x[x+d][x+d]&&x[x+d][x+d]=='x')xxx(x+d,x+d,x",
  "x-d&&!x[x+d][x]&&x[x+d][x]=='X')xxx(x+d,x",
  "x-d&&!x[x+d][x]&&x[x+d][x]=='d')xxx(x+d,x",
  "x-d&&!x[x+d][x]&&x[x+d][x]=='x')xxx(x+d,x",
  "x-d&&!x[x-d][x+d]&&x[x-d][x+d]=='X')xxx(x-d,x+d,x",
  "x-d&&!x[x-d][x+d]&&x[x-d][x+d]=='d')xxx(x-d,x+d",
  "x-d&&!x[x-d][x+d]&&x[x-d][x+d]=='x')xxx(x-d,x+d,x",
  "x-d&&!x[x][x+d]&&x[x][x+d]=='X')xxx(x",
  "x-d&&!x[x][x+d]&&x[x][x+d]=='d')xxx(x",
  "x-d&&!x[x][x+d]&&x[x][x+d]=='x')xxx(x",
  "x-d&&x",
  "x-d&&x+x[x]<=ddd;x++",
  "x-d&&x>d&&!x[x+d][x-d]&&x[x+d][x-d]=='X')xxx(x+d,x-d,x",
  "x-d&&x>d&&!x[x+d][x-d]&&x[x+d][x-d]=='d')xxx(x+d,x-d",
  "x-d&&x>d&&!x[x+d][x-d]&&x[x+d][x-d]=='x')xxx(x+d,x-d,x",
  "x-d&&x>d&&x[x+d][x-d])x.xxxx_xxxx(xxxx_xxxx(x[x+d][x-d],x[x][x",
  "x-d&&x[x+d][x+d])x.xxxx_xxxx(xxxx_xxxx(x[x+d][x+d],x[x][x",
  "x-d&&x[x+d][x])x.xxxx_xxxx(xxxx_xxxx(x[x+d][x],x[x][x",
  "x-d&&x[x-d][x+d])x.xxxx_xxxx(xxxx_xxxx(x[x-d][x+d],x[x][x",
  "x-d&&x[x][x+d])x.xxxx_xxxx(xxxx_xxxx(x[x][x+d],x[x][x",
  "x-d)%x",
  "x-d)*(x",
  "x-d)*xxxXxxx",
  "x-d)*xxxx",
  "x-d)X",
  "x-d)x",
  "x-d)x+=!x[x+d][x",
  "x-d)x+=!x[x][x+d",
  "x-d*x)*(x-d*x)*x",
  "x-d,x",
  "x-d,x-d",
  "x-d,x=d",
  "x-d;x++",
  "x-d;x>=d;x--",
  "x-d<<xxxx",
  "x-d]==x[x+x",
  "x-d]=xd[x",
  "x-dd",
  "x-dxx",
  "x.",
  "x.X",
  "x.count(i",
  "x.d",
  "x.empty",
  "x.end",
  "x.erase(i",
  "x.erase(k",
  "x.first",
  "x.insert(i",
  "x.insert(k",
  "x.pop",
  "x.push(a",
  "x.push(v[j",
  "x.push_back(m[c]-1",
  "x.push_back(u",
  "x.second",
  "x.size",
  "x.size()>t.size",
  "x.top",
  "x.x",
  "x.x.",
  "x.x_xxx",
  "x.xd",
  "x.xx",
  "x.xxx",
  "x.xxx().xxxx",
  "x.xxx();x.xxx",
  "x.xxx_xxxx",
  "x.xxx_xxxx(X",
  "x.xxx_xxxx(x",
  "x.xxxx",
  "x.xxxx((x",
  "x.xxxx()&&x>=d&&x",
  "x.xxxx()-d",
  "x.xxxx()-d&&x>=d&&x",
  "x.xxxx()-d)x",
  "x.xxxx()-d;x++",
  "x.xxxx().xxx<d",
  "x.xxxx().xxxx",
  "x.xxxx().xxxx_xxxx(x",
  "x.xxxx();x++",
  "x.xxxx();x++)x[x]=x[x]-'d",
  "x.xxxx();x++)xxxx<<x[x",
  "x.xxxx();x+=d)x[x[x]-'X']=d",
  "x.xxxx();x+=d)x[x[x]-'x']=d",
  "x.xxxx();xx!=x.xxx();xx++",
  "x.xxxx()>d",
  "x.xxxx()>x.xxxx",
  "x.xxxx()[x",
  "x.xxxx(-(x",
  "x.xxxx(-(x+d",
  "x.xxxx(-x[x",
  "x.xxxx(-xxx<d>(x[x++",
  "x.xxxx(X",
  "x.xxxx(d",
  "x.xxxx(d,d",
  "x.xxxx(x",
  "x.xxxx(x)->xxxx",
  "x.xxxx(x)?x[x]:x[x]=x++",
  "x.xxxx(x.xxxx",
  "x.xxxx(x.xxxx(*x",
  "x.xxxx(x.xxxx_xx_xxxx(x.xxxx_xx_xxx(x[x",
  "x.xxxx(x[x",
  "x.xxxx(x[x++",
  "x.xxxx(xd",
  "x.xxxx(xx",
  "x.xxxx(xx->xxxx",
  "x.xxxx(xx.xxxx",
  "x.xxxx(xxx",
  "x.xxxx(xxx(x",
  "x.xxxx(xxxx",
  "x.xxxx(xxxx(dd",
  "x.xxxx(xxxx(x",
  "x.xxxx(xxxxXxxxx",
  "x.xxxx(xxxx[d",
  "x.xxxx(xxxx_xxxx((x[x",
  "x.xxxx(xxxx_xxxx(d",
  "x.xxxx(xxxx_xxxx(x",
  "x.xxxx(xxxx_xxxx(xx",
  "x.xxxx(xxxx_xxxx(xxx",
  "x.xxxx(xxxx_xxxx(xxx_xxxx",
  "x.xxxx(xxxx_xxxx(xxx_xxxx(xxxx_xxxx",
  "x.xxxx(xxxx_xxxx(xxxx",
  "x.xxxx(xxxx_xxxx(xxxxXxxx",
  "x.xxxx(xxxx_xxxx(xxxx_xxxx(x",
  "x.xxxx({-x",
  "x.xxxx({-x[x",
  "x.xxxx({-xd",
  "x.xxxx({-xxxx[X][x",
  "x.xxxx({-xxxx[x][x",
  "x.xxxx({d",
  "x.xxxx({d,d",
  "x.xxxx({d,d,-d",
  "x.xxxx({d,d,x",
  "x.xxxx({d.d",
  "x.xxxx({x",
  "x.xxxx({x+dddd,-d",
  "x.xxxx({x+x",
  "x.xxxx({x,d",
  "x.xxxx({x,d,x",
  "x.xxxx({x[x",
  "x.xxxx({x[x],d,x",
  "x.xxxx({x[x],x",
  "x.xxxx({x[x],x*(d+xxxx()%d),x",
  "x.xxxx({x[x],xxxx()*dd,x",
  "x.xxxx({xd",
  "x.xxxx({xd,xd",
  "x.xxxx({xx",
  "x.xxxx({xx->xxxx",
  "x.xxxx({xxx",
  "x.xxxx({xxxXxxx",
  "x.xxxx({xxxx",
  "x.xxxx({xxxx(x",
  "x.xxxx({xxxx(x[x",
  "x.xxxx({xxxx(xxx",
  "x.xxxx({xxxx->xxxx",
  "x.xxxx({xxxxXxx(x",
  "x.xxxx({xxxx[d][x",
  "x.xxxx({xxxx[xxxx",
  "x.xxxx({xxxx[xxxxXxxx",
  "x.xxxx({xxxx_x",
  "x.xxxx({xxxx_xxxx",
  "x.xxxx({{xd",
  "x.xxxx_xx_xxx(x",
  "x.xxxx_xx_xxxx((x",
  "x.xxxx_xx_xxxx(x",
  "x.xxxx_xx_xxxx(x.xxxx",
  "x.xxxx_xxxx",
  "x.xxxx_xxxx('X",
  "x.xxxx_xxxx('d",
  "x.xxxx_xxxx('x",
  "x.xxxx_xxxx(*x",
  "x.xxxx_xxxx(-xxx(x",
  "x.xxxx_xxxx(X",
  "x.xxxx_xxxx(d",
  "x.xxxx_xxxx(x",
  "x.xxxx_xxxx(x%dd",
  "x.xxxx_xxxx(x*x",
  "x.xxxx_xxxx(x+d",
  "x.xxxx_xxxx(x-d",
  "x.xxxx_xxxx(x.xxx",
  "x.xxxx_xxxx(x.xxxx(x",
  "x.xxxx_xxxx(x[x",
  "x.xxxx_xxxx(x[x++",
  "x.xxxx_xxxx(x[x-d",
  "x.xxxx_xxxx(x[x]-d",
  "x.xxxx_xxxx(x[x]/x[x",
  "x.xxxx_xxxx(xx",
  "x.xxxx_xxxx(xx(dd",
  "x.xxxx_xxxx(xx(x",
  "x.xxxx_xxxx(xx->xxxx",
  "x.xxxx_xxxx(xxx(x",
  "x.xxxx_xxxx(xxx(x[x",
  "x.xxxx_xxxx(xxxx",
  "x.xxxx_xxxx(xxxx(x[x",
  "x.xxxx_xxxx(xxxx(x[x]-x[x]),x",
  "x.xxxx_xxxx(xxxx[x",
  "x.xxxx_xxxx(xxxx_xxxx(--x",
  "x.xxxx_xxxx(xxxx_xxxx(x",
  "x.xxxx_xxxx(xxxx_xxxx(x[x",
  "x.xxxx_xxxx(xxxx_xxxx(xxxx[x",
  "x.xxxx_xxxx({-x[x",
  "x.xxxx_xxxx({-x[x],x",
  "x.xxxx_xxxx({x",
  "x.xxxx_xxxx({x+x",
  "x.xxxx_xxxx({x[x",
  "x.xxxx_xxxx({xx[x][x",
  "x/%x/%x",
  "x/(x-d",
  "x/2",
  "x/=2",
  "x/=d",
  "x/=dd",
  "x/=x",
  "x/=x;x/=x",
  "x/d",
  "x/dd",
  "x/dddd",
  "x/x",
  "x0",
  "x1",
  "x1++",
  "x1,y1,x2,y2",
  "x2",
  "x2++",
  "x3",
  "x3++",
  "x4",
  "x:%x",
  "x:%x:%x",
  "x:%x:%x\\x",
  "x:%x\\x",
  "x;;x++",
  "x;X++",
  "x;x",
  "x;x*=d,x++",
  "x;x++",
  "x;x++)X",
  "x;x++)x",
  "x;x++)x+=x[x",
  "x;x++)x+=x[x]+x[x",
  "x;x++)x+=xxx(x[x],x",
  "x;x++)x[x[x]]+=x[x",
  "x;x++)x[x]=x",
  "x;x++)x[x]=x[x-d",
  "x;x++)x[x]=x[x].xxxx",
  "x;x++)x^=x[x",
  "x;x++)xx(x[x]+x[x-d]>x)xxxx",
  "x;x++)xxx(d,x",
  "x;x++)xxx(x",
  "x;x++)xxx(x,d",
  "x;x++)xxx(x-d,x",
  "x;x++)xxx>>x[x",
  "x;x++)xxxx",
  "x;x++)xxxx<<\"+---",
  "x;x++)xxxx<<\"d",
  "x;x++)xxxx<<x[x",
  "x;x++)xxxx<<xxx<d>(x[x][x",
  "x;x+=x",
  "x;x--",
  "x;x<=X;x++",
  "x;x<=d*x;x++)x[x+d]+=x[x",
  "x;x<=x;x++",
  "x;xxxx(xxx",
  "x<0",
  "x<<\".\\x",
  "x<<\":\\x",
  "x<<\"\\n",
  "x<<\"\\x",
  "x<<=d",
  "x<<xxxx",
  "x<<xxxx(x[x",
  "x<=x+x",
  "x<d",
  "x=",
  "x=\"X",
  "x=\"x",
  "x='X",
  "x='X';x<='X';x++",
  "x='x",
  "x='x';x<='x';x++",
  "x=(x",
  "x=(x*dd)+x-'d",
  "x=(x+dd)%dd",
  "x=(x-d)%d",
  "x=(x[d]-'d')*dd+x[d]-'d",
  "x=(x[d]<='X')*dd",
  "x=(x[d]<='x')*dd",
  "x=-dddd,x=d",
  "x=0",
  "x=0,y=0",
  "x==d?d",
  "x==x",
  "x==xxxx[x-d",
  "x=__xxx(x",
  "x=d",
  "x=d*x",
  "x=d*x;x",
  "x=d*x;x>d;x--",
  "x=d,x",
  "x=d,x=d",
  "x=d,x=d,x",
  "x=d,x=d,x=-d;x",
  "x=d,x=d,x=d",
  "x=d,x=d,x=d,x",
  "x=d,x=d;x",
  "x=d,x=d;x<=x;x++",
  "x=d;(x+d)*(x+d)-x*x<=x;x++",
  "x=d;;x++",
  "x=d;x",
  "x=d;x*x<=x;x++",
  "x=d;x<=(x-d)%x;x++)xxx>>x",
  "x=d;x<=X;x++",
  "x=d;x<=x;x++",
  "x=d;x<=x;x++)x[x]=x",
  "x=d;x<d;x++",
  "x=d;x<d;x++)xxx>>x[x",
  "x=d;x<dd;x++",
  "x=d;x<ddd;x++",
  "x=d;x=d",
  "x=d;xxx>>x;x++",
  "x=dXX<<dd,x=d;x>d;x/=d",
  "x=dd",
  "x=ddd",
  "x=dddd",
  "x=dddd,x=dddd,x=dddd",
  "x=dxx<<dd,x=d;x>d;x/=d",
  "x>(xxxx",
  "x>=",
  "x>=x&&x+x",
  "x>=x+d&&x+x",
  "x>>d)*(xxx-d",
  "x>>d)-d",
  "x>d",
  "x?d",
  "xCoordinates",
  "xCoordinates(x",
  "xCoordinates.end",
  "xCoordinates[i",
  "xD",
  "xDD",
  "xPosition",
  "xX",
  "xX(-x",
  "xX(x",
  "xX++",
  "xXX",
  "xXx",
  "xXx++",
  "xXxx",
  "xXxxxx",
  "xXxxxx(x",
  "xXxxxx++",
  "xXxxxx--",
  "xXxxxx.xxx",
  "xXxxxx[x",
  "x[(d",
  "x[(n",
  "x[(x",
  "x[(x+d)/d",
  "x[(xxxx",
  "x[*x",
  "x[*x.xxxx_xx_xxxx(x",
  "x[++x",
  "x[--x",
  "x[--x]--",
  "x[0",
  "x[0][j",
  "x[1",
  "x[10",
  "x[1001][1001",
  "x[101",
  "x[12",
  "x[2",
  "x[20",
  "x[3",
  "x[3][j",
  "x[4",
  "x[4][4",
  "x[5",
  "x[6",
  "x[7",
  "x[8",
  "x[9",
  "x[N",
  "x[X",
  "x[X+d",
  "x[X+d][X+d",
  "x[X+x].xxx",
  "x[XXX_X][d",
  "x[X],xxx[X],xxxx[X",
  "x[X][X",
  "x[X][d",
  "x[]={-1,0,1,0",
  "x[]={-d,-d,-d,-d,d,d,d,d",
  "x[]={-d,-d,d,d,d,d,d,-d",
  "x[]={-d,d,-d,d,-d,d,-d,d",
  "x[]={-d,d,d,d",
  "x[]={0,-1,1,0",
  "x[]={d,-d,-d,-d,d,d,d,d",
  "x[]={d,-d,d,d",
  "x[]={d,d,d,-d",
  "x[_x.xx][_x.xxx",
  "x[a",
  "x[a][b",
  "x[b",
  "x[current",
  "x[currentIndex",
  "x[currentindex",
  "x[d",
  "x[d*X",
  "x[d*X],x[d*X",
  "x[d*x",
  "x[d*x+d].xd",
  "x[d*x+d].xxx",
  "x[d*x+d][x",
  "x[d*x],x[d*x",
  "x[d*x].xd",
  "x[d*x].xxx",
  "x[d*x][x",
  "x[d]++",
  "x[d]+=x",
  "x[d]-'X",
  "x[d]-'X'+d",
  "x[d]-'X',x",
  "x[d]-'d",
  "x[d]-'x",
  "x[d]-'x'+d",
  "x[d]-'x',x",
  "x[d]-'x';x",
  "x[d]-=x",
  "x[d].xxx_xxx",
  "x[d].xxxx",
  "x[d].xxxx_xxxx(d",
  "x[d].xxxx_xxxx(x",
  "x[d]=-d",
  "x[d]=d",
  "x[d]=x[d]=xxxx",
  "x[d][d",
  "x[d][x",
  "x[d][x[d].xxxx",
  "x[d][x[x[x]][d",
  "x[d][x]++",
  "x[d][x]--",
  "x[d][xd",
  "x[d][xx",
  "x[d]]++",
  "x[dd",
  "x[ddd",
  "x[ddd][dd",
  "x[ddd][ddd",
  "x[ddd][dddd",
  "x[dddd",
  "x[dddd][dddd",
  "x[i",
  "x[i+k][j",
  "x[i+k][t",
  "x[i]--",
  "x[i].first",
  "x[i].second",
  "x[i][0",
  "x[i][3",
  "x[i][i",
  "x[i][j",
  "x[i][j]=(c=='1",
  "x[i][k",
  "x[i][n",
  "x[i][t",
  "x[i]]++",
  "x[j",
  "x[j][l",
  "x[k",
  "x[k][j",
  "x[l",
  "x[n",
  "x[n+1],y[n+1",
  "x[ni[i",
  "x[o",
  "x[r",
  "x[r]=k++",
  "x[s",
  "x[u",
  "x[w]-1",
  "x[x",
  "x[x*d",
  "x[x*d+x",
  "x[x*d].xxx",
  "x[x*d][x",
  "x[x++",
  "x[x+d",
  "x[x+d],x[x+d",
  "x[x+d][x",
  "x[x+d][x+d",
  "x[x+d][x-d",
  "x[x+x",
  "x[x+x+d]>x[x+x+d])x",
  "x[x+x+x]-(x?x[x-d]*x[x+x+d]:d))%X",
  "x[x+x+x]-(x?x[x-d]*x[x+x+d]:d))%x",
  "x[x+x+x]-x[x-d]*x[x+x+d])%X",
  "x[x+x+x]-x[x-d]*x[x+x+d])%x",
  "x[x+x-d",
  "x[x+x].xxx",
  "x[x+x]=x[x",
  "x[x+x]=xd[x",
  "x[x+x][x",
  "x[x+x][x+x",
  "x[x-'X']++",
  "x[x-'x']++",
  "x[x--",
  "x[x->xxxx",
  "x[x-d",
  "x[x-d]),x(xx",
  "x[x-d]*(x+d",
  "x[x-d]*(x-d",
  "x[x-d]*X)%X",
  "x[x-d]*X+x[x])%X",
  "x[x-d]*d%X",
  "x[x-d]*d%x",
  "x[x-d]*d)%X",
  "x[x-d]*d)%x",
  "x[x-d]*x)%x",
  "x[x-d]*x+x[x])%x",
  "x[x-d]++",
  "x[x-d]+d",
  "x[x-d]+x",
  "x[x-d]-'x",
  "x[x-d].xxx",
  "x[x-d].xxxx",
  "x[x-d]=x[xx-&x[d]]+d",
  "x[x-d][x",
  "x[x-d][x+x/d",
  "x[x-d][x[x-d][x",
  "x[x.x",
  "x[x.xxx",
  "x[x.xxxx",
  "x[x.xxxx][x.xxxx",
  "x[x/d",
  "x[x:d*x+d",
  "x[x[d",
  "x[x[d]],x",
  "x[x[x",
  "x[x[x[x]]].xxxx_xxxx(x[x[x",
  "x[x[x]+x",
  "x[x[x]-d",
  "x[x[x]-d])%X",
  "x[x[x]-d])%x",
  "x[x[x]-d].xxxx_xxxx(x[x]-d,x",
  "x[x[x]-d].xxxx_xxxx({x",
  "x[x[x]-d]=x",
  "x[x[x][d]][x[x][d",
  "x[x[x][d]][x[x][d]]=d",
  "x[x[x][x]-d",
  "x[x[x][x]-d]++",
  "x[x[x][x]]++",
  "x[x[x][x]]=d",
  "x[x[x]]++",
  "x[x[x]]+d",
  "x[x[x]]--",
  "x[x[x]].xxxx",
  "x[x[x]].xxxx_xxxx(x",
  "x[x[x]].xxxx_xxxx(x[x",
  "x[x[x]]=d",
  "x[x[x]]=x",
  "x[x[x]]=x[x[x]]=x",
  "x[x[x]][d",
  "x[x[x]][x",
  "x[x[x]][x++",
  "x[x[x]][x--",
  "x[x[x]][x]--",
  "x[x[x]][xx[x",
  "x[x]%d",
  "x[x]%xxxx[x",
  "x[x]&&!x[x",
  "x[x]&&x[x++])x.xxxx_xxxx(x",
  "x[x])x+=x[x",
  "x[x])x[x]++",
  "x[x])x[x]--",
  "x[x])x[x].xxxx(x",
  "x[x])x^=x",
  "x[x])xxx(x",
  "x[x]*x",
  "x[x]*x[x",
  "x[x]*xd",
  "x[x]*xxxx(x+x",
  "x[x]++",
  "x[x]+=x.xxxx",
  "x[x]+=x[x",
  "x[x]+d,x[x]*d",
  "x[x]+x",
  "x[x]+x[x",
  "x[x]+xxxx",
  "x[x],&x",
  "x[x],x",
  "x[x],x=d",
  "x[x],x[x]*d))<<xxxx",
  "x[x],xxx[x],xxxx[x",
  "x[x]-'d",
  "x[x]--",
  "x[x]-d",
  "x[x]-d)%X",
  "x[x]-d)%x",
  "x[x]-d,x",
  "x[x]-x[x",
  "x[x]-x[x+x-d]+d",
  "x[x]-x[x[x]-d])%X",
  "x[x]-x[x[x]-d])%x",
  "x[x]-x[x]+d",
  "x[x].xd",
  "x[x].xd++",
  "x[x].xx",
  "x[x].xxx",
  "x[x].xxx_xxxx",
  "x[x].xxxx",
  "x[x].xxxx()&&x[x][x]==",
  "x[x].xxxx(),x",
  "x[x].xxxx();x++",
  "x[x].xxxx(X",
  "x[x].xxxx(d",
  "x[x].xxxx(x",
  "x[x].xxxx(x[x].xxxx",
  "x[x].xxxx(xxx(d",
  "x[x].xxxx(xxx(d,xxx(X",
  "x[x].xxxx(xxx(d,xxx(x",
  "x[x].xxxx.xxxx_xxxx(x",
  "x[x].xxxx.xxxx_xxxx(xxxx_xxxx(x",
  "x[x].xxxx[x",
  "x[x].xxxx_xx_xxx(x",
  "x[x].xxxx_xxxx(d",
  "x[x].xxxx_xxxx(x",
  "x[x].xxxx_xxxx(x[x",
  "x[x].xxxx_xxxx(xxxx_x",
  "x[x].xxxx_xxxx(xxxx_xxxx(x",
  "x[x].xxxx_xxxx({x",
  "x[x].xxxx_xxxx({xxx[x",
  "x[x];x",
  "x[x];x++",
  "x[x]<x[x",
  "x[x]=(x[x]-x.xxxx())/d+x.xxxx",
  "x[x]=(x[x]-x[x]*xxxx(xx+xx",
  "x[x]=-(x+d",
  "x[x]=-d",
  "x[x]==x",
  "x[x]==x[x",
  "x[x]==xxxx[x",
  "x[x]=d",
  "x[x]=x",
  "x[x]=x++",
  "x[x]=x+d",
  "x[x]=x--",
  "x[x]=x;x[x]=x",
  "x[x]=x[x",
  "x[x]=x[x-d]*x%X",
  "x[x]=x[x-d]*x%x",
  "x[x]=x[x]+d",
  "x[x]=x[x]=d",
  "x[x]=x[x]=x",
  "x[x]=xx(x",
  "x[x]=xxx(x[x],d+x[x",
  "x[x]=xxx(x[x],x[x",
  "x[x]=xxx(x[x],x[x]-d",
  "x[x]=xxxx",
  "x[x]=xxxx(x+x-d,x-d,X",
  "x[x]=xxxx(x+x-d,x-d,x",
  "x[x]=xxxx(x[x",
  "x[x]=xxxx_xxxx(x",
  "x[x]=xxxx_xxxx(x[x]-d,x[x]-d",
  "x[x]={x",
  "x[x]={x[x],x[x",
  "x[x]={{x",
  "x[x]>d",
  "x[x]>x)xxxx",
  "x[x]>x[x",
  "x[x][X",
  "x[x][__xxxx_xxxx(x",
  "x[x][d",
  "x[x][d*x",
  "x[x][d*x+d",
  "x[x][dd]++",
  "x[x][x",
  "x[x][x*d",
  "x[x][x*d])/d",
  "x[x][x++",
  "x[x][x+d",
  "x[x][x+x",
  "x[x][x-'x",
  "x[x][x-'x']=x++",
  "x[x][x--",
  "x[x][x-d",
  "x[x][x.xxx].xxx",
  "x[x][x[x",
  "x[x][x[x].xxxx",
  "x[x][x[x][x",
  "x[x][x[x]]++",
  "x[x][x]*xxx",
  "x[x][x]++",
  "x[x][x]+d",
  "x[x][x]+x[x][x]*x[x][x]%X)%X",
  "x[x][x]+x[x][x]*x[x][x]%x)%x",
  "x[x][x]--",
  "x[x][x].xxxx",
  "x[x][x].xxxx(x",
  "x[x][x]=",
  "x[x][x]=(x=='d",
  "x[x][x]=++x",
  "x[x][x]=-d",
  "x[x][x]=d",
  "x[x][x]=x",
  "x[x][x]=x+d",
  "x[x][x]=x-d",
  "x[x][x]=x[x][x]+d",
  "x[x][x]=x[x][x]==",
  "x[x][x]=xxxx",
  "x[x][xd",
  "x[x][xx",
  "x[x][xx-d",
  "x[x][xx[x",
  "x[x][xxx(xd",
  "x[x][xxx(xx",
  "x[x][xxxx",
  "x[x][xxxxXxxx",
  "x[x][xxxx[X][x",
  "x[x][xxxx[x][x",
  "x[x][xxxx_x",
  "x[x]]++",
  "x[x]]+x[x",
  "x[x]]+x[x]<xx[x",
  "x[x]][d",
  "x[x_xxxx",
  "x[xd",
  "x[xd],x",
  "x[xd]=x",
  "x[xd]=x[xd]=x",
  "x[xd][xd",
  "x[xx",
  "x[xx->xxxx",
  "x[xx[d",
  "x[xx[x",
  "x[xx[x][d",
  "x[xx[x]]=(x[xx[x]]+x[x])%X",
  "x[xx[x]]=(x[xx[x]]+x[x])%x",
  "x[xx[x]]=xxx(x[xx[x]],d+x[x",
  "x[xx[x]][x",
  "x[xx[x]][xx[x",
  "x[xx[x]][xx[x]].xxx",
  "x[xx].xxxx(xx",
  "x[xx].xxxx_xxxx(_xxxx{xxxx",
  "x[xx][xx",
  "x[xxx",
  "x[xxx(d",
  "x[xxx(d,x[x]-dxdd)].xxxx_xxxx(x",
  "x[xxx[x].xxxx][xxx[x].xxxx",
  "x[xxx[x]][xxx[x",
  "x[xxx_x][d",
  "x[xxx_x][xxx_x",
  "x[xxx_xxxx",
  "x[xxxx",
  "x[xxxx(x",
  "x[xxxx++",
  "x[xxxx.xxx",
  "x[xxxxX].xxxx_xxxx(xxxxX",
  "x[xxxxXxxx",
  "x[xxxxXxxx[x",
  "x[xxxxXxxx][x",
  "x[xxxxXxxx][xxxxXxxx",
  "x[xxxxXxxxx",
  "x[xxxxXxxxx][xxxxXxxxx",
  "x[xxxx[X][x]][x",
  "x[xxxx[d",
  "x[xxxx[d]].xxxx",
  "x[xxxx[d]][x",
  "x[xxxx[x",
  "x[xxxx[x].x].xxxx_xxxx(x",
  "x[xxxx[x][x",
  "x[xxxx[x][x]]=x",
  "x[xxxx[x][x]][x",
  "x[xxxx[x]].xxxx",
  "x[xxxx[x]][x",
  "x[xxxx[xxxx",
  "x[xxxx]++",
  "x[xxxx].xxxx",
  "x[xxxx].xxxx_xxxx(_xxxx{xx",
  "x[xxxx].xxxx_xxxx(xxxx",
  "x[xxxx][x",
  "x[xxxx][xxxx",
  "x[xxxx_x].xxxx_xxxx(x",
  "x[xxxx_xxxx",
  "x[xxxx_xxxx-d",
  "x[{x",
  "x\\x",
  "x\\x\",X",
  "x\\x\",x",
  "x\\x\\x",
  "x\\x\\x\",x+d",
  "x]%x",
  "x]++",
  "x]+x",
  "x],x",
  "x]--",
  "x].xxxx",
  "x].xxxx_xxxx(x[x",
  "x]=",
  "x]==x[x+x",
  "x][d",
  "x][x",
  "x][x-d",
  "x][xd",
  "x^d",
  "x_X",
  "x_d",
  "x_k",
  "x_n",
  "x_x",
  "x_xx",
  "x_xxx",
  "x_xxx[x",
  "x_xxxx",
  "x_xxxx(xxxx_xx_xxxx",
  "x_xxxx++",
  "x_xxxx[x",
  "x_xxxx[xxxx",
  "xa",
  "xa)=a",
  "xb",
  "xb)=b",
  "xcoordinates",
  "xcoordinates(x",
  "xcoordinates.end",
  "xcoordinates[i",
  "xd",
  "xd(d",
  "xd(x",
  "xd(x[x",
  "xd(xd",
  "xd(xx",
  "xd(xxx",
  "xd(xxxx",
  "xd++",
  "xd,xd",
  "xd,xd,xd,xd",
  "xd.x",
  "xd.xxx",
  "xd.xxx_xxxx",
  "xd.xxxx",
  "xd.xxxx(xxx",
  "xd.xxxx.xxxx_xxxx(d",
  "xd.xxxx_xxxx",
  "xd.xxxx_xxxx(x",
  "xd.xxxx_xxxx_xx_xxxx",
  "xd={xd",
  "xd={xd,xd},xd={xd,xd",
  "xd[(x",
  "xd[d",
  "xd[dddd",
  "xd[x",
  "xd[x].xxxx_xxxx(x",
  "xd[x][x",
  "xd[xxxx].xxxx_xxxx(x",
  "xd[xxxx][xxxx",
  "xdd",
  "xdx",
  "xdx(xd",
  "xdx(xxx",
  "xdx.xxxx_xxxx(x",
  "xdx[x",
  "xdx[xd",
  "xdx](xx",
  "xed",
  "xes",
  "xi",
  "xis",
  "xit",
  "xj",
  "xor",
  "xposition",
  "xpr",
  "xs",
  "xs(x",
  "xs.begin",
  "xs.empty",
  "xs.end",
  "xs.erase(it",
  "xs.erase(x",
  "xs.insert(p",
  "xs.insert(x",
  "xs.push_back(1",
  "xs.push_back(i",
  "xs.size",
  "xs[0",
  "xs[1",
  "xs[120",
  "xs[2",
  "xs[3",
  "xs[4",
  "xs[5",
  "xs[N",
  "xs[i",
  "xs[j",
  "xs[k",
  "xs[n",
  "xs[u",
  "xsc",
  "xx",
  "xx\"[x]<<\"\\x",
  "xx'",
  "xx'x",
  "xx'xx",
  "xx(!(x%x))x++",
  "xx(!x",
  "xx(!x&&x)x+=x",
  "xx(!x)X",
  "xx(!x)x",
  "xx(!x)xxxx",
  "xx(!x)xxxx<<\"XX\\x",
  "xx(!x)xxxx<<\"xx",
  "xx(!x)xxxx<<\"xx\\x",
  "xx(!x.xxxx(x))x[x]=x++",
  "xx(!x.xxxx({x",
  "xx(!x[x",
  "xx(!x[x[d",
  "xx(!x[x[x",
  "xx(!x[x]&&!x[x])x(x",
  "xx(!x[x])x.xxxx({x",
  "xx(!x[x])x.xxxx({x[x],x",
  "xx(!x[x])x.xxxx({x[x],x[x].xxxx(),x",
  "xx(!x[x])x.xxxx_xxxx(x",
  "xx(!x[x])x[x]=++x",
  "xx(!x[x])xxx(x",
  "xx(!x[x])xxxd(x",
  "xx(!x[x][d]&&x[x][d]=='x",
  "xx(!x[x][x",
  "xx(!x[x][x-'x",
  "xx(!x[x][x]&&(x[x][x]=='*'||x[x][x]=='X",
  "xx(!x[x][x]&&(x[x][x]=='*'||x[x][x]=='x",
  "xx(!x[x][x]&&x[x][x]!=",
  "xx(!x[x][x]&&x[x][x]==",
  "xx(!x[x][x]&&x[x][x]=='X",
  "xx(!x[x][x]&&x[x][x]=='d",
  "xx(!x[x][x]&&x[x][x]=='x",
  "xx(!x[x][x])xxx(x",
  "xx(!x[x]||(x!=x&&x[x]<x[x]))x.xxxx_xxxx(x",
  "xx(!xx",
  "xx(!xx)x--",
  "xx(!xx)xxxx",
  "xx(!xxxx[x",
  "xx(!xxxx[xxxx",
  "xx(!x||(x[x-d][x]&d))xxxx<<\"+---",
  "xx(!x||x[x][x-d]&d)xxxx<<\"|",
  "xx((x>='X'&&x<='X')||(x>='x'&&x<='x'))x++",
  "xx((x>='x'&&x<='x')||(x>='x'&&x<='x'))x++",
  "xx(-x",
  "xx(X",
  "xx(X)xxxx<<\"\\x",
  "xx(X+d",
  "xx(X>d)xxxx<<\"\\x",
  "xx(XXX_XXXX",
  "xx(_x",
  "xx(d",
  "xx(d*x",
  "xx(d*xx",
  "xx(d,x+d",
  "xx(dd",
  "xx(x",
  "xx(x!=-d",
  "xx(x!=x",
  "xx(x!=x&&!x[x",
  "xx(x!=x)x.xxxx_xxxx(x",
  "xx(x!=x)x[x]=xxx(x[x],x[x",
  "xx(x!=x[x",
  "xx(x%d)x+=x",
  "xx(x%d==d&&x==x+d)xxxx<<\"XX\\x",
  "xx(x%d==d&&x==x+d)xxxx<<\"xx\\x",
  "xx(x%x==x-d",
  "xx(x&&!x)x+=x",
  "xx(x&&x",
  "xx(x)),x(x",
  "xx(x),x",
  "xx(x)x*=((x-d)/x+d)*x",
  "xx(x)x[x]+=x[x-d",
  "xx(x)x[x].xxxx_xxxx(x",
  "xx(x)xxxx",
  "xx(x)xxxx<<\"XXXX",
  "xx(x)xxxx<<\"\\x",
  "xx(x)xxxx<<\"xxxx",
  "xx(x*(x+d)/d>=x",
  "xx(x*x",
  "xx(x*x==x.xxxx())xxxx",
  "xx(x*x==xd",
  "xx(x+d",
  "xx(x+d,XXX",
  "xx(x+d,xxx",
  "xx(x+x",
  "xx(x+x.x",
  "xx(x,-d",
  "xx(x,d),x",
  "xx(x.xxxx",
  "xx(x.xxxx())xxxx",
  "xx(x.xxxx()==d",
  "xx(x.xxxx()==x",
  "xx(x.xxxx()==x)xxxx<<x<<\"\\x",
  "xx(x.xxxx()>x)x+=x[x",
  "xx(x.xxxx(d,x.xxxx()-d",
  "xx(x.xxxx(x))x",
  "xx(x.xxxx(x+d",
  "xx(x<d)x+=d",
  "xx(x<d)x=d",
  "xx(x<d)x[x+d][x].xxxx",
  "xx(x<d)x[x][x+d].xxxx",
  "xx(x<d||x>=x)xxxx",
  "xx(x<d||x>=x||x<d||x>=x)xxxx<<x",
  "xx(x==",
  "xx(x==\"d\")xxxx",
  "xx(x=='",
  "xx(x=='!')x++",
  "xx(x=='X",
  "xx(x=='X')x",
  "xx(x=='X')x=",
  "xx(x=='X')x=!x?d",
  "xx(x=='X')x='X",
  "xx(x=='X'){x=d;xxxx",
  "xx(x=='x",
  "xx(x=='x')x",
  "xx(x=='x')x=",
  "xx(x=='x')x=!x?d",
  "xx(x=='x')x='x",
  "xx(x=='x')xxxx(x",
  "xx(x=='x'){x=d;xxxx",
  "xx(x==-d)x[x]=x>d",
  "xx(x==-d)xxxx",
  "xx(x==X",
  "xx(x==d",
  "xx(x==d&&(!x||x[x-d][x]&d))xxxx",
  "xx(x==d&&(!x||x[x][x-d]&d))xxxx",
  "xx(x==d&&(x[x][x]&d))xxxx",
  "xx(x==d)xxxx<<(xxxx(x)==xxxx(x))<<\"\\x",
  "xx(x==d)xxxx<<d<<xxxx",
  "xx(x==x",
  "xx(x==x&&x++<d",
  "xx(x==x&&x==x)xxxx",
  "xx(x==x)x++",
  "xx(x==x)x.xxxx_xxxx(x+d",
  "xx(x==x)xxxx",
  "xx(x==x-d",
  "xx(x==x[x])xxxx",
  "xx(x>=d",
  "xx(x>=d&&x",
  "xx(x>=d&&x<d&&x>=d&&x<d&&!x[x][x",
  "xx(x>=d)x.xxxx_xxxx(x",
  "xx(x>=d)xxxx<<d<<xxxx",
  "xx(x>=x",
  "xx(x>d",
  "xx(x>d&&!x[x-d][x]&&x[x-d][x]=='X')xxx(x-d,x",
  "xx(x>d&&!x[x-d][x]&&x[x-d][x]=='d')xxx(x-d,x",
  "xx(x>d&&!x[x-d][x]&&x[x-d][x]=='x')xxx(x-d,x",
  "xx(x>d&&!x[x][x-d]&&x[x][x-d]=='X')xxx(x",
  "xx(x>d&&!x[x][x-d]&&x[x][x-d]=='d')xxx(x",
  "xx(x>d&&!x[x][x-d]&&x[x][x-d]=='x')xxx(x",
  "xx(x>d&&x",
  "xx(x>d&&x>d&&!x[x-d][x-d]&&x[x-d][x-d]=='X')xxx(x-d,x-d,x",
  "xx(x>d&&x>d&&!x[x-d][x-d]&&x[x-d][x-d]=='d')xxx(x-d,x-d",
  "xx(x>d&&x>d&&!x[x-d][x-d]&&x[x-d][x-d]=='x')xxx(x-d,x-d",
  "xx(x>d&&x>d&&!x[x-d][x-d]&&x[x-d][x-d]=='x')xxx(x-d,x-d,x",
  "xx(x>d&&x>d&&x[x-d][x-d])x.xxxx_xxxx(xxxx_xxxx(x[x-d][x-d],x[x][x",
  "xx(x>d&&x[x-d][x])x.xxxx_xxxx(xxxx_xxxx(x[x-d][x],x[x][x",
  "xx(x>d&&x[x][x-d])x.xxxx_xxxx(xxxx_xxxx(x[x][x-d],x[x][x",
  "xx(x>d)X",
  "xx(x>d)x",
  "xx(x>d)x+=!x[x-d][x",
  "xx(x>d)x+=!x[x][x-d",
  "xx(x>d)x[x-d][x].xxxx",
  "xx(x>d)x[x][x-d].xxxx",
  "xx(x>d)xxx(xxx",
  "xx(x>d)xxxx<<\"\\x",
  "xx(x[d]!='X'&&x[d]!='X')xxxx",
  "xx(x[d]!='x'&&x[d]!='x')xxxx",
  "xx(x[d].xxxx",
  "xx(x[d]=='#')xxxx",
  "xx(x[d]=='*')xxxx",
  "xx(x[d]=='X'&&x[d]=='X')xxxx<<\"X=\"<<x",
  "xx(x[d]=='X'&&x[d]=='X')xxxx<<\"X=\"<<x*x<<\"\\x",
  "xx(x[d]=='X')x=\"X",
  "xx(x[d]=='_')xxxx",
  "xx(x[d]=='x'&&x[d]=='x')xxxx<<\"x=\"<<x",
  "xx(x[d]=='x'&&x[d]=='x')xxxx<<\"x=\"<<x*x<<\"\\x",
  "xx(x[d]=='x')x=\"x",
  "xx(x[d]>x[d]&&x[d]>x[x-d])x++",
  "xx(x[x",
  "xx(x[x+xx[x]][x+xx[x]]!='*'){x+=xx[x];x+=xx[x",
  "xx(x[x-d]=='x'&&x[x-d]=='x')xxxx<<x.xxxx(d,x-d)<<\"xxx\\x",
  "xx(x[x-d]=='x')xxxx<<x.xxxx(d,x-d)<<\"xxx\\x",
  "xx(x[x-d]=='x'||x[x-d]=='x'||x[x-d]=='x'||(x[x-d]=='x'&&x[x-d]=='x'))xxxx<<x<<\"xx\\x",
  "xx(x[x-d]>x)xxxx",
  "xx(x[x-d]>x[d]&&x[x-d]>x[x-d])x++",
  "xx(x[x.xxxx()-d]=='X')x.xxxx_xxxx(x",
  "xx(x[x.xxxx()-d]=='x')x.xxxx_xxxx(x",
  "xx(x[x[d]]==-d)x[x[d]]=x++",
  "xx(x[x]!=-d",
  "xx(x[x]!=-d&&x[x]!=-d",
  "xx(x[x]!=-d)xxxx",
  "xx(x[x]!=-d)xxxx(x[x],x",
  "xx(x[x]!=-dddd)xxxx",
  "xx(x[x]!=x)x=d",
  "xx(x[x]!=x[x",
  "xx(x[x]!=x[x])xxxx",
  "xx(x[x]&&!x[x",
  "xx(x[x]&&x[x",
  "xx(x[x]&&x[x]<x",
  "xx(x[x]&x&&x!=x)x[x]^=x[x",
  "xx(x[x])x=d",
  "xx(x[x])xxxx",
  "xx(x[x])xxxx<<x[x",
  "xx(x[x]*d>=x[x])x.xxxx_xxxx(x",
  "xx(x[x].xxxx",
  "xx(x[x].xxxx()!=d||x[x[x][d]][x[x][d",
  "xx(x[x].xxxx())x++",
  "xx(x[x].xxxx())xxx(x",
  "xx(x[x].xxxx()>X",
  "xx(x[x].xxxx()>x",
  "xx(x[x]<=x",
  "xx(x[x]<=x&&xx[x",
  "xx(x[x]<x[x])xxxx(x",
  "xx(x[x]<x[x]-d)x++",
  "xx(x[x]==':')xxxx",
  "xx(x[x]==';')x++",
  "xx(x[x]==-d",
  "xx(x[x]==-d)x[x]=x++",
  "xx(x[x]==-dddd",
  "xx(x[x]==x",
  "xx(x[x]==x)xxxx",
  "xx(x[x]==x[x-d",
  "xx(x[x]==x[x])x++",
  "xx(x[x]==x[x])xx",
  "xx(x[x]>=d",
  "xx(x[x]>=d)xxxx",
  "xx(x[x]>=dd&&(x+dd)%d==d)x++",
  "xx(x[x]>=x",
  "xx(x[x]>=x[x])x[x]=d",
  "xx(x[x]>=x[x]||x==x-d||x[x+d]>x[x",
  "xx(x[x]>ddd",
  "xx(x[x]>x",
  "xx(x[x]>x)xxxx",
  "xx(x[x]>x[x-d]&&x[x]>x[x+d",
  "xx(x[x]>x[x])x.xxxx_xxxx(x",
  "xx(x[x]>x[x])x.xxxx_xxxx(xxx(x",
  "xx(x[x]>x[x])xxxx(x",
  "xx(x[x]>x[x]+d)x++",
  "xx(x[x][x",
  "xx(x[x][x-d",
  "xx(x[x][x]!=",
  "xx(x[x][x]!=x)xxx(x",
  "xx(x[x][x]&&!x[x[x][x",
  "xx(x[x][x])xxxx",
  "xx(x[x][x]<d)xxxx",
  "xx(x[x][x]==",
  "xx(x[x][x]=='@",
  "xx(x[x][x]=='X')x++",
  "xx(x[x][x]=='X')x=d",
  "xx(x[x][x]=='X')x[x][x]=",
  "xx(x[x][x]=='x')x++",
  "xx(x[x][x]=='x')x=d",
  "xx(x[x][x]=='x')x[x][x]=",
  "xx(x[x][x]>d)xxxx(\"%",
  "xx(xd",
  "xx(xd.xxxx()<x.xxxx",
  "xx(xd<=xx&&xd+xd<=xx)x",
  "xx(xd==xd||x.xxxx({xd,xd})||x.xxxx({xd,xd",
  "xx(xd[x]==xd[x",
  "xx(xx)xxxx<<\"XXXX.\\x",
  "xx(xx)xxxx<<\"xxxx.\\x",
  "xx(xx->xxxx",
  "xx(xxXxxxx.xxxx",
  "xx(xxXxxxxXxxxx(xxxxXxxxx",
  "xx(xx[x][x][(x",
  "xx(xxx",
  "xx(xxx(x",
  "xx(xxx(x[x]-x[x])<=x",
  "xx(xxx.xxx())xxxx",
  "xx(xxx.xxxx",
  "xx(xxxXxxxx",
  "xx(xxx[x].xxxx",
  "xx(xxx_xxx",
  "xx(xxx_xxxx",
  "xx(xxxx",
  "xx(xxxx(&x[d],&x[x],d)%d)x=d",
  "xx(xxxx(&x[d],&x[x],d)>x*(x-d)+x)x=d",
  "xx(xxxx(x",
  "xx(xxxx(x)==xxxx(x))x++",
  "xx(xxxx(x)==xxxx(x))xxxx",
  "xx(xxxx(xxxx",
  "xx(xxxx.xxxx",
  "xx(xxxxXxxx",
  "xx(xxxxXxxxx",
  "xx(xxxxXxxxxXxxxx",
  "xx(xxxx[d][x",
  "xx(xxxx_x",
  "xx(xxxx_xx_xxxx",
  "xx(xxxx_xx_xxxx_xxxx",
  "xx(xxxx_xxx",
  "xx(xxxx_xxxx",
  "xx(xxxxd",
  "xx)(x",
  "xx),xx",
  "xx).xxxx",
  "xx)=x",
  "xx)=x[x",
  "xx)>xxx=[&](xx",
  "xx)x",
  "xx)xxx(x",
  "xx++",
  "xx++->xxxx",
  "xx--",
  "xx->x",
  "xx->xxxx",
  "xx->xxxx()->xxxx",
  "xx->xxxx++",
  "xx->xxxx.xx",
  "xx->xxxx.xxx",
  "xx->xxxx.xxxx",
  "xx->xxxx.xxxx(x",
  "xx.",
  "xx.xxx",
  "xx.xxxx",
  "xx.xxxx('X",
  "xx.xxxx('x",
  "xx.xxxx().xxxx_xxxx(x",
  "xx.xxxx().xxxx_xxxx(x[x",
  "xx.xxxx()[d",
  "xx.xxxx(X",
  "xx.xxxx(d",
  "xx.xxxx(x",
  "xx.xxxx(x[x",
  "xx.xxxx(xx",
  "xx.xxxx({d",
  "xx.xxxx({x[x][x",
  "xx.xxxx({x[x][xxxx",
  "xx.xxxx({x[x][xxxxXxxx",
  "xx.xxxx({xxx_xxxx",
  "xx.xxxx_xxxx(*X",
  "xx.xxxx_xxxx(*x",
  "xx.xxxx_xxxx(X",
  "xx.xxxx_xxxx(d",
  "xx.xxxx_xxxx(x",
  "xx.xxxx_xxxx(xx.xxxx",
  "xx.xxxx_xxxx(xx[x",
  "xx.xxxx_xxxx(xxxx",
  "xx.xxxx_xxxx(xxxx(d",
  "xx.xxxx_xxxx({xxxx[x][d",
  "xx:%xx",
  "xx;x++",
  "xx<=xx",
  "xx<=xx&&xx<=xx",
  "xx==xx",
  "xx=d",
  "xx>(d",
  "xx>(x",
  "xx>(xxx(x",
  "xx>(xxxx+d",
  "xx>(xxxxXxx+d",
  "xx>,xxxx",
  "xx>::xxx",
  "xx>=xx&&xx>=xx",
  "xx>>(x[x].xxxx",
  "xx>>x",
  "xx>>x>>x",
  "xx>>x>>x>>x",
  "xxXxx",
  "xxXxxx",
  "xxXxxx(xxx",
  "xxXxxx(xxxx",
  "xxXxxxXxxx(x",
  "xxXxxxXxxx(xxx",
  "xxXxxxXxxx(xxxx",
  "xxXxxxx",
  "xxXxxxx(XXX_XXXX",
  "xxXxxxx(x",
  "xxXxxxx(xxx",
  "xxXxxxx(xxxx",
  "xxXxxxx.xxx",
  "xxXxxxx.xxxx(x",
  "xxXxxxx.xxxx(xxx(x",
  "xxXxxxxXxXxxxx(xx",
  "xxXxxxxXxXxxxx(xxxxd",
  "xxXxxxxXxxx(xxx",
  "xxXxxxxXxxx(xxxX",
  "xxXxxxxXxxx(xxxx",
  "xxXxxxxXxxxx",
  "xxXxxxxXxxxx(d",
  "xxXxxxxXxxxx(x",
  "xxXxxxxXxxxx(xxx",
  "xxXxxxxXxxxx(xxxx",
  "xxXxxxx[XXX",
  "xxXxxxx[d",
  "xxXxxxx[x",
  "xxXxxxx[x.x",
  "xxXxxxx[x]++",
  "xxXxxxx[x]--",
  "xxXxxxx[xxxx",
  "xxXxxxx[xxxxXxXxxxx++",
  "xxXxxxx[xxxxXxxx",
  "xx[(d",
  "xx[X",
  "xx[XXX_XXXX",
  "xx[X][X",
  "xx[X][X][d",
  "xx[X][x",
  "xx[]={-d,d,d,d",
  "xx[]={d,d,d,-d",
  "xx[d",
  "xx[d]++",
  "xx[d].xxxx",
  "xx[d].xxxx(xx",
  "xx[d]=d",
  "xx[d][X+d][X+d",
  "xx[d][d",
  "xx[d][d].xxxx(d",
  "xx[d][d][x",
  "xx[d][x",
  "xx[d][x+d][x",
  "xx[d][x+d][x+d",
  "xx[d][x+d][x-d",
  "xx[d][x][d",
  "xx[d][x][x",
  "xx[d][x][x-d",
  "xx[dd",
  "xx[ddd",
  "xx[dddd][dddd",
  "xx[x",
  "xx[x+x",
  "xx[x-d",
  "xx[x.xx",
  "xx[x.xxxx()[x",
  "xx[x[x",
  "xx[x[x]]=x",
  "xx[x]++",
  "xx[x]+d",
  "xx[x].xxxx",
  "xx[x].xxxx(xx",
  "xx[x].xxxx(xx.xxxx",
  "xx[x].xxxx_xxxx(xx.xxxx",
  "xx[x]==XXX",
  "xx[x]==xxx",
  "xx[x]=x",
  "xx[x]=xx[x",
  "xx[x][d",
  "xx[x][x",
  "xx[x][x-d",
  "xx[x][x]++",
  "xx[x][x].xxxx",
  "xx[x][x][d",
  "xx[x][xxxxXxxxx][d",
  "xx[x][xxxx][d",
  "xx[x]][x",
  "xx[xx[x",
  "xx[xx][xx",
  "xx[xxx_xxxx",
  "xx[xxxx",
  "xx[xxxx.xxxx",
  "xx[xxxxXxxxx][xxxx",
  "xx[xxxxXxxxxd",
  "xx[xxxxXxxxxd][xxxxXxxxx",
  "xx[xxxx[x",
  "xx[xxxx][x",
  "xx[xxxx][xxxx",
  "xx[xxxx_xxxx",
  "xx[xxxx_xxxx_xxxx][x",
  "xx[xxxx_xxxx_xxxx][x+d",
  "xx[xxxxd",
  "xx[xxxxd][xxxx",
  "xx\\x",
  "xx\\x\":\"xxxx\\x",
  "xx_xx",
  "xx_xx++",
  "xx_xxx",
  "xx_xxx.xxxx",
  "xx_xxx[x",
  "xx_xxx[xx",
  "xx_xxx_xxx",
  "xx_xxxx",
  "xx_xxxx(x",
  "xx_xxxx(xxx",
  "xx_xxxx(xxxx",
  "xx_xxxx(xxxx.xxxx",
  "xx_xxxx[dddd",
  "xx_xxxx[x",
  "xx_xxxx[xxxx[x",
  "xx_xxxx_xxx",
  "xxd",
  "xxd(x",
  "xxd++",
  "xxd->xxxx",
  "xxd[d",
  "xxd[x",
  "xxx",
  "xxx'x",
  "xxx(((xxxx_xx_xxxx",
  "xxx((dd",
  "xxx((x",
  "xxx((x-d",
  "xxx((xxxx",
  "xxx((xxxx_xx_xxxx",
  "xxx(;x",
  "xxx(;x<=x.xxxx();x++",
  "xxx(;x<=x;x*=d,x++",
  "xxx(;x>d;x--",
  "xxx(;x[x]!=';'&&x[x]!='",
  "xxx(;xx>>x>>x;x++",
  "xxx(X",
  "xxx(X.xxxx",
  "xxx(XX",
  "xxx(XXX",
  "xxx(X[x",
  "xxx(_x",
  "xxx(d",
  "xxx(d*x",
  "xxx(dXX",
  "xxx(dd",
  "xxx(dddd",
  "xxx(dxx",
  "xxx(x",
  "xxx(x+d,x",
  "xxx(x+x",
  "xxx(x+x-d",
  "xxx(x,-d",
  "xxx(x,d",
  "xxx(x->x",
  "xxx(x-d",
  "xxx(x-d,x",
  "xxx(x.xxxx",
  "xxx(x.xxxx(),x.xxxx",
  "xxx(x.xxxx(),x.xxxx());x++",
  "xxx(x/d",
  "xxx(x=d;;x++",
  "xxx(xXxxxx",
  "xxx(x[d",
  "xxx(x[d][x",
  "xxx(x[x",
  "xxx(x[x+x",
  "xxx(x[x-d][x",
  "xxx(x[x.xxxx",
  "xxx(x[x[x]][d",
  "xxx(x[x]+x[x]-x",
  "xxx(x[x],x",
  "xxx(x[x],x[x])==d",
  "xxx(x[x].xxxx",
  "xxx(x[x][d",
  "xxx(x[x][x",
  "xxx(x[xx].xxxx",
  "xxx(x[xxxxXxxxx][xxxxXxxxx",
  "xxx(x[xxxx[d]][x",
  "xxx(x[xxxx].xxxx",
  "xxx(x[xxxx][xxxx",
  "xxx(x[xxxx_xxxx",
  "xxx(x_xxxx",
  "xxx(xd",
  "xxx(xd[x",
  "xxx(xx",
  "xxx(xx&x",
  "xxx(xx(x",
  "xxx(xx->xxxx",
  "xxx(xx[x",
  "xxx(xx[x][d",
  "xxx(xx[x][x",
  "xxx(xx[x][x][d",
  "xxx(xxd",
  "xxx(xxd[d",
  "xxx(xxd[x",
  "xxx(xxx",
  "xxx(xxx(x",
  "xxx(xxx(xd",
  "xxx(xxx(xxx(xd",
  "xxx(xxx(xxxXxxxxXxx",
  "xxx(xxx(xxxx",
  "xxx(xxx(xxxxXxx",
  "xxx(xxx)>xxxx=[&](xxx",
  "xxx(xxx.xxxx",
  "xxx(xxxX",
  "xxx(xxxXxxx",
  "xxx(xxxXxxxx",
  "xxx(xxxXxxxx.xxxx",
  "xxx(xxxXxxxxXxxx",
  "xxx(xxxXxxxxXxxxx",
  "xxx(xxxXxxxx[x",
  "xxx(xxx_x",
  "xxx(xxx_xx_xxx",
  "xxx(xxx_xxx",
  "xxx(xxx_xxxx",
  "xxx(xxx_xxxx_xxxx",
  "xxx(xxx_xxxx_xxxx_xxxx",
  "xxx(xxxx",
  "xxx(xxxx(x",
  "xxx(xxxx.xxx_xxx",
  "xxx(xxxx.xxx_xxxx",
  "xxx(xxxx.xxxx",
  "xxx(xxxxX",
  "xxx(xxxxX[x",
  "xxx(xxxxXxXxxx",
  "xxx(xxxxXxx",
  "xxx(xxxxXxx.xxxx",
  "xxx(xxxxXxx[x",
  "xxx(xxxxXxxx",
  "xxx(xxxxXxxx.xxxx",
  "xxx(xxxxXxxx[x",
  "xxx(xxxxXxxxx",
  "xxx(xxxxXxxxx.xxxx",
  "xxx(xxxxXxxxxX",
  "xxx(xxxxXxxxxXxxxx",
  "xxx(xxxxXxxxx[d",
  "xxx(xxxxXxxxx[x][x",
  "xxx(xxxxXxxxx[xxxx",
  "xxx(xxxx[d",
  "xxx(xxxx[d*x",
  "xxx(xxxx[x",
  "xxx(xxxx[x][d",
  "xxx(xxxx[x][x",
  "xxx(xxxx[xxxx",
  "xxx(xxxx_x",
  "xxx(xxxx_xx_xxxx",
  "xxx(xxxx_xxx",
  "xxx(xxxx_xxx[xxxx",
  "xxx(xxxx_xxxx",
  "xxx(xxxx_xxxx[xxxx][xxxx",
  "xxx(xxxx_xxxx_xxxx",
  "xxx(xxxxd",
  "xxx(xx{d",
  "xxx({x",
  "xxx)>x=[&](xxx",
  "xxx)>xxx=[&](xxx",
  "xxx)>xxxd=[&](xxx",
  "xxx)>xxxx=[&](xxx",
  "xxx++",
  "xxx+d",
  "xxx-'X",
  "xxx-'x",
  "xxx--",
  "xxx-d",
  "xxx.\\x",
  "xxx.x",
  "xxx.xxx",
  "xxx.xxx().xx",
  "xxx.xxx(XXXX",
  "xxx.xxx(d",
  "xxx.xxx(xxxx",
  "xxx.xxx_xxxx",
  "xxx.xxxx",
  "xxx.xxxx().xxx",
  "xxx.xxxx().xxxx_xxxx(d",
  "xxx.xxxx().xxxx_xxxx(x",
  "xxx.xxxx().xxxx_xxxx(xx[x",
  "xxx.xxxx(--xx",
  "xxx.xxxx(X{d",
  "xxx.xxxx(X{xxxx[x.xx",
  "xxx.xxxx(d",
  "xxx.xxxx(x",
  "xxx.xxxx(xx",
  "xxx.xxxx(xxx",
  "xxx.xxxx(xxxx",
  "xxx.xxxx(x{d",
  "xxx.xxxx(x{xxxx[x.xx",
  "xxx.xxxx_xx_xxxx((xxx.xxxx",
  "xxx.xxxx_xxxx(\"dd\"[((x",
  "xxx.xxxx_xxxx('d",
  "xxx.xxxx_xxxx(x",
  "xxx.xxxx_xxxx(x[x",
  "xxx.xxxx_xxxx(x[x[x",
  "xxx.xxxx_xxxx(xx",
  "xxx.xxxx_xxxx(xx(x",
  "xxx.xxxx_xxxx(xx[x",
  "xxx.xxxx_xxxx(xxx",
  "xxx.xxxx_xxxx(xxxXxxxx",
  "xxx.xxxx_xxxx(xxxx",
  "xxx.xxxx_xxxx({x",
  "xxx.xxxx_xxxx({xxxx",
  "xxx/d",
  "xxx/xx",
  "xxx::xxx",
  "xxx::xxx(x",
  "xxx::xxx(xd",
  "xxx::xxx(xxxXxxx",
  "xxx::xxx(xxxXxxxx",
  "xxx::xxx(xxxXxxxxXxxx",
  "xxx::xxx(xxx_xxxx",
  "xxx::xxx(xxxx",
  "xxx::xxx(xxxx.xxxx",
  "xxx::xxx(xxxxXxx",
  "xxx::xxx(xxxxXxxxx",
  "xxx::xxx(xxxx[x",
  "xxx::xxx(xxxx[x][x",
  "xxx::xxx(xxxx_x",
  "xxx::xxx(xxxx_xxx",
  "xxx::xxx(xxxxd",
  "xxx::xxx.xxx(d",
  "xxx::xxx.xxx(xxxx",
  "xxx::xxx::xxxx_xxxx_xxxx(d",
  "xxx::xxx::xxxx_xxxx_xxxx(xxxx",
  "xxx::xxx<d>(x",
  "xxx::xxx_xxxx::xxxx_xxxx_xxxx(xxxx",
  "xxx::xxxx",
  "xxx::xxxx(d",
  "xxx::xxxx(x",
  "xxx::xxxx(x.xxxx",
  "xxx::xxxx(xx.xxxx",
  "xxx::xxxx(xxx.xxxx",
  "xxx::xxxx(xxx::xxx",
  "xxx::xxxx(xxx::xxxx(xxxxd",
  "xxx::xxxx(xxxx.xxxx",
  "xxx::xxxx(xxxx[xx",
  "xxx::xxxx::xxx::xxxx",
  "xxx::xxxx::xxxx",
  "xxx::xxxx<_xxxx",
  "xxx::xxxx_xxx",
  "xxx::xxxx_xxxx",
  "xxx::xxxx_xxxx(&x[x",
  "xxx::xxxx_xxxx(x",
  "xxx::xxxx_xxxx_xxxx",
  "xxx::xxxx_xxxx_xxxx(d",
  "xxx::xxxx_xxxx_xxxx(xxxx",
  "xxx<d>(*x.xxxx",
  "xxx<d>(*xx",
  "xxx<d>(*xxxx_xxxx.xxxx",
  "xxx<d>(x",
  "xxx<d>(x(d",
  "xxx<d>(x)/x",
  "xxx<d>(x.xxx",
  "xxx<d>(x.xxx()),x=-d",
  "xxx<d>(x.xxxx",
  "xxx<d>(x.xxxx_xx_xxxx(x",
  "xxx<d>(x[d",
  "xxx<d>(x[x",
  "xxx<d>(x[x][x",
  "xxx<d>(x[x][x])+d",
  "xxx<d>(xd",
  "xxx<d>(xxx(x[x][x",
  "xxx<d>(xxxx",
  "xxx<d>(xxxx.xxx",
  "xxx<d>(xxxx.xxxx",
  "xxx<d>(xxxxXxxxx",
  "xxx<d>(xxxxXxxxx.xxx",
  "xxx<d>(xxxx[x",
  "xxx<d>(xxxx[xxxx",
  "xxx=[&](xxx",
  "xxx=dddd",
  "xxx>((x",
  "xxx>((xxxx",
  "xxx>(d",
  "xxx>(x",
  "xxx>(x[x])]++",
  "xxx>(xxx[d].xxxx",
  "xxx>(xxxd(xxxx",
  "xxx>(xxxd(xxxxXxXxxxx",
  "xxx>(xxxddXxxxx[xxxx",
  "xxx>(xxxddxxxx[xxxx",
  "xxx>(xxxx",
  "xxx>(xxxx(x",
  "xxx>(xxxx(x))].xxxx_xxxx(x",
  "xxx>(xxxx.xxxx",
  "xxx>(xxxx.xxxx_xxxx.xxxx",
  "xxx>(xxxxXxxx",
  "xxx>(xxxx[x].xxxx",
  "xxx>(xxxx_.xxxx",
  "xxx>(xxxx_[xxxx].xxxx",
  "xxx>,xx_xxxx_xxx",
  "xxx>,xxxx",
  "xxx>::xxx",
  "xxx>::xxxx",
  "xxx>>(x",
  "xxx>>>(x",
  "xxx>>X",
  "xxx>>X>>X",
  "xxx>>x",
  "xxx>>x;x--",
  "xxx>>x>>x",
  "xxx>>x>>x>>X>>X>>xx>>xx",
  "xxx>>x>>x>>x",
  "xxx>>x>>x>>x>>x",
  "xxx>>x>>x>>x>>x>>x",
  "xxx>>x>>x>>x>>x>>x>>x",
  "xxx>>x>>x>>x>>x>>xx>>xx",
  "xxx>>x>>x>>xd>>xd>>x",
  "xxx>>x[x",
  "xxx>>x[x][x",
  "xxx>>xd>>xd",
  "xxx>>xd>>xd>>xd>>xd",
  "xxx>{xxxx[d",
  "xxxX",
  "xxxX(x",
  "xxxX[X",
  "xxxX[XXX_X",
  "xxxX[x",
  "xxxX[xxxx",
  "xxxXx",
  "xxxXx->xxxx",
  "xxxXx->xxxx.xxx<d",
  "xxxXxXxxx",
  "xxxXxXxxxx(x",
  "xxxXxXxxxx(xxx",
  "xxxXxx",
  "xxxXxx(XxxxxXxxxXxxx",
  "xxxXxx(d",
  "xxxXxx(xx",
  "xxxXxx(xxxx->xxxx",
  "xxxXxx(xxxxXxxx[xxxx",
  "xxxXxx(xxxx_x",
  "xxxXxx--",
  "xxxXxxXxxx",
  "xxxXxxXxxxx",
  "xxxXxxXxxxx(x",
  "xxxXxxXxxxx(xxx",
  "xxxXxxXxxxx(xxxx",
  "xxxXxxx",
  "xxxXxxx(X",
  "xxxXxxx(Xxxx",
  "xxxXxxx(x",
  "xxxXxxx(xxx",
  "xxxXxxx(xxxXxxxx",
  "xxxXxxx(xxxx",
  "xxxXxxx).xxxx",
  "xxxXxxx->xxxx",
  "xxxXxxx.xxxx(d",
  "xxxXxxx[XXX",
  "xxxXxxx[XXXX",
  "xxxXxxx[d",
  "xxxXxxx[d*x+d].xxx",
  "xxxXxxx[d*x].xxx",
  "xxxXxxx[x",
  "xxxXxxx[x[x",
  "xxxXxxx[x].xxx",
  "xxxXxxx[x].xxxx(x",
  "xxxXxxx[x].xxxx_xxxx(x",
  "xxxXxxx[xx",
  "xxxXxxx[xx].xxx",
  "xxxXxxx[xx].xxxx",
  "xxxXxxx[xx].xxxx_xxxx(x",
  "xxxXxxx[xx].xxxx_xxxx(x[x][d",
  "xxxXxxx[xxxx",
  "xxxXxxxx",
  "xxxXxxxx(Xxxx",
  "xxxXxxxx(Xxxxx",
  "xxxXxxxx(x",
  "xxxXxxxx(xx",
  "xxxXxxxx(xxxx",
  "xxxXxxxx(xxxx.xxxx",
  "xxxXxxxx(xxxxXxXxxxx",
  "xxxXxxxx(xxxxXxxx",
  "xxxXxxxx(xxxxXxxxx.xxxx",
  "xxxXxxxx++",
  "xxxXxxxx--",
  "xxxXxxxx.xxx",
  "xxxXxxxx.xxx<d",
  "xxxXxxxx.xxxx",
  "xxxXxxxx.xxxx(xxxXxxx",
  "xxxXxxxx.xxxx_xxxx(x",
  "xxxXxxxx.xxxx_xxxx(xxxx_xxxx(--x",
  "xxxXxxxxXxx",
  "xxxXxxxxXxx.xxx",
  "xxxXxxxxXxx.xxxx(xxxxXxxxx",
  "xxxXxxxxXxx[xxxx",
  "xxxXxxxxXxx[xxxxXxxxx",
  "xxxXxxxxXxxx",
  "xxxXxxxxXxxxXxxxx",
  "xxxXxxxxXxxxx",
  "xxxXxxxxXxxxx(xxx",
  "xxxXxxxxXxxxx(xxxx",
  "xxxXxxxxXxxxxXxx",
  "xxxXxxxxXxxxxXxxxx",
  "xxxXxxxx[d",
  "xxxXxxxx[d][x",
  "xxxXxxxx[x",
  "xxxXxxxx[x][x",
  "xxxXxxxx[xxxXxxxx",
  "xxxXxxxx[xxxx",
  "xxxXxxxx[xxxxXxxxx",
  "xxxXxxxx[xxxx[x][x",
  "xxxXxxxx[xxxx].xxxx(x",
  "xxxXxxxx[xxxx][x",
  "xxx[(x+d)/d",
  "xxx[(xxxx_xxxx",
  "xxx[X",
  "xxx[XXX_X",
  "xxx[X][x",
  "xxx[d",
  "xxx[d*X",
  "xxx[d*x",
  "xxx[d].xxxx",
  "xxx[d]=d",
  "xxx[d][x",
  "xxx[dd",
  "xxx[x",
  "xxx[x+d][x",
  "xxx[x-d",
  "xxx[x-d][xxx[x-d][x",
  "xxx[x.xx",
  "xxx[x[x",
  "xxx[x]++",
  "xxx[x]--",
  "xxx[x].xxxx",
  "xxx[x]=X-(X",
  "xxx[x]=x-(x",
  "xxx[x][x",
  "xxx[xx[x",
  "xxx[xxx",
  "xxx[xxx.xxxx",
  "xxx[xxx<d>(x[x",
  "xxx[xxx_x",
  "xxx[xxxx",
  "xxx[xxxx[x]]=x",
  "xxx[xxxx].xxxx",
  "xxx[xxxx].xxxx_xxxx(x",
  "xxx[xxxx][x",
  "xxx[xxxx_xxxx",
  "xxx[xxxx_xxxx]++",
  "xxx\\x",
  "xxx\\x\",x",
  "xxx\\x\",x[x-d],x[xx-d],x[xx-d],x[xx-d",
  "xxx_d",
  "xxx_d(xxxx",
  "xxx_d(xxxx_xxxx[x",
  "xxx_x",
  "xxx_x-",
  "xxx_xx",
  "xxx_xx_xx_xxxx",
  "xxx_xx_xxx",
  "xxx_xx_xxxx",
  "xxx_xx_xxxx(xxx",
  "xxx_xx_xxxx(xxxx_xxxx[x",
  "xxx_xx_xxxxd",
  "xxx_xxx",
  "xxx_xxx(x",
  "xxx_xxx(xxx",
  "xxx_xxx(xxxx_xx",
  "xxx_xxxx",
  "xxx_xxxx(Xxxx",
  "xxx_xxxx(x",
  "xxx_xxxx(x_xxxx",
  "xxx_xxxx(xx",
  "xxx_xxxx(xx(xxxx(xxxx",
  "xxx_xxxx(xxx",
  "xxx_xxxx(xxx_xxxx",
  "xxx_xxxx(xxxx",
  "xxx_xxxx(xxxx(xxxx",
  "xxx_xxxx(xxxx.xxxx).xxxx",
  "xxx_xxxx(xxxx.xxxxXxxxXx).xxxx",
  "xxx_xxxx++",
  "xxx_xxxx--",
  "xxx_xxxx.xxx_xxxx",
  "xxx_xxxx.xxxx",
  "xxx_xxxx.xxxx_xxxx(xxxx",
  "xxx_xxxx.xxxx_xxxx({x",
  "xxx_xxxx::xx_xxxx_xxx",
  "xxx_xxxx::xxxx",
  "xxx_xxxx::xxxx_xxxx_xxxx(d",
  "xxx_xxxx::xxxx_xxxx_xxxx(xxxx",
  "xxx_xxxx::xxxx_xxxx_xxxx_xxxx_xxxx",
  "xxx_xxxx[x",
  "xxx_xxxx[xx.xxxx",
  "xxx_xxxx_(xxxx",
  "xxx_xxxx_x",
  "xxx_xxxx_xx",
  "xxx_xxxx_xxxx",
  "xxx_xxxx_xxxx_xxxx",
  "xxx_xxxx{xxx_xx",
  "xxxd",
  "xxxd(*xx",
  "xxxd(d",
  "xxxd(x",
  "xxxd(x,d",
  "xxxd(x[d",
  "xxxd(x[x",
  "xxxd(xxx",
  "xxxd(xxxX",
  "xxxd(xxxx",
  "xxxd(xxxx[d",
  "xxxd(xxxx_xxxx[x",
  "xxxd=[&](xxx",
  "xxxd[X+d",
  "xxxd[d",
  "xxxd[x",
  "xxxd[x+d",
  "xxxdd",
  "xxxdd(xxxx(x",
  "xxxdd(xxxx(x++",
  "xxxdd(xxxx(xxxx",
  "xxxdd(xxxx(xxxxXxXxxxx",
  "xxxdd(xxxx_xxxx",
  "xxxdd)(x",
  "xxxddXxxxx[XXX_X",
  "xxxddXxxxx[x",
  "xxxdd_xxx",
  "xxxddd",
  "xxxddxxxx[x",
  "xxxddxxxx[xxx_x",
  "xxxdxxxx(xxx",
  "xxxx",
  "xxxx!=-d",
  "xxxx!\\x",
  "xxxx\"/\"xxxx",
  "xxxx\"<<(x!=d?\"x\":\"\")<<\".\\x",
  "xxxx\"[x",
  "xxxx\"[x]<<\"\\x",
  "xxxx&(X",
  "xxxx&(x",
  "xxxx'",
  "xxxx'X':x++",
  "xxxx'X':x++;xxxx",
  "xxxx'X':x--;xxxx",
  "xxxx'x",
  "xxxx'x':x++",
  "xxxx'x':x++;xxxx",
  "xxxx'x':x--;xxxx",
  "xxxx(!(x%x",
  "xxxx(!x",
  "xxxx(!x.xxxx",
  "xxxx(!x[d+x[x]][d+x[x]])x=(x+d)%d",
  "xxxx(!x[x",
  "xxxx(!x[x][x",
  "xxxx(\"%.dx\\x",
  "xxxx(\"%.dx\\x%x\\x",
  "xxxx(\"%ddx%x\\x",
  "xxxx(\"%ddx%x\\x\",x",
  "xxxx(\"%ddx:%ddx:%ddx\\x",
  "xxxx(\"%ddx:%ddx:%ddx\\x\",x",
  "xxxx(\"%dx",
  "xxxx(\"%x",
  "xxxx(\"%x-%x\\x",
  "xxxx(\"%x-%x\\x\",&x,&x",
  "xxxx(\"%x:%x:%x\\x\",&x,&x,&x",
  "xxxx(\"%x:%x:%x\\x\",&xxxx,&xxxx,&xxxx",
  "xxxx(\"%x:%x\\x",
  "xxxx(\"%x\\x",
  "xxxx(\"%xxx",
  "xxxx(\"Xx(%x(X%x)%x(X%x)xx(%x%xxXX)x)%x(%x%x)x(%x%xx",
  "xxxx(\"Xx\\x",
  "xxxx(\"Xxxx",
  "xxxx(\"Xxxxx\\x",
  "xxxx(\"xx(%x(x%x)%x(x%x)xx(%x%xxxx)x)%x(%x%x)x(%x%xx",
  "xxxx(\"xx\\x",
  "xxxx(\"xxxx",
  "xxxx(\"xxxx\\x",
  "xxxx(&x[d],&x[x],xxxx",
  "xxxx('X",
  "xxxx('x",
  "xxxx((X",
  "xxxx((x",
  "xxxx((x-d)*d,x-d,X",
  "xxxx((x-d)*d,x-d,x",
  "xxxx((xxxx",
  "xxxx()(xxxx",
  "xxxx()>x=",
  "xxxx(*x",
  "xxxx(-d",
  "xxxx(X",
  "xxxx(X--",
  "xxxx(X.xxxx",
  "xxxx(XX",
  "xxxx(XXX",
  "xxxx(X[x].xxxx",
  "xxxx(_x",
  "xxxx(_xxxx",
  "xxxx(d",
  "xxxx(d.d",
  "xxxx(dd",
  "xxxx(ddd",
  "xxxx(dddd",
  "xxxx(x",
  "xxxx(x)+xxxx(X",
  "xxxx(x)+xxxx(x",
  "xxxx(x),x",
  "xxxx(x),xx",
  "xxxx(x).\\x",
  "xxxx(x);x",
  "xxxx(x)\\x",
  "xxxx(x+d",
  "xxxx(x--",
  "xxxx(x->x",
  "xxxx(x-d,x-d,x",
  "xxxx(x.x_xxx",
  "xxxx(x.xxx",
  "xxxx(x.xxxx",
  "xxxx(x.xxxx(),x.xxx",
  "xxxx(x.xxxx(),x.xxx(),xxxx",
  "xxxx(x.xxxx(),x.xxxx",
  "xxxx(x.xxxx()<x)x.xxxx_xxxx(xxxx",
  "xxxx(x.xxxx()==xx.xxxx",
  "xxxx(x.xxxx()>d&&x.xxxx()==d",
  "xxxx(x.xxxx(d",
  "xxxx(x.xxxx(d).x_xxx",
  "xxxx(x.xxxx(d).x_xxx()),x",
  "xxxx(x.xxxx(xxx).x_xxx",
  "xxxx(x/d",
  "xxxx(x==d",
  "xxxx(x>=d&&x",
  "xxxx(x>d",
  "xxxx(xXxxxx.xxxx",
  "xxxx(x[d",
  "xxxx(x[d][X",
  "xxxx(x[d][x",
  "xxxx(x[x",
  "xxxx(x[x--]==",
  "xxxx(x[x],x[x",
  "xxxx(x[x],x[x-d",
  "xxxx(x[x].x_xxx",
  "xxxx(x[x].xxxx",
  "xxxx(x[x].xxxx(),x[x].xxx",
  "xxxx(x[x][x",
  "xxxx(x[xx",
  "xxxx(x[xxx",
  "xxxx(x_xxxx",
  "xxxx(xd",
  "xxxx(xd.xxxx",
  "xxxx(xd.xxxx(),xd.xxx",
  "xxxx(xx",
  "xxxx(xx++",
  "xxxx(xx--",
  "xxxx(xx->xxxx",
  "xxxx(xx->xxxx.xxxx",
  "xxxx(xx.xxxx",
  "xxxx(xx>>x",
  "xxxx(xx>>x)x++",
  "xxxx(xx>>x>>x",
  "xxxx(xxXxxxx",
  "xxxx(xx[x",
  "xxxx(xx_xxxx",
  "xxxx(xxx",
  "xxxx(xxx)>x=[&](xxx",
  "xxxx(xxx)>xxx",
  "xxxx(xxx)>xxx=[&](xxx",
  "xxxx(xxx)>xxxd=[&](xxx",
  "xxxx(xxx.xxxx",
  "xxxx(xxx.xxxx().xxxx",
  "xxxx(xxx::xxxx",
  "xxxx(xxx>>x",
  "xxxx(xxx>>x>>x",
  "xxxx(xxx>>x>>x>>x>>x",
  "xxxx(xxxXxxx",
  "xxxx(xxxXxxx[d",
  "xxxx(xxxXxxx[xx].xxxx",
  "xxxx(xxxXxxxx",
  "xxxx(xxxXxxxx.xxxx",
  "xxxx(xxx[x][x",
  "xxxx(xxx_x",
  "xxxx(xxx_xxxx",
  "xxxx(xxx_xxxx[xx.xxxx",
  "xxxx(xxxd(x",
  "xxxx(xxxd(xxxx[x",
  "xxxx(xxxd[x",
  "xxxx(xxxdd(xxx_xxxx",
  "xxxx(xxxx",
  "xxxx(xxxx(d",
  "xxxx(xxxx(x",
  "xxxx(xxxx(x->x",
  "xxxx(xxxx(x[x",
  "xxxx(xxxx(xxx",
  "xxxx(xxxx(xxxx",
  "xxxx(xxxx(xxxxXxxxx",
  "xxxx(xxxx)/xxxx(xxx",
  "xxxx(xxxx->xxxx",
  "xxxx(xxxx.xxxx",
  "xxxx(xxxx.xxxx(d",
  "xxxx(xxxx.xxxx(xxxx",
  "xxxx(xxxx.xxxx.xxxx",
  "xxxx(xxxx::xxxx",
  "xxxx(xxxxXXxxxx",
  "xxxx(xxxxXx",
  "xxxx(xxxxXxXxxx",
  "xxxx(xxxxXxXxxxx",
  "xxxx(xxxxXxXxxxx.xxxx(d",
  "xxxx(xxxxXxx",
  "xxxx(xxxxXxx[d",
  "xxxx(xxxxXxx[xxxxd",
  "xxxx(xxxxXxxx",
  "xxxx(xxxxXxxx[x",
  "xxxx(xxxxXxxx[xxxx].xxxx",
  "xxxx(xxxxXxxx[xxxx][x",
  "xxxx(xxxxXxxxx",
  "xxxx(xxxxXxxxx.xxxx",
  "xxxx(xxxxXxxxxXxxxx[x",
  "xxxx(xxxx[d",
  "xxxx(xxxx[x",
  "xxxx(xxxx[x].xxxx(),xxxx[x].xxx",
  "xxxx(xxxx[x].xxxx(d",
  "xxxx(xxxx[x][d",
  "xxxx(xxxx[x][x",
  "xxxx(xxxx[xx].xxxx",
  "xxxx(xxxx[xxxXxx",
  "xxxx(xxxx[xxxx",
  "xxxx(xxxx[xxxx.xxxx",
  "xxxx(xxxx[xxxxXxx][xxxxXxx",
  "xxxx(xxxx[xxxxXxxx",
  "xxxx(xxxx[xxxx].xxxx",
  "xxxx(xxxx[xxxx][x",
  "xxxx(xxxx[xxxx][xxxx",
  "xxxx(xxxx[xxxxd",
  "xxxx(xxxx_.xxxx",
  "xxxx(xxxx_[x",
  "xxxx(xxxx_x",
  "xxxx(xxxx_x.xxxx",
  "xxxx(xxxx_xx_xxxx",
  "xxxx(xxxx_xxx",
  "xxxx(xxxx_xxx.xxxx",
  "xxxx(xxxx_xxx[xxxx",
  "xxxx(xxxx_xxxx",
  "xxxx(xxxx_xxxx.xxxx",
  "xxxx(xxxx_xxxx_xxxx[x].xxxx",
  "xxxx(xxxxd",
  "xxxx(x||x",
  "xxxx).xxxx",
  "xxxx)x",
  "xxxx*(xx",
  "xxxx*x",
  "xxxx*xxxx",
  "xxxx*xxxxXxxxx",
  "xxxx+(xx",
  "xxxx++",
  "xxxx++.x",
  "xxxx+d*xxxx)/d",
  "xxxx-(X",
  "xxxx-(x",
  "xxxx-(xx",
  "xxxx--",
  "xxxx->x",
  "xxxx->xx",
  "xxxx->xxx",
  "xxxx->xxxx",
  "xxxx->xxxx->xxx",
  "xxxx->xxxx->xxxx",
  "xxxx->xxxx.xxx<d",
  "xxxx.\\x",
  "xxxx._xxxx",
  "xxxx.x",
  "xxxx.x_xxx",
  "xxxx.xd",
  "xxxx.xd++",
  "xxxx.xx",
  "xxxx.xx(d",
  "xxxx.xxx",
  "xxxx.xxx().xxxx",
  "xxxx.xxx(XXXX",
  "xxxx.xxx(xxxx",
  "xxxx.xxx<d",
  "xxxx.xxxXxxx(x",
  "xxxx.xxx_xxx",
  "xxxx.xxx_xxxx",
  "xxxx.xxx_xxxx(X",
  "xxxx.xxx_xxxx(x",
  "xxxx.xxxx",
  "xxxx.xxxx('x",
  "xxxx.xxxx().xxxx(d",
  "xxxx.xxxx().xxxx_xxxx(x",
  "xxxx.xxxx().xxxx_xxxx(xxxx",
  "xxxx.xxxx();x++",
  "xxxx.xxxx()[d",
  "xxxx.xxxx()[x",
  "xxxx.xxxx()[xxxx[x].xxxx",
  "xxxx.xxxx()]++",
  "xxxx.xxxx(--xxxx",
  "xxxx.xxxx(-xxxx[x",
  "xxxx.xxxx(X",
  "xxxx.xxxx(Xxxx(xxxxXxxxx[xxxxXxXxxxx",
  "xxxx.xxxx(d",
  "xxxx.xxxx(dd",
  "xxxx.xxxx(x",
  "xxxx.xxxx(x[xxxx",
  "xxxx.xxxx(x[xxxxXxxxx",
  "xxxx.xxxx(xx",
  "xxxx.xxxx(xx->xxxx",
  "xxxx.xxxx(xxx",
  "xxxx.xxxx(xxx(x",
  "xxxx.xxxx(xxx(xxxx",
  "xxxx.xxxx(xxxX",
  "xxxx.xxxx(xxxXxx",
  "xxxx.xxxx(xxxXxxxx",
  "xxxx.xxxx(xxxx",
  "xxxx.xxxx(xxxx(xxxx",
  "xxxx.xxxx(xxxx(xxxx.xxxx",
  "xxxx.xxxx(xxxx(xxxx[d",
  "xxxx.xxxx(xxxx(xxxx[xxxx",
  "xxxx.xxxx(xxxx)->xxxx",
  "xxxx.xxxx(xxxx.xxx",
  "xxxx.xxxx(xxxx.xxxx",
  "xxxx.xxxx(xxxx::xxxx_xxxx::xxx().xxxx_xxxx_xxxx().xxxx",
  "xxxx.xxxx(xxxxXxx",
  "xxxx.xxxx(xxxxXxx[xxxxXxxx",
  "xxxx.xxxx(xxxxXxxx",
  "xxxx.xxxx(xxxxXxxxx",
  "xxxx.xxxx(xxxxXxxxx.xxxx",
  "xxxx.xxxx(xxxx[x",
  "xxxx.xxxx(xxxx[xxxx",
  "xxxx.xxxx(xxxx[xxxx].xxxx",
  "xxxx.xxxx(xxxx_xx_xxxx_xxxx",
  "xxxx.xxxx(xxxx_xxx",
  "xxxx.xxxx(xxxx_xxxx",
  "xxxx.xxxx(xxxx_xxxx((xxxx[xxxx",
  "xxxx.xxxx(xxxx_xxxx(x",
  "xxxx.xxxx(xxxx_xxxx(xd",
  "xxxx.xxxx(xxxx_xxxx(xxxx",
  "xxxx.xxxx(xxxx_xxxx(xxxx_xxxx(x",
  "xxxx.xxxx(xxxx_xxxx[xxxx",
  "xxxx.xxxx(xxxx_xxxx[xxxx_xxxx",
  "xxxx.xxxx(xxxx_xxxx_xxxx",
  "xxxx.xxxx(xxxxd",
  "xxxx.xxxx({(xxxx",
  "xxxx.xxxx({-xxxx[xxxx",
  "xxxx.xxxx({d",
  "xxxx.xxxx({x",
  "xxxx.xxxx({xx->xxxx",
  "xxxx.xxxx({xxx",
  "xxxx.xxxx({xxxx",
  "xxxx.xxxx({xxxx(xxxx[d][x",
  "xxxx.xxxx({xxxx[xxxx.xx",
  "xxxx.xxxx--",
  "xxxx.xxxx.xxx",
  "xxxx.xxxx.xxxx",
  "xxxx.xxxxXxxx(d",
  "xxxx.xxxxXxxxXx",
  "xxxx.xxxx][x",
  "xxxx.xxxx_xx_xxxx(x",
  "xxxx.xxxx_xxxx",
  "xxxx.xxxx_xxxx('X",
  "xxxx.xxxx_xxxx('x",
  "xxxx.xxxx_xxxx(*xx",
  "xxxx.xxxx_xxxx(-xxxx[X][x",
  "xxxx.xxxx_xxxx(-xxxx[x][x",
  "xxxx.xxxx_xxxx(d",
  "xxxx.xxxx_xxxx(x",
  "xxxx.xxxx_xxxx(x.xxxx(xxxx",
  "xxxx.xxxx_xxxx(x[x",
  "xxxx.xxxx_xxxx(xd",
  "xxxx.xxxx_xxxx(xx",
  "xxxx.xxxx_xxxx(xx(x",
  "xxxx.xxxx_xxxx(xx(x+d",
  "xxxx.xxxx_xxxx(xx->xxxx",
  "xxxx.xxxx_xxxx(xxx",
  "xxxx.xxxx_xxxx(xxx_xxxx",
  "xxxx.xxxx_xxxx(xxxx",
  "xxxx.xxxx_xxxx(xxxx(d",
  "xxxx.xxxx_xxxx(xxxx(x",
  "xxxx.xxxx_xxxx(xxxx(xxxx_xxx",
  "xxxx.xxxx_xxxx(xxxx->xxxx",
  "xxxx.xxxx_xxxx(xxxxXxXxxxx",
  "xxxx.xxxx_xxxx(xxxxXxxx",
  "xxxx.xxxx_xxxx(xxxx[x",
  "xxxx.xxxx_xxxx(xxxx[xxxx",
  "xxxx.xxxx_xxxx(xxxx_xxx",
  "xxxx.xxxx_xxxx(xxxx_xxxx",
  "xxxx.xxxx_xxxx(xxxx_xxxx(--x",
  "xxxx.xxxx_xxxx(xxxx_xxxx(d",
  "xxxx.xxxx_xxxx(xxxx_xxxx(x",
  "xxxx.xxxx_xxxx(xxxx_xxxx(xxxx",
  "xxxx.xxxx_xxxx(xxxx_xxxx(xxxxXxxx",
  "xxxx.xxxx_xxxx(xxxx_xxxx(xxxxXxxx[x",
  "xxxx.xxxx_xxxx(xxxx_xxxx(xxxx[x",
  "xxxx.xxxx_xxxx(xxxx_xxxx(xxxx[x][d",
  "xxxx.xxxx_xxxx(xxxx_xxxx(xxxx_x",
  "xxxx.xxxx_xxxx(xxxx_xxxx[x",
  "xxxx.xxxx_xxxx(xxxxd",
  "xxxx.xxxx_xxxx({-xxxx[x",
  "xxxx.xxxx_xxxx({x",
  "xxxx.xxxx_xxxx({x[x",
  "xxxx.xxxx_xxxx({x[xxxx",
  "xxxx.xxxx_xxxx({xxx_xxxx",
  "xxxx.xxxx_xxxx({xxxx",
  "xxxx.xxxx_xxxx.xxxx",
  "xxxx.xxxx_xxxx[x",
  "xxxx.xxxx_xxxx_xx_xxxx",
  "xxxx/(X",
  "xxxx/(x",
  "xxxx/dddd/",
  "xxxx://xxx.xxxx.xxx/XXXXdXdd/xxxx/XXXX",
  "xxxx://xxx.xxxx.xxx/XXXXdd/xxxx/XXXX",
  "xxxx://xxx.xxxx.xxx/XXXXdd/xxxx/XXXX/",
  "xxxx://xxx.xxxx.xxx/XXXXdd/xxxx/XXddXXXX",
  "xxxx://xxx.xxxx.xxx/XXXXdd/xxxx/Xd",
  "xxxx://xxx.xxxx.xxx/XXXXddX/xxxx/XXXX",
  "xxxx://xxx.xxxx.xxx/XXXdd/xxxx/XXX/",
  "xxxx://xxx.xxxx.xxx/XXXdd/xxxx/XXXX",
  "xxxx://xxx.xxxx.xxx/XXXdd/xxxx/XXXX/",
  "xxxx://xxx.xxxx.xxx/XXXddX/xxxx/XXX",
  "xxxx://xxx.xxxx.xxx/XXXddX/xxxx/XXXX",
  "xxxx://xxx.xxxx.xxx/XXXddX/xxxx/XXXX/",
  "xxxx://xxx.xxxx.xxx/xxxdd/xxxx/xxx/",
  "xxxx://xxx.xxxx.xxx/xxxdd/xxxx/xxxx",
  "xxxx://xxx.xxxx.xxx/xxxdd/xxxx/xxxx/",
  "xxxx://xxx.xxxx.xxx/xxxddx/xxxx/xxx",
  "xxxx://xxx.xxxx.xxx/xxxddx/xxxx/xxxx",
  "xxxx://xxx.xxxx.xxx/xxxddx/xxxx/xxxx/",
  "xxxx://xxx.xxxx.xxx/xxxx/d/ddd.xxx",
  "xxxx://xxx.xxxx.xxx/xxxx/dd/dddd.xxx",
  "xxxx://xxx.xxxx.xxx/xxxx/ddd/dddd.xxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxx-xxx-xx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxx-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-x-xxxx-xx-x-xxxx-xxxx-xx-x-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-x-xxxx-xx-xxx-xxxx-xx-x-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-x-xxxx-xxxx-x-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-x-xxxx-xxxx-x-xxxx-xxxx-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xx-xxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xxx-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xxx-xxxx-xxxx-xx-xxx-xxxx-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xxx-xxxx-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xxxx-x-xxxx-xxxx-xxxx-x-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xxxx-xxxx-xxxx-xxxx-x-xxxx-xxxx-xxxx",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx-xxxx/xxxx/xxxx/dddd",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx.xxx?xx=ddd",
  "xxxx://xxx.xxxx.xxx/xxxx/xxxx/xxxx-xxxx-dd/xxxx/xxxx-dddxxxx/",
  "xxxx://xxx.xxxx.xxx/xxxxdd/xxxx/xd",
  "xxxx://xxx.xxxx.xxx/xxxxdd/xxxx/xxddxxxx",
  "xxxx://xxx.xxxx.xxx/xxxxdd/xxxx/xxxx",
  "xxxx://xxx.xxxx.xxx/xxxxdd/xxxx/xxxx/",
  "xxxx://xxx.xxxx.xxx/xxxxddx/xxxx/xxxx",
  "xxxx://xxx.xxxx.xxx/xxxxdxdd/xxxx/xxxx",
  "xxxx://xxxx.xx/xxxx/xx/xxxx/xx_x",
  "xxxx://xxxx.xx/xxxx/xxxx/dddd",
  "xxxx://xxxx.xx/xxxx/xxxx/dddd/",
  "xxxx://xxxx.xxx.xxxx.xxx/xxxx/dd/dddd.xxx",
  "xxxx://xxxx.xxx.xxxx.xxx/xxxx/dd/xdddd.xxx",
  "xxxx://xxxx.xxx/xxxx/dddd/xxxx/X",
  "xxxx://xxxx.xxx/xxxx/dddd/xxxx/Xd",
  "xxxx://xxxx.xxx/xxxx/dddd/xxxx/x",
  "xxxx://xxxx.xxx/xxxx/dddd/xxxx/xd",
  "xxxx://xxxx.xxx/xxxx/xx-xxxx/xxxx/xxxx/xxxx/xxxx.xxx",
  "xxxx://xxxx.xxx/xxxx/xxxx/xxxx/dddd/ddd",
  "xxxx://xxxx.xxxx.xxx/xxxx/dddd",
  "xxxx://xxxx.xxxx.xxx/xxxx/ddxxxx",
  "xxxx://xxxx.xxxx.xxx/xxxx/dxxxx",
  "xxxx://xxxx.xxxx.xxx/xxxx/xx",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxx",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxxd",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxxx",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxxx/ddddxxd/ddddxdddd",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxxx/ddddxxd/ddddxddxxd",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxxx/ddddxxdd",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxxx/ddddxxdd/ddddx",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxxxd",
  "xxxx://xxxx.xxxx.xxx/xxxx/xxxxdd",
  "xxxx::XxxXxxxXxxXxxxXxxxx",
  "xxxx::XxxXxxxXxxxXxxxx",
  "xxxx::xxx_xxxx",
  "xxxx::xxxx",
  "xxxx:\\x",
  "xxxx<(X",
  "xxxx<(x",
  "xxxx<(xxxx",
  "xxxx<<\"#\\x",
  "xxxx<<\"+",
  "xxxx<<\"+\\x",
  "xxxx<<\"+\\x\\x\\x",
  "xxxx<<\"-d\\x",
  "xxxx<<\"/\"<<xxxx(x[x])<<\"\\x",
  "xxxx<<\"XXX",
  "xxxx<<\"XXXX",
  "xxxx<<\"XXXX\\x",
  "xxxx<<\"XX\\x",
  "xxxx<<\"Xx",
  "xxxx<<\"Xxx",
  "xxxx<<\"Xxxx",
  "xxxx<<\"Xxxxx",
  "xxxx<<\"Xxxxx\\x",
  "xxxx<<\"\\x",
  "xxxx<<\"d",
  "xxxx<<\"d\\x",
  "xxxx<<\"d\\x\\x",
  "xxxx<<\"xx",
  "xxxx<<\"xx\\x",
  "xxxx<<\"xxx",
  "xxxx<<\"xxxx",
  "xxxx<<\"xxxx\\x",
  "xxxx<<\"|\\x",
  "xxxx<<((x&dxx)==d||(x&dxx)==d||(x&dxx)==d||(x&dxx)==d?\"XX",
  "xxxx<<((x&dxx)==d||(x&dxx)==d||(x&dxx)==d||(x&dxx)==d?\"xx",
  "xxxx<<((x-d)/x+d)*dd<<\"\\x",
  "xxxx<<(x%x?\"XX\\x\":\"XXX\\x",
  "xxxx<<(x%x?\"xx\\x\":\"xxx\\x",
  "xxxx<<(x-d)/x+d<<xxxx",
  "xxxx<<(x<=x?\"XXXX\\x\":\"XXXX\\x",
  "xxxx<<(x<=x?\"xxxx\\x\":\"xxxx\\x",
  "xxxx<<(x?\"\":\"XX\")<<\"XXXX\\x",
  "xxxx<<(x?\"\":\"xx\")<<\"xxxx\\x",
  "xxxx<<(x?\"Xxx\\x\":\"Xx\\x",
  "xxxx<<(x?\"Xxxxx\\x\":\"Xxx",
  "xxxx<<(x?\"xxx\\x\":\"xx\\x",
  "xxxx<<(x?\"xxxx\\x\":\"xxx",
  "xxxx<<(x?\"xxxx\\x\":\"xxxx\\x",
  "xxxx<<(x[x].xxxx()>=x?x[x][x-d]:d)<<\"\\x",
  "xxxx<<(x[x]>x[x]?x.xxxx(x",
  "xxxx<<(x[x]?\"xxxx\\x\":\"xxxx\\x",
  "xxxx<<(x[xxxx(x)]==xxxx(x))<<\"\\x",
  "xxxx<<(xx?\"XX\\x\":\"XX\\x",
  "xxxx<<(xx?\"xx\\x\":\"xx\\x",
  "xxxx<<(xxx::xxxx",
  "xxxx<<(xxxx",
  "xxxx<<++x<<\"\\x",
  "xxxx<<-d<<xxxx",
  "xxxx<<X",
  "xxxx<<X<<\"\\x",
  "xxxx<<X<<\"\\x\\x",
  "xxxx<<X<<xxxx",
  "xxxx<<d<<xxxx",
  "xxxx<<x",
  "xxxx<<x*(x+d)/d",
  "xxxx<<x*d",
  "xxxx<<x*x*x-(x-d)*(x-d)*(x-d)<<\"\\x",
  "xxxx<<x+d",
  "xxxx<<x+x<<\"\\x",
  "xxxx<<x+x<<xxxx",
  "xxxx<<x.xxxx",
  "xxxx<<x.xxxx()<<\"\\x",
  "xxxx<<x.xxxx()<<xxxx",
  "xxxx<<x.xxxx(d,x+d)<<\"\\x",
  "xxxx<<x.xxxx_xx_xxx(x",
  "xxxx<<x/d",
  "xxxx<<x<<\",\"<<x<<\"\\x",
  "xxxx<<x<<\"\\x",
  "xxxx<<x<<\"\\x\\x",
  "xxxx<<x<<\"x\\x",
  "xxxx<<x<<xxxx",
  "xxxx<<x[x",
  "xxxx<<x[x*x+x",
  "xxxx<<x[x[x",
  "xxxx<<x[x[x][x]]<<xxxx",
  "xxxx<<x[x]+d",
  "xxxx<<x[x][dd]<<xxxx",
  "xxxx<<x[x][x-d]<<xxxx",
  "xxxx<<x[x][x]-d",
  "xxxx<<x[xxxx(x)]<<\"\\x",
  "xxxx<<xxxx",
  "xxxx<<xxxx(x",
  "xxxx<<xxxx(x[x",
  "xxxx<<xxxx<<xxxx(d",
  "xxxx<<xxxx<<xxxx(d)<<'$'<<x/dd<<xxxx",
  "xxxx<d",
  "xxxx<d>>x(d",
  "xxxx<d>{d",
  "xxxx<dd",
  "xxxx=[&](xxx",
  "xxxx>(d",
  "xxxx>(d*x",
  "xxxx>(dd",
  "xxxx>(ddd",
  "xxxx>(x",
  "xxxx>(x[x",
  "xxxx>(xx.xxxx",
  "xxxx>(xx[x",
  "xxxx>(xxx",
  "xxxx>(xxxx",
  "xxxx>(xxxx_xxxx",
  "xxxx>(xxxx_xxxx_xxxx",
  "xxxx>::xxx",
  "xxxx>::xxxx",
  "xxxx>::xxxx>(x",
  "xxxx>>&xxx",
  "xxxxX",
  "xxxxX(xxxxXxxxxX",
  "xxxxX++",
  "xxxxX--",
  "xxxxX->xxxx",
  "xxxxXXX(xx->xxxx",
  "xxxxXXX(xxx",
  "xxxxXXxxxx",
  "xxxxX[x",
  "xxxxX[xxxxXxxxx",
  "xxxxXx",
  "xxxxXx->xxxx",
  "xxxxXx.xxx",
  "xxxxXx.xxxx",
  "xxxxXxXxx",
  "xxxxXxXxxd",
  "xxxxXxXxxd.xxxx",
  "xxxxXxXxxd.xxxx(x",
  "xxxxXxXxxx",
  "xxxxXxXxxx(Xxxx",
  "xxxxXxXxxx(xxx",
  "xxxxXxXxxx(xxxx",
  "xxxxXxXxxx(xxxxXxxx",
  "xxxxXxXxxx.xxx",
  "xxxxXxXxxx.xxxx",
  "xxxxXxXxxx.xxxx(xxxx",
  "xxxxXxXxxxXxx",
  "xxxxXxXxxxXxx->xxxx",
  "xxxxXxXxxxXxxxx",
  "xxxxXxXxxxXxxxx--",
  "xxxxXxXxxxXxxxxXxxxx",
  "xxxxXxXxxxXxxxxXxxxx--",
  "xxxxXxXxxx[xxxx",
  "xxxxXxXxxxx",
  "xxxxXxXxxxx(XXX_XXXX",
  "xxxxXxXxxxx(Xxxx",
  "xxxxXxXxxxx(d",
  "xxxxXxXxxxx(xxx",
  "xxxxXxXxxxx(xxxx",
  "xxxxXxXxxxx(xxxxXxxx",
  "xxxxXxXxxxx(xxxxXxxxx",
  "xxxxXxXxxxx++",
  "xxxxXxXxxxx--",
  "xxxxXxXxxxx.xxx",
  "xxxxXxXxxxx.xxxx",
  "xxxxXxXxxxx.xxxx(xxxx",
  "xxxxXxXxxxxXxXxxx",
  "xxxxXxXxxxxXxXxxxx",
  "xxxxXxXxxxxXxXxxxx--",
  "xxxxXxXxxxxXxxxx",
  "xxxxXxXxxxxXxxxx++",
  "xxxxXxXxxxx[d",
  "xxxxXxXxxxx[d]++",
  "xxxxXxXxxxx[dd",
  "xxxxXxXxxxx[x",
  "xxxxXxXxxxx[xxxx",
  "xxxxXxXxxxx[xxxxXxxXxxxx.xxxx",
  "xxxxXxXxxxx[xxxx[x",
  "xxxxXxXxxxxd",
  "xxxxXx[XXXX",
  "xxxxXx[xxxx",
  "xxxxXx[xxxxXxxx",
  "xxxxXxx",
  "xxxxXxx(x",
  "xxxxXxx(xx",
  "xxxxXxx(xxx",
  "xxxxXxx(xxxXxxxx",
  "xxxxXxx).xxxx",
  "xxxxXxx--",
  "xxxxXxx->xxxx",
  "xxxxXxx->xxxx->xxxx",
  "xxxxXxx.xxx",
  "xxxxXxx.xxxx",
  "xxxxXxx.xxxx('X",
  "xxxxXxx.xxxx(x",
  "xxxxXxx.xxxx(xx",
  "xxxxXxx.xxxx(xx->xxxx",
  "xxxxXxx.xxxx(xxXxxx",
  "xxxxXxx.xxxx(xxxx",
  "xxxxXxx.xxxx(xxxxXxxx",
  "xxxxXxx.xxxx(xxxxXxxxx",
  "xxxxXxx.xxxx(xxxx_xxxx(xd",
  "xxxxXxx.xxxx(xxxx_xxxx(xxxx",
  "xxxxXxx.xxxx(xxxxd",
  "xxxxXxx.xxxx({d",
  "xxxxXxx.xxxx({x",
  "xxxxXxx.xxxx({xx->xxxx",
  "xxxxXxx.xxxx({xxxxXxxxXxxxx",
  "xxxxXxx.xxxx_xx_xxxx(x",
  "xxxxXxx.xxxx_xxxx(xxxxXxxxx",
  "xxxxXxx.xxxx_xxxx(xxxx_xxxx(d",
  "xxxxXxxXxXx(x",
  "xxxxXxxXxXx[d",
  "xxxxXxxXxXx[x",
  "xxxxXxxXxXx[xxxxXxxxx",
  "xxxxXxxXxx",
  "xxxxXxxXxxx",
  "xxxxXxxXxxx[XXX",
  "xxxxXxxXxxx[x",
  "xxxxXxxXxxx[xx",
  "xxxxXxxXxxxx",
  "xxxxXxxXxxxx.xxx_xxxx",
  "xxxxXxxXxxxx.xxxx_xxxx(xxxx",
  "xxxxXxxXxxxx.xxxx_xxxx(xxxxXxxxxXxx[xxxxXxxx",
  "xxxxXxxXxxxx[x",
  "xxxxXxx[d",
  "xxxxXxx[x",
  "xxxxXxx[xxXxxx",
  "xxxxXxx[xxxx",
  "xxxxXxx[xxxxXxxx",
  "xxxxXxx[xxxxXxxxx",
  "xxxxXxx[xxxxXxxxxXxxx",
  "xxxxXxx[xxxx]++",
  "xxxxXxx[xxxxd",
  "xxxxXxxx",
  "xxxxXxxx(XXX_XXXX",
  "xxxxXxxx(d",
  "xxxxXxxx(x",
  "xxxxXxxx(xx",
  "xxxxXxxx(xxx",
  "xxxxXxxx(xxx::xxxx",
  "xxxxXxxx(xxxX",
  "xxxxXxxx(xxxXxxxx",
  "xxxxXxxx(xxx_x",
  "xxxxXxxx(xxxx",
  "xxxxXxxx(xxxxXxx",
  "xxxxXxxx(xxxxXxxxx",
  "xxxxXxxx(xxxxXxxxx.xxxx",
  "xxxxXxxx(xxxx_x",
  "xxxxXxxx++",
  "xxxxXxxx--",
  "xxxxXxxx->xx",
  "xxxxXxxx->xxxx",
  "xxxxXxxx.xxx",
  "xxxxXxxx.xxxx",
  "xxxxXxxx.xxxx(-xxxx[x",
  "xxxxXxxx.xxxx(d",
  "xxxxXxxx.xxxx(xxxx",
  "xxxxXxxx.xxxx(xxxx[x",
  "xxxxXxxx.xxxx(xxxx_xxxx(xxxx_xxxx(x",
  "xxxxXxxx.xxxx_xxxx(d",
  "xxxxXxxx.xxxx_xxxx(xxxx",
  "xxxxXxxx.xxxx_xxxx(xxxxXxxx[xxxx",
  "xxxxXxxx.xxxx_xxxx(xxxxXxxxx",
  "xxxxXxxx.xxxx_xxxx(xxxxXxxxxXxxx(d",
  "xxxxXxxx.xxxx_xxxx(xxxx_xxxx(xxxxXxxx",
  "xxxxXxxxX",
  "xxxxXxxxXx",
  "xxxxXxxxXxXxxxx(Xxxx",
  "xxxxXxxxXxXxxxx(xxx",
  "xxxxXxxxXxXxxxx(xxxx",
  "xxxxXxxxXxXxxxxXxxx",
  "xxxxXxxxXxx",
  "xxxxXxxxXxxXxxx",
  "xxxxXxxxXxxx",
  "xxxxXxxxXxxx++",
  "xxxxXxxxXxxxx",
  "xxxxXxxxXxxxx(xx",
  "xxxxXxxxXxxxx(xxx",
  "xxxxXxxxXxxxx(xxxx",
  "xxxxXxxxXxxxx++",
  "xxxxXxxxXxxxxXxx",
  "xxxxXxxx[XXX_X",
  "xxxxXxxx[XXX_XXXX",
  "xxxxXxxx[d",
  "xxxxXxxx[d].xxxx(x",
  "xxxxXxxx[dddd",
  "xxxxXxxx[x",
  "xxxxXxxx[x].xxxx(dd",
  "xxxxXxxx[x].xxxx_xxxx(x",
  "xxxxXxxx[x][x",
  "xxxxXxxx[x][xxxxXxxxx++",
  "xxxxXxxx[xxxx",
  "xxxxXxxx[xxxxXxx[xxxxXxxx]].xxxx_xxxx(xxxxXxx[xxXxxx",
  "xxxxXxxx[xxxxXxx[xxxxd",
  "xxxxXxxx[xxxxXxx[xxxxd]]++",
  "xxxxXxxx[xxxxXxxx",
  "xxxxXxxx[xxxxXxxx].xxxx_xxxx(xxxxXxxx",
  "xxxxXxxx[xxxxXxxxx",
  "xxxxXxxx[xxxxXxxxx].xxxx_xxxx(xxxx[x[x",
  "xxxxXxxx[xxxx].xxx_xxxx",
  "xxxxXxxx[xxxx].xxxx",
  "xxxxXxxx[xxxx].xxxx_xxxx(d",
  "xxxxXxxx[xxxx][x",
  "xxxxXxxx[xxxx][xxxxXxxx[xxxx].xxxx",
  "xxxxXxxx[xxxx][xxxxXxxxx]++",
  "xxxxXxxxx",
  "xxxxXxxxx(-d",
  "xxxxXxxxx(X",
  "xxxxXxxxx(_xxxx",
  "xxxxXxxxx(d",
  "xxxxXxxxx(dd",
  "xxxxXxxxx(ddd",
  "xxxxXxxxx(x",
  "xxxxXxxxx(x.xxxx(d",
  "xxxxXxxxx(xXxxxx",
  "xxxxXxxxx(xx",
  "xxxxXxxxx(xxx",
  "xxxxXxxxx(xxxXxxxx",
  "xxxxXxxxx(xxxx",
  "xxxxXxxxx(xxxx::XxxXxxxXxxXxxxXxxxx",
  "xxxxXxxxx(xxxxXxXxxxx",
  "xxxxXxxxx(xxxxXxxx",
  "xxxxXxxxx(xxxxXxxxx",
  "xxxxXxxxx(xxxxXxxxx.xxxx",
  "xxxxXxxxx++",
  "xxxxXxxxx--",
  "xxxxXxxxx.xxx",
  "xxxxXxxxx.xxx_xxxx",
  "xxxxXxxxx.xxxx",
  "xxxxXxxxx.xxxx()[x",
  "xxxxXxxxx.xxxx()[xxxxXxxxx[x].xxxx",
  "xxxxXxxxx.xxxx(Xxxx(xxxx",
  "xxxxXxxxx.xxxx(d",
  "xxxxXxxxx.xxxx(x",
  "xxxxXxxxx.xxxx(xx",
  "xxxxXxxxx.xxxx(xxxx",
  "xxxxXxxxx.xxxx(xxxxXxxx",
  "xxxxXxxxx.xxxx(xxxxXxxx[xxxx].xxxx",
  "xxxxXxxxx.xxxx(xxxxXxxxx",
  "xxxxXxxxx.xxxx(xxxxXxxxx.xxxx",
  "xxxxXxxxx.xxxx(xxxxXxxxx[xxxxXxXxxxx",
  "xxxxXxxxx.xxxx(xxxx[x",
  "xxxxXxxxx.xxxx(xxxx_xxxx((xxxx[xxxxXxxxx",
  "xxxxXxxxx.xxxx(xxxx_xxxx(xxxxXxxxx",
  "xxxxXxxxx.xxxx({d",
  "xxxxXxxxx.xxxx({xxxXxxx",
  "xxxxXxxxx.xxxx({xxxxXxxx",
  "xxxxXxxxx.xxxx({xxxx[xxxx.xx",
  "xxxxXxxxx.xxxx_xxxx(x",
  "xxxxXxxxx.xxxx_xxxx(xx(x",
  "xxxxXxxxx.xxxx_xxxx(xx->xxxx",
  "xxxxXxxxx.xxxx_xxxx(xxxx",
  "xxxxXxxxx.xxxx_xxxx(xxxxXx->xxxx",
  "xxxxXxxxx.xxxx_xxxx(xxxxXxxxx[xxxxXxxxx",
  "xxxxXxxxxX",
  "xxxxXxxxxXx",
  "xxxxXxxxxXx(xxxx",
  "xxxxXxxxxXxXxx",
  "xxxxXxxxxXxXxxd",
  "xxxxXxxxxXxXxxd[x",
  "xxxxXxxxxXxXxxxx",
  "xxxxXxxxxXxXxxxxd",
  "xxxxXxxxxXxx",
  "xxxxXxxxxXxx.xxxx(xxxxXxxx",
  "xxxxXxxxxXxxXxxxXxxx",
  "xxxxXxxxxXxxXxxxx(x",
  "xxxxXxxxxXxxXxxxx[x",
  "xxxxXxxxxXxxXxxxx[xxxXxxxx].xxxx",
  "xxxxXxxxxXxxXxxxx[xxxxXxxxx].xxxx",
  "xxxxXxxxxXxx[xxxxXxxx",
  "xxxxXxxxxXxxx",
  "xxxxXxxxxXxxx(Xxxx",
  "xxxxXxxxxXxxx(XxxxxXxxxXxxx",
  "xxxxXxxxxXxxx(d",
  "xxxxXxxxxXxxx(xxx",
  "xxxxXxxxxXxxx(xxxx",
  "xxxxXxxxxXxxx(xxxx->xxxx",
  "xxxxXxxxxXxxx(xxxxXxxx[xxxx",
  "xxxxXxxxxXxxx(xxxx_x",
  "xxxxXxxxxXxxxx",
  "xxxxXxxxxXxxxx(d",
  "xxxxXxxxxXxxxx(x",
  "xxxxXxxxxXxxxx(xxx",
  "xxxxXxxxxXxxxx(xxxx",
  "xxxxXxxxxXxxxx(xxxxXxx",
  "xxxxXxxxxXxxxx++",
  "xxxxXxxxxXxxxxXxxxXxxxx",
  "xxxxXxxxxXxxxxXxxxx",
  "xxxxXxxxxXxxxxXxxxx(d",
  "xxxxXxxxxXxxxxXxxxx(xxx",
  "xxxxXxxxxXxxxxXxxxx(xxxx",
  "xxxxXxxxxXxxxx[x",
  "xxxxXxxxxXxxxx[xxxxX",
  "xxxxXxxxxXxxxx[xxxxXxxxx[x",
  "xxxxXxxxxXxxxxd(x",
  "xxxxXxxxxXxxxxd(xxx",
  "xxxxXxxxxXxxxxd(xxxx",
  "xxxxXxxxx[(d",
  "xxxxXxxxx[(xxxxXxxxx",
  "xxxxXxxxx[XXX_XXXX",
  "xxxxXxxxx[d",
  "xxxxXxxxx[d].xxxx",
  "xxxxXxxxx[d].xxxx_xxxx(d",
  "xxxxXxxxx[d][d",
  "xxxxXxxxx[d][x",
  "xxxxXxxxx[d][xxxxXxxx",
  "xxxxXxxxx[d][xxxxXxxxx]++",
  "xxxxXxxxx[dddd",
  "xxxxXxxxx[x",
  "xxxxXxxxx[x-d",
  "xxxxXxxxx[xXxxxx",
  "xxxxXxxxx[x]++",
  "xxxxXxxxx[x].xxxx",
  "xxxxXxxxx[x][x",
  "xxxxXxxxx[xxx",
  "xxxxXxxxx[xxx][xxx",
  "xxxxXxxxx[xxx][xxx].xxxx",
  "xxxxXxxxx[xxxx",
  "xxxxXxxxx[xxxx.xx",
  "xxxxXxxxx[xxxxXxXxxxx",
  "xxxxXxxxx[xxxxXxxx",
  "xxxxXxxxx[xxxxXxxxx",
  "xxxxXxxxx[xxxxXxxxxXxXxxxx",
  "xxxxXxxxx[xxxxXxxxx][d",
  "xxxxXxxxx[xxxxXxxxx][d]][x",
  "xxxxXxxxx[xxxx]++",
  "xxxxXxxxx[xxxx].xxxx",
  "xxxxXxxxx[xxxx][xxxx",
  "xxxxXxxxxd",
  "xxxxXxxxxd(xxxxXxXxxxxd",
  "xxxxXxxxxd[x",
  "xxxx[(d",
  "xxxx[(x",
  "xxxx[(xxxx",
  "xxxx[++xxx",
  "xxxx[X",
  "xxxx[X+d][X+d",
  "xxxx[XXX",
  "xxxx[XXXX",
  "xxxx[XXXX][XXXX",
  "xxxx[XXX_X",
  "xxxx[XXX_XXXX",
  "xxxx[XXX_XXXX][d",
  "xxxx[X][X",
  "xxxx[X][d",
  "xxxx[X][x",
  "xxxx[][d",
  "xxxx[_xxxx[xx",
  "xxxx[d",
  "xxxx[d*X",
  "xxxx[d*x",
  "xxxx[d*x+d",
  "xxxx[d*x+d].xxx",
  "xxxx[d*x].xxx",
  "xxxx[d]++",
  "xxxx[d].xxx",
  "xxxx[d].xxxx",
  "xxxx[d].xxxx(x",
  "xxxx[d].xxxx_xxxx(d",
  "xxxx[d].xxxx_xxxx(x",
  "xxxx[d].xxxx_xxxx(xxxx",
  "xxxx[d]=d",
  "xxxx[d][d",
  "xxxx[d][x",
  "xxxx[d][x]=xxx(d,x[x-d]+d",
  "xxxx[d][xxxx",
  "xxxx[d][xxxx]++",
  "xxxx[dd",
  "xxxx[ddd",
  "xxxx[ddd][ddd][ddd",
  "xxxx[dddd",
  "xxxx[dddd][dddd",
  "xxxx[x",
  "xxxx[x*d",
  "xxxx[x*d].xxx",
  "xxxx[x++",
  "xxxx[x+d",
  "xxxx[x+d].xxxx",
  "xxxx[x+d][x+d",
  "xxxx[x+x",
  "xxxx[x--",
  "xxxx[x-d",
  "xxxx[x-d].xxx",
  "xxxx[x-d].xxxx",
  "xxxx[x-d].xxxx_xxxx(x",
  "xxxx[x-d][x",
  "xxxx[x-d][x-d",
  "xxxx[x.x",
  "xxxx[x.xx",
  "xxxx[x.xxxx",
  "xxxx[x[++x)]++",
  "xxxx[x[--x",
  "xxxx[x[--x]]++",
  "xxxx[x[--x]]--",
  "xxxx[x[x",
  "xxxx[x[x++",
  "xxxx[x[x++]]--",
  "xxxx[x[xxxx]].xxxx",
  "xxxx[x]).xxxx",
  "xxxx[x]++",
  "xxxx[x]--",
  "xxxx[x]->xxxx.xxxx",
  "xxxx[x]->xxxx.xxxx(x",
  "xxxx[x].x",
  "xxxx[x].xd",
  "xxxx[x].xxx",
  "xxxx[x].xxx<d",
  "xxxx[x].xxxx",
  "xxxx[x].xxxx();x++",
  "xxxx[x].xxxx(dd",
  "xxxx[x].xxxx(x",
  "xxxx[x].xxxx(xxxx",
  "xxxx[x].xxxx_xxxx(x",
  "xxxx[x]=xxxx[x-d]*xxx[x]%X",
  "xxxx[x]=xxxx[x-d]*xxx[x]%x",
  "xxxx[x][d",
  "xxxx[x][d].xxxx",
  "xxxx[x][x",
  "xxxx[x][x+d]-d",
  "xxxx[x][x]=xxxx[x-d][xxxx[x-d][x",
  "xxxx[x][x][x",
  "xxxx[x][xd",
  "xxxx[x][xxx",
  "xxxx[x][xxxx",
  "xxxx[x][xxxx++",
  "xxxx[x][xxxx_xxxx",
  "xxxx[x]|",
  "xxxx[x_xxxx",
  "xxxx[x_xxxx].xxxx_xxxx(x_xxxx",
  "xxxx[xd",
  "xxxx[xd]++",
  "xxxx[xx",
  "xxxx[xx->xxxx",
  "xxxx[xx._xxxx",
  "xxxx[xx[x",
  "xxxx[xx].xxx",
  "xxxx[xx].xxxx",
  "xxxx[xx].xxxx_xxxx(x",
  "xxxx[xx].xxxx_xxxx(x[x][d",
  "xxxx[xx].xxxx_xxxx({xxxx",
  "xxxx[xx][xx",
  "xxxx[xxx",
  "xxxx[xxx--",
  "xxxx[xxx<d>(x[x",
  "xxxx[xxxX",
  "xxxx[xxxX][xxxX",
  "xxxx[xxxX][xxxxX",
  "xxxx[xxxXxx++",
  "xxxx[xxxXxx][xxxXxx",
  "xxxx[xxxXxxx].xxxx_xxxx({xxxxXxxx",
  "xxxx[xxxXxxxx",
  "xxxx[xxx][xxx",
  "xxxx[xxx][xxx].xxxx",
  "xxxx[xxx][xxxx",
  "xxxx[xxx][xxxx_xx_xxxx",
  "xxxx[xxx_x",
  "xxxx[xxx_xxxx",
  "xxxx[xxx_xxxx].xxxx",
  "xxxx[xxx_xxxx][d",
  "xxxx[xxxd][xxxd",
  "xxxx[xxxx",
  "xxxx[xxxx(x",
  "xxxx[xxxx++",
  "xxxx[xxxx.x][xxxx.x",
  "xxxx[xxxx.xx",
  "xxxx[xxxx.xxx",
  "xxxx[xxxx.xxxx",
  "xxxx[xxxx.xxxx][x",
  "xxxx[xxxx.xxxx][xxxx_xxxx",
  "xxxx[xxxxX",
  "xxxx[xxxxX][xxxxX",
  "xxxx[xxxxXxx",
  "xxxx[xxxxXxx[xxxxXxxx",
  "xxxx[xxxxXxx].xxx",
  "xxxx[xxxxXxx][xxxxXxx",
  "xxxx[xxxxXxxx",
  "xxxx[xxxxXxxxX",
  "xxxx[xxxxXxxx].xxxx",
  "xxxx[xxxxXxxx].xxxx(xxxx",
  "xxxx[xxxxXxxx].xxxx_xxxx(xxxxXxxx",
  "xxxx[xxxxXxxx].xxxx_xxxx({xxxXxxx",
  "xxxx[xxxxXxxx][xxxxXxxx",
  "xxxx[xxxxXxxxx",
  "xxxx[xxxxXxxxxXxx[xxxxXxxx]].xxxx_xxxx(xxxxXxxxx",
  "xxxx[xxxxXxxxxXxxxx",
  "xxxx[xxxxXxxxxXxxxx].xxx",
  "xxxx[xxxxXxxxxXxxxx].xxxx",
  "xxxx[xxxxXxxxx[x",
  "xxxx[xxxxXxxxx[x]].xxx",
  "xxxx[xxxxXxxxx[x]].xxxx",
  "xxxx[xxxxXxxxx[xxxxXxxxx]][xxxxXxxxx[xxxxXxxxx",
  "xxxx[xxxxXxxxx[xxxxXxxxx]][xxxxXxxxx[xxxxXxxxx]].xxxx",
  "xxxx[xxxxXxxxx].xxXxx",
  "xxxx[xxxxXxxxx].xxxx",
  "xxxx[xxxxXxxxx].xxxx.xxxx_xxxx(xxxxXxxxx",
  "xxxx[xxxxXxxxx][xxxx._xxxxXxxxXx].xxxx",
  "xxxx[xxxx[x",
  "xxxx[xxxx[x].x].xxxx_xxxx(x",
  "xxxx[xxxx[x].xxxx][xxxx[x].xxxx",
  "xxxx[xxxx[x][d].xxxx][d",
  "xxxx[xxxx[x][x",
  "xxxx[xxxx[x][x]]++",
  "xxxx[xxxx[x]].xxx",
  "xxxx[xxxx[x]].xxxx",
  "xxxx[xxxx[xxxx",
  "xxxx[xxxx[xxxx[x[x]]]].xxxx_xxxx(xxxx[xxxx[x[x",
  "xxxx[xxxx[xxxx]].xxxx_xxxx(xxxx",
  "xxxx[xxxx[xxxx]].xxxx_xxxx(xxxx[xxxx",
  "xxxx[xxxx[xxxx]][xxxx[xxxx",
  "xxxx[xxxx[xxxx]][xxxx[xxxx]].xxxx",
  "xxxx[xxxx[xxxxd",
  "xxxx[xxxx[xxxxd]]++",
  "xxxx[xxxx]++",
  "xxxx[xxxx].xxx",
  "xxxx[xxxx].xxx_xxxx",
  "xxxx[xxxx].xxxx",
  "xxxx[xxxx].xxxx(x",
  "xxxx[xxxx].xxxx(xxxx",
  "xxxx[xxxx].xxxx(xxxxXxxx",
  "xxxx[xxxx].xxxx(xxxxXxxxx",
  "xxxx[xxxx].xxxx.xxxx_xxxx(xxxXxxxx",
  "xxxx[xxxx].xxxx.xxxx_xxxx(xxxx",
  "xxxx[xxxx].xxxx_xxxx(d",
  "xxxx[xxxx].xxxx_xxxx(x",
  "xxxx[xxxx].xxxx_xxxx(xxxx",
  "xxxx[xxxx].xxxx_xxxx(xxxx[x[x",
  "xxxx[xxxx].xxxx_xxxx(xxxx_xxxx",
  "xxxx[xxxx].xxxx_xxxx({xx",
  "xxxx[xxxx].xxxx_xxxx({xxxx",
  "xxxx[xxxx][d",
  "xxxx[xxxx][d].xxxx",
  "xxxx[xxxx][d]][x",
  "xxxx[xxxx][x",
  "xxxx[xxxx][xxx",
  "xxxx[xxxx][xxx][xxxx_xxx",
  "xxxx[xxxx][xxxx",
  "xxxx[xxxx][xxxx._xxxx].xxxx",
  "xxxx[xxxx][xxxxXxxxx",
  "xxxx[xxxx][xxxx[xxxx].xxxx",
  "xxxx[xxxx][xxxx]++",
  "xxxx[xxxx][xxxx]--",
  "xxxx[xxxx_x][xxxx_x",
  "xxxx[xxxx_xxx++",
  "xxxx[xxxx_xxxx",
  "xxxx[xxxx_xxxx++",
  "xxxx[xxxx_xxxx[d",
  "xxxx[xxxx_xxxx[x",
  "xxxx[xxxx_xxxx[x]][xxxx_xxxx[x",
  "xxxx[xxxx_xxxx].xxxx_xxxx(xxxx",
  "xxxx[xxxx_xxxx][d",
  "xxxx[xxxx_xxxx][x",
  "xxxx[xxxx_xxxx][xxxx",
  "xxxx[xxxx_xxxx][xxxx_xxxx",
  "xxxx[xxxxd",
  "xxxx[xxxxd].xxxx_xxxx(xxxxd",
  "xxxx\\x",
  "xxxx].xxxx(d",
  "xxxx].xxxx_xx_xxx(xxxx",
  "xxxx].xxxx_xx_xxx(xxxxXxxxx",
  "xxxx^(xx",
  "xxxx_(X",
  "xxxx_(x",
  "xxxx_(xxxx",
  "xxxx_.xxxx(xx->xxxx.xx",
  "xxxx_.xxxx(xxxx",
  "xxxx_[x",
  "xxxx_[xx].xxxx_xxxx(xxxx",
  "xxxx_[xxxx].xxx",
  "xxxx_[xxxx].xxxx",
  "xxxx_[xxxx].xxxx_xxxx(xx",
  "xxxx_d",
  "xxxx_d(x",
  "xxxx_d[xxxx_xxxx[x",
  "xxxx_x",
  "xxxx_x(x",
  "xxxx_x(xxxx",
  "xxxx_x(xxxxXxx",
  "xxxx_x(xxxx_x",
  "xxxx_x(xxxx_xxxx",
  "xxxx_x.xxx",
  "xxxx_x.xxxx",
  "xxxx_x.xxxx_xxxx(d",
  "xxxx_x.xxxx_xxxx(x",
  "xxxx_x[x",
  "xxxx_xx",
  "xxxx_xx++",
  "xxxx_xx[x",
  "xxxx_xx[xxxx",
  "xxxx_xx_X_xxxx",
  "xxxx_xx_Xx",
  "xxxx_xx_x_xxxx",
  "xxxx_xx_xx",
  "xxxx_xx_xxx",
  "xxxx_xx_xxx_xxxx",
  "xxxx_xx_xxxx",
  "xxxx_xx_xxxx--",
  "xxxx_xx_xxxx-d",
  "xxxx_xx_xxxx.xxxx_xxxx(x.xxxx_xx_xxxx(x",
  "xxxx_xx_xxxx_xxx",
  "xxxx_xx_xxxx_xxx][x-d",
  "xxxx_xx_xxxx_xxxx",
  "xxxx_xx_xxxx_xxxx--",
  "xxxx_xx_xxxxd",
  "xxxx_xxx",
  "xxxx_xxx(d",
  "xxxx_xxx(x",
  "xxxx_xxx(x[x",
  "xxxx_xxx(xx",
  "xxxx_xxx(xxx",
  "xxxx_xxx(xxxx",
  "xxxx_xxx(xxxx_xxxx",
  "xxxx_xxx.xxx",
  "xxxx_xxx.xxxx",
  "xxxx_xxx.xxxx(x",
  "xxxx_xxx.xxxx(xx",
  "xxxx_xxx.xxxx(xxxx[x",
  "xxxx_xxx.xxxx_xx_xxx(x",
  "xxxx_xxx.xxxx_xx_xxxx(xxxx_xxx.xxxx_xx_xxx(xxxx[x",
  "xxxx_xxx[dd",
  "xxxx_xxx[x",
  "xxxx_xxx[xxxx",
  "xxxx_xxx[xxxx_xxxx]++",
  "xxxx_xxx_x",
  "xxxx_xxx_xxxx",
  "xxxx_xxx_xxxx_xxxx",
  "xxxx_xxx_xxxx_xxxx++",
  "xxxx_xxxx",
  "xxxx_xxxx(\"Xxxxx",
  "xxxx_xxxx(\"xxxx",
  "xxxx_xxxx(&x[x",
  "xxxx_xxxx(&x[x],&x[d*x+d],x[x-d]+x",
  "xxxx_xxxx('+",
  "xxxx_xxxx('-",
  "xxxx_xxxx('/",
  "xxxx_xxxx(-XXX",
  "xxxx_xxxx(-xxx",
  "xxxx_xxxx(X",
  "xxxx_xxxx(XXX",
  "xxxx_xxxx(XxxXxxxx",
  "xxxx_xxxx(d",
  "xxxx_xxxx(dd",
  "xxxx_xxxx(x",
  "xxxx_xxxx(x-d",
  "xxxx_xxxx(x.xxxx",
  "xxxx_xxxx(x.xxxx()[x",
  "xxxx_xxxx(x[d",
  "xxxx_xxxx(x[x]*x",
  "xxxx_xxxx(x[x]*xd",
  "xxxx_xxxx(x[x].xxxx",
  "xxxx_xxxx(xd.xxxx",
  "xxxx_xxxx(xx",
  "xxxx_xxxx(xx(x",
  "xxxx_xxxx(xx[x",
  "xxxx_xxxx(xxx",
  "xxxx_xxxx(xxx.xxxx",
  "xxxx_xxxx(xxx<d>(xxxx",
  "xxxx_xxxx(xxx<d>(xxxxXxxxx",
  "xxxx_xxxx(xxx_x",
  "xxxx_xxxx(xxxx",
  "xxxx_xxxx(xxxx(xxxxXxxxx[d",
  "xxxx_xxxx(xxxx(xxxx[d",
  "xxxx_xxxx(xxxx.xxxx",
  "xxxx_xxxx(xxxx.xxxx()[x",
  "xxxx_xxxx(xxxxXxXxxxx",
  "xxxx_xxxx(xxxxXxxxx.xxxx",
  "xxxx_xxxx(xxxxXxxxx.xxxx()[x",
  "xxxx_xxxx(xxxx[x][d].xxxx",
  "xxxx_xxxx(xxxx[xxxxXxx].xxxx",
  "xxxx_xxxx(xxxx[xxxx].xxxx",
  "xxxx_xxxx(xxxx_xx",
  "xxxx_xxxx(xxxx_xx_xxxx",
  "xxxx_xxxx(xxxx_xxx[x",
  "xxxx_xxxx(xxxx_xxxx",
  "xxxx_xxxx(xxxx_xxxx.xxxx",
  "xxxx_xxxx(xxxx_xxxx_xxxx[xxxx].xxxx",
  "xxxx_xxxx(xxxx_xxxx_xxxx[xxxx_xxxx].xxxx",
  "xxxx_xxxx).xxxx",
  "xxxx_xxxx++",
  "xxxx_xxxx--",
  "xxxx_xxxx->xx",
  "xxxx_xxxx->xxxx.xxxx",
  "xxxx_xxxx->xxxx.xxxx(x",
  "xxxx_xxxx->xxxx.xxxx(xxxx_xxxx",
  "xxxx_xxxx.xxx",
  "xxxx_xxxx.xxx_xxxx",
  "xxxx_xxxx.xxxx",
  "xxxx_xxxx.xxxx().xxx<d",
  "xxxx_xxxx.xxxx(x",
  "xxxx_xxxx.xxxx(xx",
  "xxxx_xxxx.xxxx(xxx",
  "xxxx_xxxx.xxxx(xxxx",
  "xxxx_xxxx.xxxx(xxxx_x",
  "xxxx_xxxx.xxxx(xxxx_xx_xxxx",
  "xxxx_xxxx.xxxx(xxxx_xxx",
  "xxxx_xxxx.xxxx(xxxx_xxxx(x",
  "xxxx_xxxx.xxxx(xxxx_xxxx_xxxx",
  "xxxx_xxxx.xxxx({x",
  "xxxx_xxxx.xxxx({xxxx_xxxx",
  "xxxx_xxxx.xxxx_xxxx(x",
  "xxxx_xxxx.xxxx_xxxx(x[x",
  "xxxx_xxxx.xxxx_xxxx(xxxX[d",
  "xxxx_xxxx.xxxx_xxxx(xxxX[xxxx",
  "xxxx_xxxx.xxxx_xxxx(xxxx",
  "xxxx_xxxx.xxxx_xxxx(xxxx[d",
  "xxxx_xxxx.xxxx_xxxx(xxxx[xxxx",
  "xxxx_xxxx.xxxx_xxxx(xxxx[xxxx_xxx",
  "xxxx_xxxx.xxxx_xxxx(xxxx_xxxx",
  "xxxx_xxxx.xxxx_xxxx(xxxx_xxxx(xxxx_xxxx",
  "xxxx_xxxx.xxxx_xxxx(xxxx_xxxx[xxxx",
  "xxxx_xxxx.xxxx_xxxx({xxxx(xxxx[x].xxxx",
  "xxxx_xxxx[X",
  "xxxx_xxxx[XXXX][XXXX",
  "xxxx_xxxx[d",
  "xxxx_xxxx[d][x",
  "xxxx_xxxx[x",
  "xxxx_xxxx[x[x",
  "xxxx_xxxx[x].xxx",
  "xxxx_xxxx[x].xxxx",
  "xxxx_xxxx[x].xxxx_xxxx(x",
  "xxxx_xxxx[x][d",
  "xxxx_xxxx[x][x",
  "xxxx_xxxx[x][xxxx[x",
  "xxxx_xxxx[x][xxxx_xxxx",
  "xxxx_xxxx[x_xxxx].xxxx_xxxx(x_xxxx",
  "xxxx_xxxx[xxx][xxx",
  "xxxx_xxxx[xxx_xxxx",
  "xxxx_xxxx[xxx_xxxx].xxxx",
  "xxxx_xxxx[xxxx",
  "xxxx_xxxx[xxxx[d",
  "xxxx_xxxx[xxxx[x",
  "xxxx_xxxx[xxxx[x][d",
  "xxxx_xxxx[xxxx[x][d]].xxxx(xxxx[x][d",
  "xxxx_xxxx[xxxx[x]][x",
  "xxxx_xxxx[xxxx[xxxx",
  "xxxx_xxxx[xxxx]--",
  "xxxx_xxxx[xxxx]->xxxx.xxxx",
  "xxxx_xxxx[xxxx]->xxxx.xxxx(xxxx_xxxx",
  "xxxx_xxxx[xxxx].xxxx(xxxx_xxxx",
  "xxxx_xxxx[xxxx].xxxx_xxxx(xxxx",
  "xxxx_xxxx[xxxx][x",
  "xxxx_xxxx[xxxx][xxxx",
  "xxxx_xxxx[xxxx_xxx",
  "xxxx_xxxx[xxxx_xxxx",
  "xxxx_xxxx[xxxx_xxxx[d",
  "xxxx_xxxx[xxxx_xxxx]++",
  "xxxx_xxxx[xxxx_xxxx]->xxxx.xxxx",
  "xxxx_xxxx[xxxx_xxxx]->xxxx.xxxx(xxxx_xxxx",
  "xxxx_xxxx[xxxx_xxxx].xxxx",
  "xxxx_xxxx[xxxx_xxxx].xxxx(xxxx_xx",
  "xxxx_xxxx[xxxx_xxxx].xxxx(xxxx_xxxx[xxxx_xxxx].xxxx",
  "xxxx_xxxx[xxxx_xxxx_xxxx[x",
  "xxxx_xxxx[xxxx_xxxx_xxxx[xxxx",
  "xxxx_xxxx_x",
  "xxxx_xxxx_x(xxxxd",
  "xxxx_xxxx_x++",
  "xxxx_xxxx_xx_xxx",
  "xxxx_xxxx_xx_xxx++",
  "xxxx_xxxx_xx_xxxx",
  "xxxx_xxxx_xxx",
  "xxxx_xxxx_xxx(xxxx",
  "xxxx_xxxx_xxx(xxxx_xx_xxxx",
  "xxxx_xxxx_xxx++",
  "xxxx_xxxx_xxx.xxxx_xxxx(xxxx_xxx[xxxx++",
  "xxxx_xxxx_xxx_xxxx",
  "xxxx_xxxx_xxxx",
  "xxxx_xxxx_xxxx(XxxXxxxx",
  "xxxx_xxxx_xxxx(x",
  "xxxx_xxxx_xxxx(xxx",
  "xxxx_xxxx_xxxx(xxxx",
  "xxxx_xxxx_xxxx(xxxx_xxxx_xxxx",
  "xxxx_xxxx_xxxx++",
  "xxxx_xxxx_xxxx--",
  "xxxx_xxxx_xxxx.xxxx",
  "xxxx_xxxx_xxxx.xxxx(xxxx_xx_xxxx",
  "xxxx_xxxx_xxxx.xxxx_xxxx(d",
  "xxxx_xxxx_xxxx[x",
  "xxxx_xxxx_xxxx[x].xxx",
  "xxxx_xxxx_xxxx[x].xxxx_xxxx({xxxx_xxxx[x",
  "xxxx_xxxx_xxxx[xxxx[xxxx",
  "xxxx_xxxx_xxxx[xxxx].xxx",
  "xxxx_xxxx_xxxx[xxxx].xxxx_xxxx(xxxx",
  "xxxx_xxxx_xxxx[xxxx_xxxx",
  "xxxx_xxxx_xxxx[xxxx_xxxx].xxx",
  "xxxx_xxxx_xxxx[xxxx_xxxx].xxxx",
  "xxxx_xxxx_xxxx_xxx",
  "xxxx_xxxx_xxxx_xxx_xx_xxx_xxxx(XxxXxxxx",
  "xxxx_xxxx_xxxx_xxx_xx_xxx_xxxx(xxx",
  "xxxx_xxxx_xxxx_xxx_xx_xxx_xxxx(xxxx",
  "xxxx_xxxx_xxxx_xxxx(x",
  "xxxx_xxxx_xxxx_xxxx(xxx",
  "xxxx_xxxx_xxxx_xxxx(xxxx",
  "xxxx_xxxx_xxxx_xxxx_xxxx",
  "xxxx_xxxx_xxxx_xxxx_xxxx(x",
  "xxxx_xxxx_xxxx_xxxx_xxxx(xxx",
  "xxxx_xxxx_xxxx_xxxx_xxxx(xxxx",
  "xxxx_xxxx_xxxxd(x",
  "xxxx_xxxx_xxxxd(x[x",
  "xxxx_xxxx_xxxxd(xxx",
  "xxxx_xxxx_xxxxd(xxxx",
  "xxxx_xxxx_xxxxd(xxxx[xxxx",
  "xxxx_xxxx_xxxxd(xxxx_xxxx",
  "xxxx_xxxxd(XxxXxxxx",
  "xxxx_xxxxd(xxx",
  "xxxx_xxxxd(xxxx",
  "xxxx_xxxx{d",
  "xxxxd",
  "xxxxd(x",
  "xxxxd(xxx",
  "xxxxd(xxxx",
  "xxxxd(xxxxd",
  "xxxxd(xxxxdXxxx",
  "xxxxd(xxxxdxxxx",
  "xxxxd++",
  "xxxxd.xxx",
  "xxxxd.xxxx",
  "xxxxd.xxxx(x",
  "xxxxd.xxxx(xxxxXxxxxd[x",
  "xxxxd.xxxx(xxxxd[x",
  "xxxxdX(x",
  "xxxxdX(xxxx",
  "xxxxdXxxx",
  "xxxxdXxxxx",
  "xxxxd[X+d",
  "xxxxd[d",
  "xxxxd[x",
  "xxxxd[x+d",
  "xxxxd[x].xxxx_xxxx(x",
  "xxxxd[xxx(d",
  "xxxxd[xxxx",
  "xxxxd[xxxxdXxxxx",
  "xxxxd[xxxxdXxxxx++",
  "xxxxd[xxxxdxxxx",
  "xxxxd[xxxxdxxxx++",
  "xxxxdx(x",
  "xxxxdx(xxxx",
  "xxxxdxxxx",
  "xxxxdxxxx(xxx",
  "xxxxdxxxx(xxxx",
  "xxxxdxxxx.xxxx_xxxx(xxxx",
  "xxxxdxxxx[xd",
  "xxxxdxxxx[xxxx",
  "xxxxdxxxx[xxxxXxxxx",
  "xxxxdxxxx](xx",
  "xxxx{xxxx._xxxx",
  "xxxx{{-d",
  "xxxx~",
  "xxxx\u2019",
  "xxxx\u2019x",
  "xxx\u2019x",
  "xx\u2019",
  "xx\u2019x",
  "xx\u2019xx",
  "xy",
  "xy.first",
  "xy.second",
  "x{x",
  "x{xxxx_xxxx(x",
  "x||xx",
  "x},x",
  "x\u2019",
  "x\u2019x",
  "x\u2019xxxx",
  "x\ufe35x",
  "y",
  "y%M",
  "y%m",
  "y'",
  "y's",
  "y(1",
  "y(a",
  "y(i",
  "y(j",
  "y(k",
  "y(l",
  "y(n",
  "y(q",
  "y(r",
  "y(x",
  "y(y",
  "y)/2",
  "y)=a[i+1",
  "y)=p",
  "y)=z",
  "y)z",
  "y*d",
  "y*p.x",
  "y*p.y",
  "y*y",
  "y++",
  "y+1",
  "y+10",
  "y+=B",
  "y+=b",
  "y+i[l],v",
  "y+p.y",
  "y+r[i],v",
  "y+r[l],v",
  "y--",
  "y--;x--",
  "y-1",
  "y-10",
  "y.",
  "y.empty",
  "y.end",
  "y.erase(k",
  "y.first",
  "y.insert(a",
  "y.insert(k",
  "y.pop",
  "y.push(-v[j",
  "y.push(a",
  "y.push_back(vi(n",
  "y.second",
  "y.size",
  "y.top",
  "y/2",
  "y/=2",
  "y0",
  "y1",
  "y2",
  "y3",
  "y4",
  "y<0",
  "y<<\"\\n",
  "y=0",
  "y=0,x",
  "yCoordinates",
  "yCoordinates(y",
  "yCoordinates.end",
  "yCoordinates[i",
  "yPosition",
  "y[0",
  "y[0][i",
  "y[1001][1001",
  "y[12",
  "y[2",
  "y[4",
  "y[6",
  "y[N",
  "y[]={-1,0,0,1",
  "y[]={0,-1,0,1",
  "y[a",
  "y[current",
  "y[i",
  "y[i].push_back(x[u",
  "y[i].size",
  "y[i][b",
  "y[i][j",
  "y[i][t",
  "y[j",
  "y[k",
  "y[l",
  "y[l][k",
  "y[n",
  "y[p",
  "y[q",
  "y[x[i",
  "y[y",
  "y[y.size",
  "y[y]++",
  "y\\n",
  "y_a",
  "y_b",
  "y_s",
  "y_y",
  "ya",
  "ya<=yb",
  "ya<=yb&&xa<=xb",
  "ya>=yb&&xa>=xb",
  "yb",
  "ycoordinates",
  "ycoordinates(y",
  "ycoordinates.end",
  "ycoordinates[i",
  "year",
  "year++",
  "year1",
  "year2",
  "year2offset(int",
  "year2offset(year",
  "year_of_birth1",
  "year_of_birth2",
  "years",
  "years++",
  "yearsToDays(int",
  "yearsToDays(year",
  "years\\n",
  "yearstodays(int",
  "yearstodays(year",
  "yed",
  "yer",
  "yes",
  "yes\\n",
  "yet",
  "yi",
  "yj",
  "yl/",
  "ync",
  "you",
  "your",
  "ype",
  "yposition",
  "ys",
  "ys(y",
  "ys.end",
  "ys[0",
  "ys[0]++",
  "ys[1]++",
  "ys[2]++",
  "ys[3]++",
  "ys[4]++",
  "ys[5",
  "ys[i",
  "yup\\n",
  "yy",
  "yyy",
  "yyyy",
  "y||px",
  "y},r",
  "y\u2019",
  "y\u2019s",
  "z",
  "z(Z",
  "z(i",
  "z(m",
  "z(m+n+1",
  "z(z",
  "z)M",
  "z)m",
  "z++",
  "z+=y/2",
  "z+m",
  "z--",
  "z.",
  "z.end",
  "z.second",
  "z0",
  "z1",
  "z=0",
  "z=1",
  "z[1000",
  "z[N",
  "z[a",
  "z[b",
  "z[i",
  "z[i]++",
  "z[i]+i",
  "z[i].push_back(u",
  "z[i]={y",
  "z[j",
  "z[j-1",
  "z[l++",
  "z[length++",
  "z[m",
  "z[n",
  "z\\n",
  "za",
  "zb",
  "zeX",
  "zeY",
  "zed",
  "zero",
  "zeroCount",
  "zerocount",
  "zeroes",
  "zeros",
  "zeros[0",
  "zeros[N",
  "zeros[i",
  "zeros[n",
  "zeros[u",
  "zes",
  "zex",
  "zey",
  "zle",
  "zy)z",
  "zz(Z",
  "zz(z",
  "{",
  "{-1",
  "{-x",
  "{-y",
  "{c2",
  "{dy",
  "{k1",
  "{k2",
  "{sy",
  "{to",
  "{x1",
  "{x2",
  "{{x",
  "|",
  "|-dual[e.to",
  "|-xxxx[x.xx",
  "|=",
  "|D",
  "|X",
  "|Z",
  "|\\n",
  "|\\x",
  "|_|",
  "|d",
  "|px",
  "|x",
  "|z",
  "||",
  "||k",
  "}",
  "},r",
  "~",
  "~(s",
  "~(x",
  "~j",
  "~x",
  "\u00a0",
  "\u00ac",
  "\u00ac_\u00ac",
  "\u00af",
  "\u00af\\(x)/\u00af",
  "\u00af\\(\u30c4)/\u00af",
  "\u00b0",
  "\u00b0C.",
  "\u00b0F.",
  "\u00b0K.",
  "\u00b0X.",
  "\u00b0c.",
  "\u00b0f.",
  "\u00b0k.",
  "\u00b0x.",
  "\u00e4",
  "\u00e4.",
  "\u00f6",
  "\u00f6.",
  "\u00fc",
  "\u00fc.",
  "\u0ca0",
  "\u0ca0_\u0ca0",
  "\u0ca0\ufe35\u0ca0",
  "\u2014",
  "\u2018",
  "\u2018S",
  "\u2018X",
  "\u2018s",
  "\u2018x",
  "\u2019",
  "\u2019-(",
  "\u2019-)",
  "\u2019Cause",
  "\u2019Cos",
  "\u2019Coz",
  "\u2019Cuz",
  "\u2019S",
  "\u2019X",
  "\u2019Xxx",
  "\u2019Xxxxx",
  "\u2019am",
  "\u2019bout",
  "\u2019cause",
  "\u2019cos",
  "\u2019coz",
  "\u2019cuz",
  "\u2019d",
  "\u2019em",
  "\u2019ll",
  "\u2019m",
  "\u2019nuff",
  "\u2019re",
  "\u2019s",
  "\u2019ve",
  "\u2019x",
  "\u2019xx",
  "\u2019xxx",
  "\u2019xxxx",
  "\u2019y",
  "\u2019\u2019",
  "\u2501",
  "\u253b",
  "\u253b\u2501\u253b",
  "\u256f",
  "\u25a1",
  "\ufe35",
  "\uff09"
]